export default _export;
export type LogoProps = {
    /**
     * Adapter common configuration from io-package.json
     */
    common: any;
    /**
     * Adapter native data from io-package.json
     */
    native: any;
    /**
     * Adapter instance number.
     */
    instance: number;
    onLoad?: (contents: any) => void;
    onError?: (error: string) => void;
    /**
     * The styling class names.
     */
    classes: {
        buttons: string;
        logo: string;
    };
};
/** @type {typeof Logo} */
declare const _export: typeof Logo;
/**
 * @typedef {object} LogoProps
 * @property {any} common Adapter common configuration from io-package.json
 * @property {any} native Adapter native data from io-package.json
 * @property {number} instance Adapter instance number.
 * @property {(contents: any) => void} [onLoad]
 * @property {(error: string) => void} [onError]
 * @property {{ buttons: string, logo: string }} classes The styling class names.
 *
 * @extends {React.Component<LogoProps>}
 */
declare class Logo extends React.Component<LogoProps, any, any> {
    static generateFile(filename: any, obj: any): void;
    constructor(props: LogoProps | Readonly<LogoProps>);
    constructor(props: LogoProps, context: any);
    handleFileSelect(evt: any): void;
    download(): void;
    upload(): void;
}
declare namespace Logo {
    namespace propTypes {
        const common: PropTypes.Validator<object>;
        const className: PropTypes.Requireable<string>;
        const style: PropTypes.Requireable<object>;
        const native: PropTypes.Validator<object>;
        const instance: PropTypes.Validator<number>;
        const onError: PropTypes.Requireable<(...args: any[]) => any>;
        const onLoad: PropTypes.Requireable<(...args: any[]) => any>;
    }
}
import React from "react";
import PropTypes from "prop-types";
