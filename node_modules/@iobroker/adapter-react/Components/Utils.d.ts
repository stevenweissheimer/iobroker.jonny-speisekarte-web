export default Utils;
declare class Utils {
    static namespace: string;
    static INSTANCES: string;
    static dateFormat: string[];
    static FORBIDDEN_CHARS: RegExp;
    /**
     * Capitalize words.
     * @param {string | undefined} name
     * @returns {string}
     */
    static CapitalWords(name: string | undefined): string;
    static formatSeconds(seconds: any): string;
    /**
     * Get the name of the object by id from the name or description.
     * @param {Record<string, ioBroker.Object>} objects
     * @param {string} id
     * @param {{ name: any; } | ioBroker.Languages | null} settings
     * @param {{ language?: ioBroker.Languages; }} options
     * @param {boolean} [isDesc] Set to true to get the description.
     * @returns {string}
     */
    static getObjectName(objects: Record<string, ioBroker.Object>, id: string, settings: {
        name: any;
    } | ioBroker.Languages | null, options: {
        language?: ioBroker.Languages;
    }, isDesc?: boolean): string;
    /**
     * Get the name of the object from the name or description.
     * @param {ioBroker.PartialObject} obj
     * @param {{ name: any; } | ioBroker.Languages | null } settings or language
     * @param {{ language?: ioBroker.Languages; } } options
     * @param {boolean} [isDesc] Set to true to get the description.
     * @returns {string}
     */
    static getObjectNameFromObj(obj: ioBroker.PartialObject, settings: {
        name: any;
    } | ioBroker.Languages | null, options: {
        language?: ioBroker.Languages;
    }, isDesc?: boolean): string;
    /**
     * @param {ioBroker.PartialObject | ioBroker.ObjectCommon} obj
     * @param {string} forEnumId
     * @param {{ user: string; }} options
     * @returns {string | null}
     */
    static getSettingsOrder(obj: ioBroker.PartialObject | ioBroker.ObjectCommon, forEnumId: string, options: {
        user: string;
    }): string | null;
    /**
     * @param {ioBroker.PartialObject | ioBroker.ObjectCommon} obj
     * @param {string} forEnumId
     * @param {{ user: string; }} options
     */
    static getSettingsCustomURLs(obj: ioBroker.PartialObject | ioBroker.ObjectCommon, forEnumId: string, options: {
        user: string;
    }): any;
    /**
     * Reorder the array items in list between source and dest.
     * @param {Iterable<any> | ArrayLike<any>} list
     * @param {number} source
     * @param {number} dest
     */
    static reorder(list: Iterable<any> | ArrayLike<any>, source: number, dest: number): any[];
    /**
     * @param {any} obj
     * @param {{ id: any; user: any; name: any; icon: any; color: any; language: ioBroker.Languages; }} options
     * @param {boolean} [defaultEnabling]
     */
    static getSettings(obj: any, options: {
        id: any;
        user: any;
        name: any;
        icon: any;
        color: any;
        language: ioBroker.Languages;
    }, defaultEnabling?: boolean): any;
    /**
     * @param {any} obj
     * @param {any} settings
     * @param {{ user: any; language: ioBroker.Languages; }} options
     */
    static setSettings(obj: any, settings: any, options: {
        user: any;
        language: ioBroker.Languages;
    }): boolean;
    /**
     * Get the icon for the given settings.
     * @param {{ icon: string | undefined; name: string | undefined; prefix: string | undefined}} settings
     * @param {any} style
     * @returns {JSX.Element | null}
     */
    static getIcon(settings: {
        icon: string | undefined;
        name: string | undefined;
        prefix: string | undefined;
    }, style: any): JSX.Element | null;
    /**
     * Get the icon for the given object.
     * @param {string} id
     * @param {{ common: { icon: any; }; }} obj
     * @returns {string | null}
     */
    static getObjectIcon(id: string, obj: {
        common: {
            icon: any;
        };
    }): string | null;
    /**
     * Splits CamelCase into words.
     * @param {string | undefined} text
     * @returns {string}
     */
    static splitCamelCase(text: string | undefined): string;
    /**
     * Check if the given color is bright.
     * https://stackoverflow.com/questions/35969656/how-can-i-generate-the-opposite-color-according-to-current-color
     * @param {string | null | undefined} color
     * @param {boolean} [defaultValue]
     * @returns {boolean}
     */
    static isUseBright(color: string | null | undefined, defaultValue?: boolean): boolean;
    /**
     * Get the time string in the format 00:00.
     * @param {string | number} seconds
     */
    static getTimeString(seconds: string | number): string;
    /**
     * Gets the wind direction with the given angle (degrees).
     * @param {number} angle in degrees.
     * @returns {string | undefined}
     */
    static getWindDirection(angle: number): string | undefined;
    /**
     * Pad the given number with a zero if its not 2 digits long.
     * @param {string | number} num
     */
    static padding(num: string | number): string | number;
    /**
     * Sets the date format.
     * @param {string} format
     */
    static setDataFormat(format: string): void;
    /**
     * Converts the date to a string.
     * @param {string | number | Date} now
     * @returns {string}
     */
    static date2string(now: string | number | Date): string;
    /**
     * Render a text as a link.
     * @param {string} text
     * @returns {string | JSX.Element[]}
     */
    static renderTextWithA(text: string): string | JSX.Element[];
    /**
     * Get the smart name of the given state.
     * @param {Record<string, ioBroker.StateObject> | ioBroker.StateObject} states
     * @param {string} id
     * @param {string} instanceId
     * @param {boolean} [noCommon]
     */
    static getSmartName(states: Record<string, ioBroker.StateObject> | ioBroker.StateObject, id: string, instanceId: string, noCommon?: boolean): any;
    /**
     * Get the smart name from a state.
     * @param {ioBroker.StateObject} obj
     * @param {string} instanceId
     * @param {boolean} [noCommon]
     */
    static getSmartNameFromObj(obj: ioBroker.StateObject, instanceId: string, noCommon?: boolean): any;
    /**
     * Enable smart name for a state.
     * @param {ioBroker.StateObject} obj
     * @param {string} instanceId
     * @param {boolean} [noCommon]
     */
    static enableSmartName(obj: ioBroker.StateObject, instanceId: string, noCommon?: boolean): void;
    /**
     * Completely remove smart name from a state.
     * @param {ioBroker.StateObject} obj
     * @param {string | number} instanceId
     * @param {boolean} [noCommon]
     */
    static removeSmartName(obj: ioBroker.StateObject, instanceId: string | number, noCommon?: boolean): void;
    /**
     * Update the smartname of a state.
     * @param {ioBroker.StateObject} obj
     * @param {string} newSmartName
     * @param {string | undefined} byON
     * @param {string | undefined} smartType
     * @param {string} instanceId
     * @param {boolean} [noCommon]
     */
    static updateSmartName(obj: ioBroker.StateObject, newSmartName: string, byON: string | undefined, smartType: string | undefined, instanceId: string, noCommon?: boolean): void;
    /**
     * Disable the smart name of a state.
     * @param {ioBroker.StateObject} obj
     * @param {string} instanceId
     * @param {boolean} [noCommon]
     */
    static disableSmartName(obj: ioBroker.StateObject, instanceId: string, noCommon?: boolean): void;
    /**
     * Copy text to the clipboard.
     * @param {string} text
     * @param {Event} [e]
     */
    static copyToClipboard(text: string, e?: Event): void;
    /**
     * Gets the extension of a file name.
     * @param {string | null} [fileName] the file name.
     * @returns {string | null} The extension in lower case.
     */
    static getFileExtension(fileName?: string | null): string | null;
    /**
     * Format number of bytes as a string with B, KB, MB or GB.
     * The base for all calculations is 1024.
     * @param {number} bytes The number of bytes.
     * @returns {string} The formatted string (e.g. '723.5 KB')
     */
    static formatBytes(bytes: number): string;
    /**
     * Invert the given color according to theme type to get the inverted text color for background
     * @param {string} color Color in the format '#rrggbb' or '#rgb' (or without hash)
     * @param {string} themeType theme type
     * @param {string} invert dark theme has light color in control or light theme has light color in control
     * @returns {string}
     */
    static getInvertedColor(color: string, themeType: string, invert: string): string;
    /**
     * Invert the given color
     * @param {string} hex Color in the format '#rrggbb' or '#rgb' (or without hash)
     * @param {boolean} bw Set to black or white.
     * @returns {string}
     */
    static invertColor(hex: string, bw: boolean): string;
    /**
     * @private
     * @param {any} mix
     * @returns {string}
     */
    private static _toVal;
    /**
     * Convert any object to a string with its values.
     * @returns {string}
     */
    static clsx(...args: any[]): string;
    /**
     * Get the current theme name (either from local storage or the browser settings).
     * @param {string} [themeName]
     * @returns {string}
     */
    static getThemeName(themeName?: string): string;
    /**
     * Get the type of theme.
     * @param {string} [themeName]
     * @returns {'dark' | 'light'}
     */
    static getThemeType(themeName?: string): 'dark' | 'light';
    /**
     * Set the theme name and theme type.
     * @param {string} themeName
     */
    static setThemeName(themeName: string): void;
    /**
     * Toggle the theme name between 'dark' and 'colored'.
     * @param {string | null} themeName
     * @returns {string} the new theme name.
     */
    static toggleTheme(themeName: string | null): string;
    /**
     * Parse a query string into its parts.
     * @param {string} query
     * @returns {Record<string, string | boolean | number>}
     */
    static parseQuery(query: string): Record<string, string | boolean | number>;
    /**
     * Returns parent ID.
     * @param {string} id
     * @returns {string | null} parent ID or null if no parent
     */
    static getParentId(id: string): string | null;
    static formatDate(dateObj: any, dateFormat: any): string;
    static formatTime(seconds: any): string;
    static MDtext2link(text: any): any;
    static openLink(url: any, target: any): void;
    static MDgetTitle(text: any): any;
    static MDextractHeader(text: any): {
        header: {};
        body: any;
    };
    static MDremoveDocsify(text: any): any;
    /**
     * Generate the json file on the file for download.
     * @param {string} filename file name
     * @returns {object} json structure (not stringified)
     */
    static generateFile(filename: string, json: any): object;
    /**
     * Convert quality code into text
     * @param {number} quality code
     * @returns {array<string>} lines that decode qulity
     */
    static quality2text(quality: number): any;
    /**
     * Deep copy object
     * @param {object} object
     * @returns {object}
     */
    static clone(object: object): object;
    /**
     * Get states of object
     * @param {object} obj
     * @returns {object} states as an object in form {"value1": "label1", "value2": "label2"} or null
     */
    static getStates(obj: object): object;
}
