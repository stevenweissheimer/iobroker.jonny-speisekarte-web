{"version":3,"sources":["SimpleCron/cron2text.js"],"names":["cronToText","cronspec","withSeconds","locale","NAMES","JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","SUN","MON","TUE","WED","THU","FRI","SAT","REPLACEMENTS","FIELDS","s","m","h","D","M","Y","d","getValue","value","offset","arguments","length","undefined","max","isNaN","Math","min","cloneSchedule","sched","clone","field","slice","add","name","inc","i","indexOf","push","sort","a","b","addHash","schedules","curSched","hash","dc","addWeekday","except1","except2","exceptions","addRange","item","incSplit","split","range","rangeSplit","parse","toString","replace","isHash","itemSorter","parseExpr","expr","schedule","components","f","component","items","prepareExpr","prepared","toUpperCase","parseCron","hasSeconds","e","absFloor","number","ceil","floor","toInt","argumentForCoercion","coercedNumber","isFinite","ordinal","output","ORDINALS","th","st","nd","rd","numberList","numbers","lastVal","pop","join","numberToDateName","type","DOW","MONTH","dateList","outputText","zeroPad","x","scheduleToSentence","Every","hm","j","k","and"],"mappings":"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","sourcesContent":["/**\n * Given a cronspec, return the human-readable string.\n * @param {string} cronspec\n * @param withSeconds\n * @param {Object=} locale\n */\nfunction cronToText(cronspec, withSeconds, locale) {\n\n    // Constant array to convert valid names to values\n    const NAMES = {\n        JAN: 1, FEB: 2, MAR: 3, APR: 4, MAY: 5, JUN: 6, JUL: 7, AUG: 8,\n        SEP: 9, OCT: 10, NOV: 11, DEC: 12,\n        SUN: 1, MON: 2, TUE: 3, WED: 4, THU: 5, FRI: 6, SAT: 7\n    };\n\n    // Parsable replacements for common expressions\n    const REPLACEMENTS = {\n        '* * * * * *': '0/1 * * * * *',\n        '@YEARLY': '0 0 1 1 *',\n        '@ANNUALLY': '0 0 1 1 *',\n        '@MONTHLY': '0 0 1 * *',\n        '@WEEKLY': '0 0 * * 0',\n        '@DAILY': '0 0 * * *',\n        '@HOURLY': '0 * * * *'\n    };\n\n    // Contains the index, min, and max for each of the constraints\n    const FIELDS = {\n        s: [0, 0, 59], // seconds\n        m: [1, 0, 59], // minutes\n        h: [2, 0, 23], // hours\n        D: [3, 1, 31], // day of month\n        M: [4, 1, 12], // month\n        Y: [6, 1970, 2099], // year\n        d: [5, 1, 7, 1] // day of week\n    };\n\n    /**\n     * Returns the value + offset if value is a number, otherwise it\n     * attempts to look up the value in the NAMES table and returns\n     * that result instead.\n     *\n     * @param {Number,String} value: The value that should be parsed\n     * @param {Number=} offset: Any offset that must be added to the value\n     * @param {Number=} max\n     * @returns {Number|null}\n     */\n    function getValue(value) {\n        const offset = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n        const max = arguments.length <= 2 || arguments[2] === undefined ? 9999 : arguments[2];\n\n        return isNaN(value) ? NAMES[value] || null : Math.min(+value + offset, max);\n    }\n\n    /**\n     * Returns a deep clone of a schedule skipping any day of week\n     * constraints.\n     *\n     * @param {Object} sched: The schedule that will be cloned\n     * @returns {Object}\n     */\n    function cloneSchedule(sched) {\n        const clone = {};\n        let field;\n\n        for (field in sched) {\n            if (field !== 'dc' && field !== 'd') {\n                clone[field] = sched[field].slice(0);\n            }\n        }\n\n        return clone;\n    }\n\n    /**\n     * Adds values to the specified constraint in the current schedule.\n     *\n     * @param {Object} sched: The schedule to add the constraint to\n     * @param {String} name: Name of constraint to add\n     * @param {Number} min: Minimum value for this constraint\n     * @param {Number} max: Maximum value for this constraint\n     */\n    function add(sched, name, min, max) {\n        const inc = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];\n\n        let i = min;\n\n        if (!sched[name]) {\n            sched[name] = [];\n        }\n\n        while (i <= max) {\n            if (sched[name].indexOf(i) < 0) {\n                sched[name].push(i);\n            }\n            i += inc || 1;\n        }\n\n        sched[name].sort(function (a, b) {\n            return a - b;\n        });\n    }\n\n    /**\n     * Adds a hash item (of the form x#y or xL) to the schedule.\n     *\n     * @param {Object} schedules: The current schedule array to add to\n     * @param {Object} curSched: The current schedule to add to\n     * @param {Number} value: The value to add (x of x#y or xL)\n     * @param {Number} hash: The hash value to add (y of x#y)\n     */\n    function addHash(schedules, curSched, value, hash) {\n        // if there are any existing day of week constraints that\n        // aren't equal to the one we're adding, create a new\n        // composite schedule\n        if ((curSched.d && !curSched.dc) || (curSched.dc && curSched.dc.indexOf(hash) < 0)) {\n            schedules.push(cloneSchedule(curSched));\n            curSched = schedules[schedules.length - 1];\n        }\n\n        add(curSched, 'd', value, value);\n        add(curSched, 'dc', hash, hash);\n    }\n\n    /**\n     *\n     * @param {Object} s: The existing set of schedules\n     * @param {Object} curSched: The current schedule to add to\n     * @param {Number} value\n     */\n    function addWeekday(s, curSched, value) {\n        const except1 = {},\n            except2 = {};\n        if (value === 1) {\n            // cron doesn't pass month boundaries, so if 1st is a\n            // weekend then we need to use 2nd or 3rd instead\n            add(curSched, 'D', 1, 3);\n            add(curSched, 'd', NAMES.MON, NAMES.FRI);\n            add(except1, 'D', 2, 2);\n            add(except1, 'd', NAMES.TUE, NAMES.FRI);\n            add(except2, 'D', 3, 3);\n            add(except2, 'd', NAMES.TUE, NAMES.FRI);\n        } else {\n            // normally you want the closest day, so if v is a\n            // Saturday, use the previous Friday.  If it's a\n            // sunday, use the following Monday.\n            add(curSched, 'D', value - 1, value + 1);\n            add(curSched, 'd', NAMES.MON, NAMES.FRI);\n            add(except1, 'D', value - 1, value - 1);\n            add(except1, 'd', NAMES.MON, NAMES.THU);\n            add(except2, 'D', value + 1, value + 1);\n            add(except2, 'd', NAMES.TUE, NAMES.FRI);\n        }\n        s.exceptions.push(except1);\n        s.exceptions.push(except2);\n    }\n\n    /**\n     * Adds a range item (of the form x-y/z) to the schedule.\n     *\n     * @param {String} item: The cron expression item to add\n     * @param {Object} curSched: The current schedule to add to\n     * @param {String} name: The name to use for this constraint\n     * @param {Number} min: The min value for the constraint\n     * @param {Number} max: The max value for the constraint\n     * @param {Number} offset: The offset to apply to the cron value\n     */\n    function addRange(item, curSched, name, min, max, offset) {\n        // parse range/x\n        const incSplit = item.split('/'),\n            inc = +incSplit[1],\n            range = incSplit[0];\n\n        // parse x-y or * or 0\n        if (range !== '*' && range !== '0') {\n            const rangeSplit = range.split('-');\n            min = getValue(rangeSplit[0], offset, max);\n\n            // fix for issue #13, range may be single digit\n            max = getValue(rangeSplit[1], offset, max) || max;\n        }\n\n        add(curSched, name, min, max, inc);\n    }\n\n    /**\n     * Parses a particular item within a cron expression.\n     *\n     * @param {String} item: The cron expression item to parse\n     * @param {Object} s: The existing set of schedules\n     * @param {String} name: The name to use for this constraint\n     * @param {Number} min: The min value for the constraint\n     * @param {Number} max: The max value for the constraint\n     * @param {Number} offset: The offset to apply to the cron value\n     */\n    function parse(item, s, name, min, max, offset) {\n        let value,\n            split,\n            schedules = s.schedules,\n            curSched = schedules[schedules.length - 1];\n\n        // L just means min - 1 (this also makes it work for any field)\n        if (item === 'L') {\n            item = (min - 1).toString(10);\n        }\n\n        // parse x\n        if ((value = getValue(item, offset, max)) !== null) {\n            add(curSched, name, value, value);\n        }\n        // parse xW\n        else if ((value = getValue(item.replace('W', ''), offset, max)) !== null) {\n            addWeekday(s, curSched, value);\n        }\n        // parse xL\n        else if ((value = getValue(item.replace('L', ''), offset, max)) !== null) {\n            addHash(schedules, curSched, value, min - 1);\n        }\n        // parse x#y\n        else if ((split = item.split('#')).length === 2) {\n            value = getValue(split[0], offset, max);\n            addHash(schedules, curSched, value, getValue(split[1]));\n        }\n        // parse x-y or x-y/z or */z or 0/z\n        else {\n            addRange(item, curSched, name, min, max, offset);\n        }\n    }\n\n    /**\n     * Returns true if the item is either of the form x#y or xL.\n     *\n     * @param {String} item: The expression item to check\n     */\n    function isHash(item) {\n        return item.indexOf('#') > -1 || item.indexOf('L') > 0;\n    }\n\n    function itemSorter(a, b) {\n        return isHash(a) && !isHash(b) ? 1 : a - b;\n    }\n\n    /**\n     * Parses each of the fields in a cron expression.  The expression must\n     * include the seconds field, the year field is optional.\n     *\n     * @param {String} expr: The cron expression to parse\n     */\n    function parseExpr(expr) {\n        const schedule = { schedules: [{}], exceptions: [] };\n        const components = expr.replace(/(\\s)+/g, ' ').split(' ');\n        let field;\n        let f;\n        let component;\n        let items;\n\n        for (field in FIELDS) {\n            f = FIELDS[field];\n            component = components[f[0]];\n            if (component && component !== '*' && component !== '?') {\n                // need to sort so that any #'s come last, otherwise\n                // schedule clones to handle # won't contain all of the\n                // other constraints\n                items = component.split(',').sort(itemSorter);\n                let i;\n                const length = items.length;\n                for (i = 0; i < length; i++) {\n                    parse(items[i], schedule, field, f[1], f[2], f[3]);\n                }\n            }\n        }\n\n        return schedule;\n    }\n\n    /**\n     * Make cron expression parsable.\n     *\n     * @param {String} expr: The cron expression to prepare\n     */\n    function prepareExpr(expr) {\n        const prepared = expr.toUpperCase();\n        return REPLACEMENTS[prepared] || prepared;\n    }\n\n    function parseCron(expr, hasSeconds) {\n        const e = prepareExpr(expr);\n        return parseExpr(hasSeconds ? e : '0 ' + e);\n    }\n\n    const schedule = parseCron(cronspec, withSeconds);\n\n    function absFloor(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        const coercedNumber = +argumentForCoercion;\n        let value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    function ordinal(number) {\n        const b = number % 10,\n            output = (toInt(number % 100 / 10) === 1) ? locale.ORDINALS.th :\n                (b === 1) ? locale.ORDINALS.st :\n                    (b === 2) ? locale.ORDINALS.nd :\n                        (b === 3) ? locale.ORDINALS.rd : locale.ORDINALS.th;\n        return number + output;\n    }\n\n    /**\n     * For an array of numbers, e.g. a list of hours in a schedule,\n     * return a string listing out all of the values (complete with\n     * \"and\" plus ordinal text on the last item).\n     * @param {Number[]} numbers\n     * @returns {string}\n     */\n    function numberList(numbers) {\n        if (numbers.length < 2) {\n            return ordinal(numbers);\n        }\n\n        const lastVal = numbers.pop();\n        return numbers.join(', ') + ' ' + locale['and'] + ' ' + ordinal(lastVal);\n    }\n\n    /**\n     * Parse a number into day of week, or a month name;\n     * used in dateList below.\n     * @param {Number|String} value\n     * @param {String} type\n     * @returns {String}\n     */\n    function numberToDateName(value, type) {\n        if (type === 'dow') {\n            return locale.DOW[value - 1];\n        } else if (type === 'mon') {\n            return locale.MONTH[value - 1];\n        }\n    }\n\n    /**\n     * From an array of numbers corresponding to dates (given in type: either\n     * days of the week, or months), return a string listing all the values.\n     * @param {Number[]} numbers\n     * @param {String} type\n     * @returns {String}\n     */\n    function dateList(numbers, type) {\n        if (numbers.length < 2) {\n            return numberToDateName('' + numbers[0], type);\n        }\n\n        const lastVal = '' + numbers.pop();\n        let outputText = '';\n\n        for (let i = 0, value; (value = numbers[i]); i++) {\n            if (outputText.length > 0) {\n                outputText += ', ';\n            }\n            outputText += numberToDateName(value, type);\n        }\n        return outputText + ' ' + locale['and'] + ' ' + numberToDateName(lastVal, type);\n    }\n\n    /**\n     * Pad to equivalent of sprintf('%02d').\n     * @param {Number} x\n     * @returns {string}\n     */\n    function zeroPad(x) {\n        return (x < 10) ? '0' + x : x;\n    }\n\n    //----------------\n\n    /**\n     * Given a schedule, generate a friendly sentence description.\n     * @param {Object} schedule\n     * @param {boolean} withSeconds\n     * @returns {string}\n     */\n    function scheduleToSentence(schedule, withSeconds) {\n        let outputText = locale.Every + ' ';\n\n        if (schedule['h'] && schedule['m'] && schedule['h'].length <= 2 && schedule['m'].length <= 2 && withSeconds && schedule['s'] && schedule['s'].length <= 2 ) {\n            // If there are only one or two specified values for\n            // hour or minute, print them in HH:MM:SS format\n\n            const hm = [];\n            for (let i = 0; i < schedule['h'].length; i++) {\n                for (let j = 0; j < schedule['m'].length; j++) {\n                    for (let k = 0; k < schedule['s'].length; k++) {\n                        hm.push(zeroPad(schedule['h'][i]) + ':' + zeroPad(schedule['m'][j]) + ':' + zeroPad(schedule['s'][k]));\n                    }\n                }\n            }\n            if (hm.length < 2) {\n                outputText = locale['At'] + ' ' + hm[0];\n            } else {\n                const lastVal = hm.pop();\n                outputText = locale['At'] + ' ' + hm.join(', ') + ' ' + locale.and + ' ' + lastVal;\n            }\n            if (!schedule['d'] && !schedule['D']) {\n                outputText += ' ' + locale['every day'] + ' ';\n            }\n        } else\n        if (schedule['h'] && schedule['m'] && schedule['h'].length <= 2 && schedule['m'].length <= 2) {\n            // If there are only one or two specified values for\n            // hour or minute, print them in HH:MM format\n\n            const hm = [];\n            for (let i = 0; i < schedule['h'].length; i++) {\n                for (let j = 0; j < schedule['m'].length; j++) {\n                    hm.push(zeroPad(schedule['h'][i]) + ':' + zeroPad(schedule['m'][j]));\n                }\n            }\n            if (hm.length < 2) {\n                outputText = locale['At'] + ' ' + hm[0];\n            } else {\n                const lastVal = hm.pop();\n                outputText = locale['At'] + ' ' + hm.join(', ') + ' ' + locale.and + ' ' + lastVal;\n            }\n\n            if (!schedule['d'] && !schedule['D']) {\n                outputText += ' ' + locale['every day'] + ' ';\n            }\n        } else {\n            // Otherwise, list out every specified hour/minute value.\n\n            if (schedule['h']) { // runs only at specific hours\n                if (schedule['m']) { // and only at specific minutes\n                    if (withSeconds) {\n                        if (!schedule['s'] || schedule['s'].length === 60) {\n                            outputText += locale['second of every'] + ' ' + numberList(schedule['m']) + ' ' + locale['minute past the'] + ' ' + numberList(schedule['h']) + ' ' + locale['hour'];\n                        } else {\n                            outputText += numberList(schedule['s']) + ' ' + locale['second of every'] + ' ' +numberList(schedule['m']) + ' ' + locale['minute past the'] + ' ' + numberList(schedule['h']) + ' ' + locale['hour'];\n                        }\n                    } else {\n                        outputText += numberList(schedule['m']) + ' ' + locale['minute past the'] + ' ' + numberList(schedule['h']) + ' ' + locale['hour'];\n                    }\n                } else { // specific hours, but every minute\n                    if (withSeconds) {\n                        if (!schedule['s'] || schedule['s'].length === 60) {\n                            outputText += locale['second of every'] + ' ' + locale['minute of'] + ' ' + numberList(schedule['h']) + ' ' + locale['hour'];\n                        } else {\n                            outputText += numberList(schedule['s']) + ' ' + locale['second of every'] + ' ' + locale['minute of'] + ' ' + numberList(schedule['h']) + ' ' + locale['hour'];\n                        }\n                    } else {\n                        outputText += locale['minute of'] + ' ' + numberList(schedule['h']) + ' ' + locale['hour'];\n                    }\n                }\n            } else if (schedule['m']) { // every hour, but specific minutes\n                if (withSeconds) {\n                    if (!schedule['s'] || schedule['s'].length === 60) {\n                        outputText += locale['second of every'] + ' ' + numberList(schedule['m']) + ' ' + locale['minute every hour'];\n                    } else {\n                        outputText += numberList(schedule['s']) + ' ' + locale['second of every'] + ' ' + numberList(schedule['m']) + ' ' + locale['minute every hour'];\n                    }\n                } else {\n                    outputText += numberList(schedule['m']) + ' ' + locale['minute every hour'];\n                }\n            } else if (withSeconds) {\n                if (!schedule['s'] || schedule['s'].length === 60) {\n                    outputText += locale['second'];\n                } else {\n                    outputText += numberList(schedule['s']) + ' ' + locale['second'];\n                }\n            } else { // cronspec has \"*\" for both hour and minute\n                outputText += locale['minute'];\n            }\n        }\n\n        if (schedule['D']) { // runs only on specific day(s) of month\n            outputText += (locale['on the'] ? ' ' + locale['on the'] + ' ' : ' ') + numberList(schedule['D']);\n            if (!schedule['M']) {\n                outputText += ' ' + locale['of every month'];\n            }\n        }\n\n        if (schedule['d']) { // runs only on specific day(s) of week\n            if (schedule['D']) {\n                // if both day fields are specified, cron uses both; superuser.com/a/348372\n                outputText += ' ' + locale['and every'] + ' ';\n            } else {\n                outputText += ' ' + locale['on'] + ' ';\n            }\n            outputText += dateList(schedule['d'], 'dow');\n        }\n\n        if (schedule['M']) {\n            // runs only in specific months; put this output last\n            outputText += ' ' + locale['in'] + ' ' + dateList(schedule['M'], 'mon');\n        }\n\n        return outputText;\n    }\n\n    return scheduleToSentence(schedule.schedules[0], withSeconds);\n}\n\nexport default cronToText;\n"],"file":"cron2text.js"}