{"version":3,"sources":["FileViewer.js"],"names":["styles","theme","dialog","height","maxHeight","maxWidth","content","textAlign","textarea","width","img","objectFit","EXTENSIONS","images","code","txt","getFileExtension","fileName","pos","lastIndexOf","substring","toLowerCase","FileViewer","props","ext","href","state","text","copyPossible","includes","fetch","then","response","data","setState","e","target","onerror","src","NoImage","classes","key","onClose","t","getContent","Utils","copyToClipboard","React","Component","propTypes","PropTypes","string","func","lang","expertMode","bool","isRequired","_export"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport withWidth from \"@material-ui/core/withWidth\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport NoImage from '../assets/no_icon.svg';\r\nimport Utils from './Utils';\r\n\r\n// Icons\r\nimport {FaCopy as CopyIcon} from 'react-icons/fa';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nconst styles = theme => ({\r\n    dialog: {\r\n        height: '100%',\r\n        maxHeight: '100%',\r\n        maxWidth: '100%',\r\n    },\r\n    content: {\r\n        textAlign: 'center',\r\n    },\r\n    textarea: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    img: {\r\n        width: 'auto',\r\n        height: 'calc(100% - 5px)',\r\n        objectFit: 'contain',\r\n    }\r\n});\r\n\r\nexport const EXTENSIONS = {\r\n    images: ['png', 'jpg', 'svg', 'jpeg', 'jpg'],\r\n    code:   ['js', 'json'],\r\n    txt:    ['log', 'txt', 'html', 'css', 'xml'],\r\n};\r\n\r\nfunction getFileExtension(fileName) {\r\n    const pos = fileName.lastIndexOf('.');\r\n    if (pos !== -1) {\r\n        return fileName.substring(pos + 1).toLowerCase();\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef {object} FileViewerProps\r\n * @property {string} [key] The key to identify this component.\r\n * @property {import('../types').Translator} t Translation function\r\n * @property {ioBroker.Languages} [lang] The selected language.\r\n * @property {boolean} [expertMode] Is expert mode enabled? (default: false)\r\n * @property {() => void} onClose Callback when the viewer is closed.\r\n * @property {string} href The URL to the file to be displayed.\r\n * \r\n * @extends {React.Component<FileViewerProps>}\r\n */\r\nclass FileViewer extends React.Component {\r\n    /**\r\n     * @param {Readonly<FileViewerProps>} props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.ext = getFileExtension(this.props.href); // todo: replace later with Utils.getFileExtension\r\n\r\n        this.state = {\r\n            text: null,\r\n            code: null,\r\n            copyPossible: EXTENSIONS.code.includes(this.ext) || EXTENSIONS.txt.includes(this.ext)\r\n        };\r\n\r\n        if (this.state.copyPossible) {\r\n            fetch(this.props.href)\r\n                .then(response => response.text())\r\n                .then(data => {\r\n                    if (EXTENSIONS.txt.includes(this.ext)) {\r\n                        this.setState({text: data});\r\n                    } else if (EXTENSIONS.code.includes(this.ext)) {\r\n                        this.setState({code: data});\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps() {\r\n\r\n    }\r\n\r\n    getContent() {\r\n        if (EXTENSIONS.images.includes(this.ext)) {\r\n            return <img\r\n                onError={ e => {\r\n                    e.target.onerror = null;\r\n                    e.target.src = NoImage\r\n                } }\r\n                className={ this.props.classes.img }\r\n                src={ this.props.href } alt={ this.props.href }/>;\r\n        } else if (this.state.code !== null) {\r\n            return <TextField\r\n                className={ this.props.classes.textarea }\r\n                multiline\r\n                value={ this.state.code }\r\n                readOnly={true}/>;\r\n        } else  if (this.state.text !== null) {\r\n            return <TextField\r\n                className={ this.props.classes.textarea }\r\n                value={ this.state.code }\r\n                multiline\r\n                readOnly={true}/>;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Dialog\r\n            key={this.props.key}\r\n            className={ this.props.classes.dialog }\r\n            open={ this.props.href }\r\n            onClose={ () => this.props.onClose() }\r\n            fullWidth={ true }\r\n            fullScreen={ true }\r\n            aria-labelledby=\"form-dialog-title\"\r\n        >\r\n            <DialogTitle id=\"form-dialog-title\">{ this.props.t('View: %s', this.props.href) }</DialogTitle>\r\n            <DialogContent className={ this.props.classes.content }>\r\n                    { this.getContent() }\r\n            </DialogContent>\r\n            <DialogActions>\r\n                { this.state.copyPossible ? <Button onClick={e => Utils.copyToClipboard(this.state.text || this.state.code, e) } >\r\n                    <CopyIcon />\r\n                    { this.props.t('Copy content') }\r\n                </Button> : null }\r\n\r\n                <Button onClick={() => this.props.onClose()} color=\"primary\">\r\n                    <CloseIcon />\r\n                    { this.props.t('Close') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nFileViewer.propTypes = {\r\n    key: PropTypes.string,\r\n    t: PropTypes.func,\r\n    lang: PropTypes.string,\r\n    expertMode: PropTypes.bool,\r\n    onClose: PropTypes.func,\r\n    href: PropTypes.string.isRequired\r\n};\r\n\r\n/** @type {typeof FileViewer} */\r\nconst _export = withWidth()(withStyles(styles)(FileViewer));\r\nexport default _export;\r\n"],"file":"FileViewer.js"}