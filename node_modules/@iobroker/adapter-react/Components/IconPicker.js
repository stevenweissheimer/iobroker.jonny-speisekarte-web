"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _i18n = _interopRequireDefault(require("@iobroker/adapter-react/i18n"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _DialogTitle = _interopRequireDefault(require("@material-ui/core/DialogTitle"));

var _Tabs = _interopRequireDefault(require("@material-ui/core/Tabs"));

var _Tab = _interopRequireDefault(require("@material-ui/core/Tab"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _ViewModule = _interopRequireDefault(require("@material-ui/icons/ViewModule"));

var _Image = _interopRequireDefault(require("./Image"));

var _FileBrowser = _interopRequireDefault(require("./FileBrowser"));

var _Utils = _interopRequireDefault(require("./Utils"));

var _lamp_table = _interopRequireDefault(require("../assets/lamp_table.svg"));

var _lamp_ceiling = _interopRequireDefault(require("../assets/lamp_ceiling.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ICONS = [{
  icon: _lamp_table["default"],
  color: '#FFFFFF',
  name: 'Table lamp'
}, {
  icon: _lamp_ceiling["default"],
  color: '#FFFFFF',
  name: 'Ceiling lamp'
}];

var styles = function styles(theme) {
  return {
    div: {
      width: '100%',
      lineHeight: '48px'
    },
    dialogContent: {
      overflow: 'hidden'
    },
    dialogTab: {
      height: 500,
      overflow: 'hidden'
    },
    textField: {},
    textFieldWithButton: {
      width: 'calc(100% - 102px)',
      verticalAlign: 'bottom'
    },
    textDense: {
      marginTop: 0,
      marginBottom: 0
    },
    buttonIcon: {
      marginRight: theme.spacing(1)
    },
    icon: {
      width: 32,
      height: 32,
      margin: theme.spacing(1),
      color: theme.palette.type === 'dark' ? '#FFF' : '#000'
    },
    grid: {
      padding: theme.spacing(2)
    },
    gridIcon: {
      '&:hover': {
        background: theme.palette.primary.dark
      },
      textAlign: 'center'
    },
    selectButton: {
      verticalAlign: 'bottom'
    },
    iconSelected: {
      background: theme.palette.primary.main,
      '&:hover': {
        background: theme.palette.primary.light
      }
    },
    imagePreviewDiv: {
      display: 'inline-block',
      marginRight: theme.spacing(1),
      verticalAlign: 'bottom'
    },
    imagePreview: {
      width: 32,
      height: 32,
      color: theme.palette.type === 'dark' ? '#FFF' : '#000'
    }
  };
};

var PRESET_PREFIX = 'preset:';
/**
 * @typedef {object} IconPickerProps
 * @property {string} [key] The key to identify this component.
 * @property {string} [color] The color.
 * @property {string} [value] The value.
 * @property {string} [label] The label.
 * @property {boolean} [disabled] Set to true to disable the icon picker.
 * @property {(icon: string) => void} onChange The icon change callback.
 * @property {import('../Connection').default} socket The socket connection.
 * @property {string} [imagePrefix] The image prefix (default: './files/')
 * @property {React.CSSProperties} [style] Additional styling for this component.
 * @property {string} [className] The CSS class name.
 *
 * @extends {React.Component<IconPickerProps>}
 */

var IconPicker = /*#__PURE__*/function (_React$Component) {
  _inherits(IconPicker, _React$Component);

  var _super = _createSuper(IconPicker);

  /**
   * @param {Readonly<IconPickerProps>} props
   */
  function IconPicker(props) {
    var _this;

    _classCallCheck(this, IconPicker);

    _this = _super.call(this, props);
    _this.state = {
      color: _this.props.color || '',
      value: _this.props.value || '',
      dialogValue: '',
      showDialog: false,
      selectedTab: _this.props.value && !_this.props.value.startsWith('data:image/') ? 1 : 0,
      imgError: false
    };
    _this.imagePrefix = _this.props.imagePrefix || './files/';
    return _this;
  }
  /*static getDerivedStateFromProps(props, state) {
      const newState = {};
      let changed = false;
        if (props && state && props.value !== state.value) {
          newState.value = props.value;
          changed = true;
      }
        if (props && state && props.color !== state.color) {
          newState.color = props.color;
          changed = true;
      }
        return changed ? newState : null;
  }*/


  _createClass(IconPicker, [{
    key: "renderOneIcon",
    value: function renderOneIcon(item, i) {
      var _this2 = this;

      return /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        item: true,
        xs: true,
        key: item.name || i,
        className: _Utils["default"].clsx(this.props.classes.gridIcon, this.state.dialogValue && this.state.dialogValue.startsWith(PRESET_PREFIX) && this.state.dialogValue.endsWith(item.name) && this.props.classes.iconSelected),
        onClick: function onClick() {
          return _this2.setState({
            dialogValue: PRESET_PREFIX + item.name
          });
        },
        onDoubleClick: function onDoubleClick() {
          return _this2.setState({
            dialogValue: PRESET_PREFIX + item.name
          }, function () {
            return _this2.onDialogClose(_this2.state.dialogValue);
          });
        }
      }, /*#__PURE__*/_react["default"].createElement("img", {
        className: this.props.classes.icon,
        src: item.icon,
        alt: item.name,
        style: item.color ? {
          color: item.color
        } : {}
      }));
    }
  }, {
    key: "renderPredefinedIcons",
    value: function renderPredefinedIcons() {
      var _this3 = this;

      return /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        container: true,
        spacing: 2,
        justify: "center",
        className: this.props.classes.grid
      }, ICONS.map(function (item, i) {
        return _this3.renderOneIcon(item, i);
      }));
    }
  }, {
    key: "fetchIcon",
    value: function fetchIcon(src) {
      return fetch(src).then(function (response) {
        return response.text();
      });
    }
  }, {
    key: "getIdFromSrc",
    value: function getIdFromSrc(svg) {
      var len = 'data:image/svg+xml;base64, ';

      if (!svg || !svg.startsWith(len)) {
        return null;
      }

      svg = svg.substring(len.length);

      try {
        svg = atob(svg);
        var m = svg.match(/<svg id="([^"]+)"/);
        return m ? m[1] : null;
      } catch (e) {
        console.warn('Cannot decode ' + svg);
      }

      return null;
    }
  }, {
    key: "renderFileBrowser",
    value: function renderFileBrowser() {
      var _this4 = this;

      return /*#__PURE__*/_react["default"].createElement(_FileBrowser["default"], {
        t: _i18n["default"].t,
        imagePrefix: this.imagePrefix,
        lang: _i18n["default"].getLanguage(),
        socket: this.props.socket,
        ready: true,
        showExpertButton: true,
        showToolbar: true,
        allowUpload: true,
        allowDownload: false,
        allowCreateFolder: true,
        allowDelete: false,
        allowView: true,
        showViewTypeButton: true,
        filterFiles: ['png', 'svg', 'bmp', 'jpg', 'jpeg'],
        onSelect: function onSelect(path, isDoubleClick) {
          return _this4.setState({
            dialogValue: path
          }, function () {
            return isDoubleClick && _this4.onDialogClose(path);
          });
        }
      });
    }
  }, {
    key: "onDialogClose",
    value: function onDialogClose(value) {
      var _this5 = this;

      if (value) {
        if (value.startsWith(PRESET_PREFIX)) {
          value = value.substring(7);
          var item = ICONS.find(function (item) {
            return item.name === value;
          });

          if (item) {
            //fetch icon
            this.fetchIcon(item.icon).then(function (svg) {
              svg = svg.replace('<svg ', '<svg id="' + value + '" ');
              var valueSvg = 'data:image/svg+xml;base64, ' + window.btoa(svg);

              _this5.setState({
                value: valueSvg,
                showDialog: false,
                imgError: false,
                dialogValue: '',
                dialogInitialValue: ''
              }, function () {
                return _this5.props.onChange(valueSvg);
              });
            });
          } else {
            this.setState({
              value: '',
              showDialog: false,
              imgError: false,
              dialogValue: '',
              dialogInitialValue: ''
            }, function () {
              return _this5.props.onChange('');
            });
          }
        } else {
          // it is path to image
          this.setState({
            value: value,
            showDialog: false,
            imgError: false,
            dialogValue: '',
            dialogInitialValue: ''
          }, function () {
            return _this5.props.onChange(value);
          });
        }
      } else {
        this.setState({
          showDialog: false
        });
      }
    }
  }, {
    key: "renderDialog",
    value: function renderDialog() {
      var _this6 = this;

      if (!this.state.showDialog) {
        return null;
      }

      return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
        key: this.props.key,
        open: true,
        fullWidth: true,
        maxWidth: "lg",
        onClose: function onClose() {
          return _this6.setState({
            showDialog: false
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], null, _i18n["default"].t('Select icon...')), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], {
        className: this.props.classes.dialogContent
      }, /*#__PURE__*/_react["default"].createElement(_Tabs["default"], {
        value: this.state.selectedTab,
        onChange: function onChange(e, selectedTab) {
          return _this6.setState({
            selectedTab: selectedTab
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_Tab["default"], {
        label: _i18n["default"].t('Predefined')
      }), /*#__PURE__*/_react["default"].createElement(_Tab["default"], {
        label: _i18n["default"].t('User defined')
      })), this.state.selectedTab === 0 && /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.dialogTab
      }, this.renderPredefinedIcons()), this.state.selectedTab === 1 && /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.dialogTab
      }, this.renderFileBrowser())), /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        onClick: function onClick() {
          return _this6.onDialogClose();
        }
      }, /*#__PURE__*/_react["default"].createElement(_Close["default"], {
        className: this.props.classes.buttonIcon
      }), _i18n["default"].t('Cancel')), /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        onClick: function onClick() {
          return _this6.onDialogClose(_this6.state.dialogValue);
        },
        color: "primary",
        disabled: !this.state.dialogValue || this.state.dialogInitialValue === this.state.dialogValue,
        autoFocus: true
      }, /*#__PURE__*/_react["default"].createElement(_Check["default"], {
        className: this.props.classes.buttonIcon
      }), _i18n["default"].t('Select'))));
    }
  }, {
    key: "render",
    value: function render() {
      var _this7 = this;

      return /*#__PURE__*/_react["default"].createElement("div", {
        key: this.props.key,
        style: this.props.style || {},
        className: _Utils["default"].clsx(this.props.classes.div, this.props.className)
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.imagePreviewDiv
      }, /*#__PURE__*/_react["default"].createElement(_Image["default"], {
        imagePrefix: this.imagePrefix,
        showError: true,
        color: this.state.color,
        className: this.props.classes.imagePreview,
        src: this.state.value,
        alt: "preview"
      })), /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
        disabled: !!this.props.disabled,
        margin: "dense",
        label: this.props.label || _i18n["default"].t('Icon'),
        value: this.state.value,
        onChange: function onChange(e) {
          var value = e.target.value;

          _this7.setState({
            value: value,
            imgError: false
          }, function () {
            return _this7.props.onChange(value);
          });
        },
        type: "text",
        InputProps: {
          endAdornment: this.state.value ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
            onClick: function onClick() {
              _this7.setState({
                value: '',
                imgError: false
              }, function () {
                return _this7.props.onChange('');
              });
            }
          }, /*#__PURE__*/_react["default"].createElement(_Close["default"], null)) : undefined
        },
        className: this.props.classes.textFieldWithButton
      }), /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        disabled: !!this.props.disabled,
        className: this.props.classes.selectButton,
        onClick: function onClick() {
          var id = _this7.getIdFromSrc(_this7.state.value);

          if (id) {
            id = PRESET_PREFIX + id;
          } else {
            id = _this7.state.value;
          }

          _this7.setState({
            showDialog: true,
            dialogValue: id,
            dialogInitialValue: id
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_ViewModule["default"], null)), this.renderDialog());
    }
  }]);

  return IconPicker;
}(_react["default"].Component);

IconPicker.propTypes = {
  key: _propTypes["default"].string,
  color: _propTypes["default"].string,
  value: _propTypes["default"].string,
  label: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  onChange: _propTypes["default"].func.isRequired,
  socket: _propTypes["default"].object.isRequired,
  imagePrefix: _propTypes["default"].string
};
/** @type {typeof IconPicker} */

var _export = (0, _styles.withStyles)(styles)(IconPicker);

var _default = _export;
exports["default"] = _default;
//# sourceMappingURL=IconPicker.js.map
