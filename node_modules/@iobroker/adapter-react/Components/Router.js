"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * @template P Type of the properties object.
 * @template S Type of the internal state object.
 * @extends {React.Component<P, S>}
 */
var Router = /*#__PURE__*/function (_React$Component) {
  _inherits(Router, _React$Component);

  var _super = _createSuper(Router);

  /**
   * @param {P} props The React properties of this component.
   */
  function Router(props) {
    var _this;

    _classCallCheck(this, Router);

    _this = _super.call(this, props);
    _this.onHashChangedBound = _this.onHashChanged.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Router, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('hashchange', this.onHashChangedBound);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('hashchange', this.onHashChangedBound);
    }
  }, {
    key: "onHashChanged",
    value: function onHashChanged() {// override this function
    }
    /**
     * Gets the location object.
     * @returns {{ tab: string; dialog: string; id: string; arg: string; }}
     */

  }], [{
    key: "getLocation",
    value: function getLocation() {
      var hash = window.location.hash;
      hash = hash.replace(/^#/, '');
      var parts = hash.split('/').map(function (item) {
        try {
          return item ? decodeURIComponent(item) : '';
        } catch (e) {
          console.error('Router: Cannot decode ' + item);
          return item || '';
        }
      }); // #tabName/dialogName/deviceId

      return {
        tab: parts[0] || '',
        dialog: parts[1] || '',
        id: parts[2] || '',
        arg: parts[3] || ''
      };
    }
    /**
     * Navigate to a new location. Any parameters that are not set will be taken from the current location.
     * @param {string | undefined} [tab]
     * @param {string | undefined} [dialog]
     * @param {string | undefined} [id]
     * @param {string | undefined} [arg]
     */

  }, {
    key: "doNavigate",
    value: function doNavigate(tab, dialog, id, arg) {
      var hash = '';
      var location = Router.getLocation();

      if (arg !== undefined && !id) {
        id = location.id;
      }

      if (id && !dialog) {
        dialog = location.dialog;
      }

      if (dialog && !tab) {
        tab = location.tab;
      } else if (tab === null) {
        tab = location.tab;
      }

      if (tab) {
        hash = '#' + tab;

        if (dialog) {
          hash += '/' + dialog;

          if (id) {
            hash += '/' + id;

            if (arg !== undefined) {
              hash += '/' + arg;
            }
          }
        }
      }

      if (window.location.hash !== hash) {
        window.location.hash = hash;
      }
    }
  }]);

  return Router;
}(_react["default"].Component);

var _default = Router;
exports["default"] = _default;
//# sourceMappingURL=Router.js.map
