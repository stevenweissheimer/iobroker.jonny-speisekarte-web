"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.EXTENSIONS = void 0;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _withWidth = _interopRequireDefault(require("@material-ui/core/withWidth"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _DialogTitle = _interopRequireDefault(require("@material-ui/core/DialogTitle"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _no_icon = _interopRequireDefault(require("../assets/no_icon.svg"));

var _Utils = _interopRequireDefault(require("./Utils"));

var _fa = require("react-icons/fa");

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var styles = function styles(theme) {
  return {
    dialog: {
      height: '100%',
      maxHeight: '100%',
      maxWidth: '100%'
    },
    content: {
      textAlign: 'center'
    },
    textarea: {
      width: '100%',
      height: '100%'
    },
    img: {
      width: 'auto',
      height: 'calc(100% - 5px)',
      objectFit: 'contain'
    }
  };
};

var EXTENSIONS = {
  images: ['png', 'jpg', 'svg', 'jpeg', 'jpg'],
  code: ['js', 'json'],
  txt: ['log', 'txt', 'html', 'css', 'xml']
};
exports.EXTENSIONS = EXTENSIONS;

function getFileExtension(fileName) {
  var pos = fileName.lastIndexOf('.');

  if (pos !== -1) {
    return fileName.substring(pos + 1).toLowerCase();
  } else {
    return null;
  }
}
/**
 * @typedef {object} FileViewerProps
 * @property {string} [key] The key to identify this component.
 * @property {import('../types').Translator} t Translation function
 * @property {ioBroker.Languages} [lang] The selected language.
 * @property {boolean} [expertMode] Is expert mode enabled? (default: false)
 * @property {() => void} onClose Callback when the viewer is closed.
 * @property {string} href The URL to the file to be displayed.
 * 
 * @extends {React.Component<FileViewerProps>}
 */


var FileViewer = /*#__PURE__*/function (_React$Component) {
  _inherits(FileViewer, _React$Component);

  var _super = _createSuper(FileViewer);

  /**
   * @param {Readonly<FileViewerProps>} props
   */
  function FileViewer(props) {
    var _this;

    _classCallCheck(this, FileViewer);

    _this = _super.call(this, props);
    _this.ext = getFileExtension(_this.props.href); // todo: replace later with Utils.getFileExtension

    _this.state = {
      text: null,
      code: null,
      copyPossible: EXTENSIONS.code.includes(_this.ext) || EXTENSIONS.txt.includes(_this.ext)
    };

    if (_this.state.copyPossible) {
      fetch(_this.props.href).then(function (response) {
        return response.text();
      }).then(function (data) {
        if (EXTENSIONS.txt.includes(_this.ext)) {
          _this.setState({
            text: data
          });
        } else if (EXTENSIONS.code.includes(_this.ext)) {
          _this.setState({
            code: data
          });
        }
      });
    }

    return _this;
  }

  _createClass(FileViewer, [{
    key: "getContent",
    value: function getContent() {
      if (EXTENSIONS.images.includes(this.ext)) {
        return /*#__PURE__*/_react["default"].createElement("img", {
          onError: function onError(e) {
            e.target.onerror = null;
            e.target.src = _no_icon["default"];
          },
          className: this.props.classes.img,
          src: this.props.href,
          alt: this.props.href
        });
      } else if (this.state.code !== null) {
        return /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
          className: this.props.classes.textarea,
          multiline: true,
          value: this.state.code,
          readOnly: true
        });
      } else if (this.state.text !== null) {
        return /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
          className: this.props.classes.textarea,
          value: this.state.code,
          multiline: true,
          readOnly: true
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
        key: this.props.key,
        className: this.props.classes.dialog,
        open: this.props.href,
        onClose: function onClose() {
          return _this2.props.onClose();
        },
        fullWidth: true,
        fullScreen: true,
        "aria-labelledby": "form-dialog-title"
      }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], {
        id: "form-dialog-title"
      }, this.props.t('View: %s', this.props.href)), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], {
        className: this.props.classes.content
      }, this.getContent()), /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, this.state.copyPossible ? /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        onClick: function onClick(e) {
          return _Utils["default"].copyToClipboard(_this2.state.text || _this2.state.code, e);
        }
      }, /*#__PURE__*/_react["default"].createElement(_fa.FaCopy, null), this.props.t('Copy content')) : null, /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        onClick: function onClick() {
          return _this2.props.onClose();
        },
        color: "primary"
      }, /*#__PURE__*/_react["default"].createElement(_Close["default"], null), this.props.t('Close'))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps() {}
  }]);

  return FileViewer;
}(_react["default"].Component);

FileViewer.propTypes = {
  key: _propTypes["default"].string,
  t: _propTypes["default"].func,
  lang: _propTypes["default"].string,
  expertMode: _propTypes["default"].bool,
  onClose: _propTypes["default"].func,
  href: _propTypes["default"].string.isRequired
};
/** @type {typeof FileViewer} */

var _export = (0, _withWidth["default"])()((0, _styles.withStyles)(styles)(FileViewer));

var _default = _export;
exports["default"] = _default;
//# sourceMappingURL=FileViewer.js.map
