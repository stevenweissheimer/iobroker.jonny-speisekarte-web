"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactColor = require("react-color");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var styles = function styles(theme) {
  return {
    color: {
      width: 36,
      height: 14,
      borderRadius: 2
    },
    delButton: {
      //width: 32,
      //height: 32,
      marginTop: 16
    },
    swatch: {
      marginTop: 16,
      padding: 5,
      background: '#fff',
      borderRadius: 1,
      boxShadow: '0 0 0 1px rgba(0,0,0,.1)',
      display: 'inline-block',
      cursor: 'pointer',
      verticalAlign: 'middle'
    },
    popover: {
      position: 'absolute',
      zIndex: 2
    },
    cover: {
      position: 'fixed',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    textDense: {
      marginTop: 0,
      marginBottom: 0
    }
  };
};
/**
 * @typedef {object} Rgb
 * @property {number} r The red component of the color (0-255).
 * @property {number} g The green component of the color (0-255).
 * @property {number} b The blue component of the color (0-255).
 * @property {number} a The alpha component of the color (0-255).
 * 
 * @typedef {string | Rgb | { rgb: Rgb }} Color Definition of a color.
 * 
 * @typedef {object} ColorPickerProps
 * @property {string} [key] The key to identify this component.
 * @property {boolean} [disabled] Set to true to disable the color picker.
 * @property {Color} [color] The selected color.
 * @property {(rgba: string) => void} [onChange] The color change callback.
 * @property {string} [name] The name.
 * @property {React.CSSProperties} [style] Additional styling for this component.
 * @property {string} [className] The CSS class name.
 * @property {boolean} [openAbove] Open the color picker above the field?
 * 
 * @extends {React.Component<ColorPickerProps>}
 */


var ColorPicker = /*#__PURE__*/function (_React$Component) {
  _inherits(ColorPicker, _React$Component);

  var _super = _createSuper(ColorPicker);

  /**
   * @param {Readonly<ColorPickerProps>} props
   */
  function ColorPicker(props) {
    var _this;

    _classCallCheck(this, ColorPicker);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      _this.setState({
        displayColorPicker: !_this.state.displayColorPicker
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClose", function () {
      _this.setState({
        displayColorPicker: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (color) {
      _this.setState({
        color: color
      });

      _this.props.onChange && _this.props.onChange(ColorPicker.getColor(color));
    });

    _this.state = {
      displayColorPicker: false,
      color: _this.props.color
    };
    return _this;
  }
  /**
   * Get the state derived from the given properties and state.
   * @param {{ color: Color; }} props
   * @param {{ color: Color; }} state
   */


  _createClass(ColorPicker, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var color = ColorPicker.getColor(this.state.color);
      var style = {};

      if (this.state.displayColorPicker && this.props.openAbove) {
        style = {
          top: -241
        };
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        key: this.props.key,
        style: Object.assign({}, this.props.style || {}, {
          position: 'relative'
        }),
        className: this.props.className || ''
      }, /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
        disabled: this.props.disabled,
        id: "name",
        style: {
          width: 'calc(100% - 80px)'
        },
        label: this.props.name || 'color',
        value: color,
        margin: "dense",
        classes: {
          root: this.props.classes.textDense
        },
        onChange: function onChange(e) {
          return _this2.handleChange(e.target.value);
        }
      }), /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        disabled: this.props.disabled,
        onClick: function onClick() {
          return _this2.handleChange('');
        },
        size: "small",
        className: this.props.classes.delButton,
        style: color ? {} : {
          opacity: 0,
          cursor: 'default'
        }
      }, /*#__PURE__*/_react["default"].createElement(_Delete["default"], null)), /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.swatch,
        onClick: function onClick() {
          return _this2.handleClick();
        }
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.color,
        style: {
          background: color
        }
      })), this.state.displayColorPicker && !this.props.disabled ? /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.popover,
        style: style
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.cover,
        onClick: function onClick() {
          return _this2.handleClose();
        }
      }), /*#__PURE__*/_react["default"].createElement(_reactColor.ChromePicker, {
        color: this.state.color,
        onChangeComplete: function onChangeComplete(color) {
          return _this2.handleChange(color);
        }
      })) : null);
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var pColor = ColorPicker.getColor(props.color);
      var sColor = ColorPicker.getColor(state.color);

      if (pColor !== sColor) {
        return {
          color: props.color
        };
      } else {
        return null;
      }
    }
    /**
     * @private
     */

  }, {
    key: "getColor",
    value:
    /**
     * Convert the given color to hex ('#rrggbb') or rgba ('rgba(r,g,b,a)') format.
     * @param {Color} [color]
     * @param {boolean} [isHex] The returning string should be in hex format
     * @returns {string} the hex or rgba representation of the given color.
     */
    function getColor(color, isHex) {
      if (color && _typeof(color) === 'object') {
        if (color.rgb) {
          if (isHex) {
            return '#' + color.rgb.r.toString(16).padStart(2, '0') + color.rgb.g.toString(16).padStart(2, '0') + color.rgb.b.toString(16).padStart(2, '0');
          } else {
            return 'rgba(' + color.rgb.r + ',' + color.rgb.g + ',' + color.rgb.b + ',' + color.rgb.a + ')';
          }
        } else {
          if (isHex) {
            return '#' + color.r.toString(16).padStart(2, '0') + color.g.toString(16).padStart(2, '0') + color.b.toString(16).padStart(2, '0');
          } else {
            return 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
          }
        }
      } else {
        return isHex ? ColorPicker.rgb2hex(color || '') : color || '';
      }
    }
    /**
     * Convert rgb() or rgba() format to hex format #rrggbb.
     * @param {string} rgb 
     * @returns {string}
     */

  }, {
    key: "rgb2hex",
    value: function rgb2hex(rgb) {
      var m = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
      return m && m.length === 4 ? '#' + parseInt(m[1], 10).toString(16).padStart(2, '0') + parseInt(m[2], 10).toString(16).padStart(2, '0') + parseInt(m[3], 10).toString(16).padStart(2, '0') : rgb;
    }
    /**
     * @private
     */

  }]);

  return ColorPicker;
}(_react["default"].Component);

ColorPicker.propTypes = {
  key: _propTypes["default"].string,
  disabled: _propTypes["default"].bool,
  color: _propTypes["default"].string,
  onChange: _propTypes["default"].func.isRequired,
  name: _propTypes["default"].string,
  style: _propTypes["default"].object,
  className: _propTypes["default"].string,
  openAbove: _propTypes["default"].bool
};
/** @type {typeof ColorPicker} */

var _export = (0, _styles.withStyles)(styles)(ColorPicker);

var _default = _export;
exports["default"] = _default;
//# sourceMappingURL=ColorPicker.js.map
