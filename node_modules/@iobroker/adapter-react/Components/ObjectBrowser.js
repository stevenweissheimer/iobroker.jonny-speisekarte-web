"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _copyToClipboard = _interopRequireDefault(require("./copy-to-clipboard"));

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _reactInlinesvg = _interopRequireDefault(require("react-inlinesvg"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _withWidth = _interopRequireDefault(require("@material-ui/core/withWidth"));

var _CircularProgress = _interopRequireDefault(require("@material-ui/core/CircularProgress"));

var _MenuItem = _interopRequireDefault(require("@material-ui/core/MenuItem"));

var _Select = _interopRequireDefault(require("@material-ui/core/Select"));

var _FormControl = _interopRequireDefault(require("@material-ui/core/FormControl"));

var _Input = _interopRequireDefault(require("@material-ui/core/Input"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _Badge = _interopRequireDefault(require("@material-ui/core/Badge"));

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var _Snackbar = _interopRequireDefault(require("@material-ui/core/Snackbar"));

var _Checkbox = _interopRequireDefault(require("@material-ui/core/Checkbox"));

var _List = _interopRequireDefault(require("@material-ui/core/List"));

var _ListItem = _interopRequireDefault(require("@material-ui/core/ListItem"));

var _ListItemIcon = _interopRequireDefault(require("@material-ui/core/ListItemIcon"));

var _ListItemSecondaryAction = _interopRequireDefault(require("@material-ui/core/ListItemSecondaryAction"));

var _ListItemText = _interopRequireDefault(require("@material-ui/core/ListItemText"));

var _DialogTitle = _interopRequireDefault(require("@material-ui/core/DialogTitle"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _DialogContentText = _interopRequireDefault(require("@material-ui/core/DialogContentText"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Fab = _interopRequireDefault(require("@material-ui/core/Fab"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _FormControlLabel = _interopRequireDefault(require("@material-ui/core/FormControlLabel"));

var _Switch = _interopRequireDefault(require("@material-ui/core/Switch"));

var _Slider = _interopRequireDefault(require("@material-ui/core/Slider"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _Utils = _interopRequireDefault(require("./Utils"));

var _TabContainer = _interopRequireDefault(require("./TabContainer"));

var _TabContent = _interopRequireDefault(require("./TabContent"));

var _TabHeader = _interopRequireDefault(require("./TabHeader"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _Delete = _interopRequireDefault(require("@material-ui/icons/Delete"));

var _Settings = _interopRequireDefault(require("@material-ui/icons/Settings"));

var _SettingsApplications = _interopRequireDefault(require("@material-ui/icons/SettingsApplications"));

var _Photo = _interopRequireDefault(require("@material-ui/icons/Photo"));

var _SupervisedUserCircle = _interopRequireDefault(require("@material-ui/icons/SupervisedUserCircle"));

var _CalendarToday = _interopRequireDefault(require("@material-ui/icons/CalendarToday"));

var _PersonOutlined = _interopRequireDefault(require("@material-ui/icons/PersonOutlined"));

var _Router = _interopRequireDefault(require("@material-ui/icons/Router"));

var _Wifi = _interopRequireDefault(require("@material-ui/icons/Wifi"));

var _Info = _interopRequireDefault(require("@material-ui/icons/Info"));

var _Description = _interopRequireDefault(require("@material-ui/icons/Description"));

var _Code = _interopRequireDefault(require("@material-ui/icons/Code"));

var _ShowChart = _interopRequireDefault(require("@material-ui/icons/ShowChart"));

var _ListAlt = _interopRequireDefault(require("@material-ui/icons/ListAlt"));

var _ViewColumn = _interopRequireDefault(require("@material-ui/icons/ViewColumn"));

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _Build = _interopRequireDefault(require("@material-ui/icons/Build"));

var _Publish = _interopRequireDefault(require("@material-ui/icons/Publish"));

var _Add = _interopRequireDefault(require("@material-ui/icons/Add"));

var _Refresh = _interopRequireDefault(require("@material-ui/icons/Refresh"));

var _LooksOne = _interopRequireDefault(require("@material-ui/icons/LooksOne"));

var _RoomService = _interopRequireDefault(require("@material-ui/icons/RoomService"));

var _IconExpert = _interopRequireDefault(require("../icons/IconExpert"));

var _IconAdapter = _interopRequireDefault(require("../icons/IconAdapter"));

var _IconAlias = _interopRequireDefault(require("../icons/IconAlias"));

var _IconChannel = _interopRequireDefault(require("../icons/IconChannel"));

var _IconCopy = _interopRequireDefault(require("../icons/IconCopy"));

var _IconDevice = _interopRequireDefault(require("../icons/IconDevice"));

var _IconDocument = _interopRequireDefault(require("../icons/IconDocument"));

var _IconInstance = _interopRequireDefault(require("../icons/IconInstance"));

var _IconState = _interopRequireDefault(require("../icons/IconState"));

var _IconClosed = _interopRequireDefault(require("../icons/IconClosed"));

var _IconOpen = _interopRequireDefault(require("../icons/IconOpen"));

var _IconClearFilter = _interopRequireDefault(require("../icons/IconClearFilter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var ICON_SIZE = 24;
var ROW_HEIGHT = 32;
var ITEM_LEVEL = 16;
var SMALL_BUTTON_SIZE = 20;
var COLOR_NAME_SYSTEM = '#ff6d69';
var COLOR_NAME_SYSTEM_ADAPTER = '#5773ff';

var styles = function styles(theme) {
  return {
    toolbar: {
      minHeight: 38 //Theme.toolbar.height,
      //        boxShadow: '0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12)'

    },
    toolbarButtons: {
      padding: 4,
      marginLeft: 4
    },
    switchColumnAuto: {
      marginLeft: theme.spacing(2)
    },
    dialogColumns: {
      transition: 'opacity 1s'
    },
    dialogColumnsLabel: {
      fontSize: 12,
      paddingTop: theme.spacing(1)
    },
    columnCustom: {
      width: '100%',
      display: 'inline-block'
    },
    columnCustomEditable: {
      cursor: 'text'
    },
    columnCustomCenter: {
      textAlign: 'center'
    },
    columnCustomLeft: {
      textAlign: 'left'
    },
    columnCustomRight: {
      textAlign: 'right'
    },
    width100: {
      width: '100%'
    },
    transparent_10: {
      opacity: 0.1
    },
    transparent_20: {
      opacity: 0.2
    },
    transparent_30: {
      opacity: 0.3
    },
    transparent_40: {
      opacity: 0.4
    },
    transparent_50: {
      opacity: 0.5
    },
    transparent_60: {
      opacity: 0.6
    },
    transparent_70: {
      opacity: 0.7
    },
    transparent_80: {
      opacity: 0.8
    },
    transparent_90: {
      opacity: 0.9
    },
    transparent_100: {
      opacity: 1
    },
    columnsDialogInputWidth: {
      width: 80
    },
    headerRow: {
      paddingLeft: theme.spacing(1),
      height: 38,
      whiteSpace: 'nowrap'
    },
    buttonClearFilter: {
      position: 'relative',
      "float": 'right',
      padding: 0
    },
    buttonClearFilterIcon: {
      zIndex: 2,
      position: 'absolute',
      top: 0,
      left: 0,
      color: '#FF0000',
      opacity: 0.7
    },
    tableDiv: {
      paddingTop: 0,
      //theme.spacing(1),
      paddingLeft: 0,
      width: 'calc(100% - ' + theme.spacing(1) + 'px)',
      height: 'calc(100% - ' + 38 + 'px)',
      overflow: 'auto'
    },
    tableRow: {
      paddingLeft: theme.spacing(1),
      height: ROW_HEIGHT,
      lineHeight: ROW_HEIGHT + 'px',
      verticalAlign: 'top',
      userSelect: 'none',
      cursor: 'pointer',
      width: '100%',
      '&:hover': {
        background: "".concat(theme.palette.primary.main, " !important"),
        color: _Utils["default"].invertColor(theme.palette.primary.main, true)
      },
      whiteSpace: 'nowrap',
      flexWrap: 'nowrap'
    },
    tableRowAlias: {
      height: ROW_HEIGHT + 10
    },
    tableRowAliasReadWrite: {
      height: ROW_HEIGHT + 22
    },
    checkBox: {
      padding: 0
    },
    cellId: {
      position: 'relative',
      fontSize: '1rem',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      //verticalAlign: 'top',
      //position: 'relative',
      '& .copyButton': {
        display: 'none'
      },
      '&:hover .copyButton': {
        display: 'block'
      },
      '& .iconOwn': {
        display: 'block',
        width: ROW_HEIGHT - 4,
        height: ROW_HEIGHT - 4,
        marginTop: 2,
        "float": 'right'
      },
      '&:hover .iconOwn': {
        display: 'none'
      },
      '& *': {
        width: 'initial'
      }
    },
    cellIdSpan: {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap' //display: 'inline-block',
      //verticalAlign: 'top',

    },
    cellIdIconFolder: {
      marginRight: theme.spacing(1),
      width: ROW_HEIGHT - 4,
      height: ROW_HEIGHT - 4,
      cursor: 'pointer',
      color: theme.palette.secondary.main || '#fbff7d',
      verticalAlign: 'top'
    },
    cellIdIconDocument: {
      verticalAlign: 'middle',
      marginLeft: (ROW_HEIGHT - SMALL_BUTTON_SIZE) / 2,
      marginRight: theme.spacing(1),
      width: SMALL_BUTTON_SIZE,
      height: SMALL_BUTTON_SIZE
    },
    cellIdIconOwn: {},
    cellCopyButton: {
      // color: 'white',
      width: SMALL_BUTTON_SIZE,
      height: SMALL_BUTTON_SIZE,
      top: (ROW_HEIGHT - SMALL_BUTTON_SIZE) / 2,
      opacity: 0.8,
      '&:hover': {
        opacity: 1
      },
      position: 'absolute',
      right: 3
    },
    cellEditButton: {
      width: SMALL_BUTTON_SIZE,
      height: SMALL_BUTTON_SIZE,
      color: 'white',
      position: 'absolute',
      top: (ROW_HEIGHT - SMALL_BUTTON_SIZE) / 2,
      right: SMALL_BUTTON_SIZE + 3,
      opacity: 0.7,
      '&:hover': {
        opacity: 1
      }
    },
    cellName: {
      display: 'inline-block',
      verticalAlign: 'top',
      fontSize: 14,
      marginLeft: 5,
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    },
    cellIdAlias: {
      fontStyle: 'italic',
      fontSize: 12,
      opacity: 0.7,
      '&:hover': {
        color: theme.palette.type === 'dark' ? '#009900' : '#007700'
      }
    },
    cellIdAliasReadWriteDiv: {
      height: 24,
      marginTop: -5
    },
    cellIdAliasAlone: {
      lineHeight: 0
    },
    cellIdAliasReadWrite: {
      lineHeight: '12px'
    },
    cellType: {
      display: 'inline-block',
      verticalAlign: 'top',
      '& .itemIcon': {
        verticalAlign: 'middle',
        width: ICON_SIZE,
        height: ICON_SIZE,
        display: 'inline-block'
      }
    },
    cellRole: {
      display: 'inline-block',
      verticalAlign: 'top',
      textOverflow: 'ellipsis',
      overflow: 'hidden'
    },
    cellRoom: {
      display: 'inline-block',
      verticalAlign: 'top',
      textOverflow: 'ellipsis',
      overflow: 'hidden'
    },
    cellEnumParent: {
      opacity: 0.4
    },
    cellFunc: {
      display: 'inline-block',
      verticalAlign: 'top',
      textOverflow: 'ellipsis',
      overflow: 'hidden'
    },
    cellValue: {
      display: 'inline-block',
      verticalAlign: 'top',
      textOverflow: 'ellipsis',
      overflow: 'hidden'
    },
    cellValueButton: {
      marginTop: 5,
      '&:active': {
        transform: 'scale(0.8)'
      }
    },
    cellValueButtonFalse: {
      opacity: 0.3
    },
    cellAdapter: {
      display: 'inline-block',
      verticalAlign: 'top'
    },
    cellValueTooltip: {
      fontSize: 12
    },
    cellValueText: {
      width: '100%',
      height: ROW_HEIGHT,
      fontSize: 16,
      display: 'inline-block',
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      position: 'relative',
      verticalAlign: 'top',
      '& .copyButton': {
        display: 'none'
      },
      '&:hover .copyButton': {
        display: 'block'
      }
    },
    cellValueTooltipTitle: {
      fontStyle: 'italic',
      width: 100,
      display: 'inline-block'
    },
    cellValueTooltipValue: {
      width: 120,
      display: 'inline-block',
      //overflow: 'hidden',
      whiteSpace: 'nowrap',
      textOverflow: 'ellipsis'
    },
    cellValueTooltipBoth: {
      width: 220,
      display: 'inline-block',
      whiteSpace: 'nowrap'
    },
    cellValueTooltipBox: {
      width: 250,
      overflow: 'hidden'
    },
    cellValueTextUnit: {
      marginLeft: theme.spacing(0.5),
      opacity: 0.8
    },
    newValue: {
      animation: '$newValueAnimation 2s ease-in-out'
    },
    '@keyframes newValueAnimation': {
      '0%': {
        color: '#00f900'
      },
      '80%': {
        color: '#008000'
      },
      '100%': {
        color: theme.palette.type === 'dark' ? '#fff' : '#000'
      }
    },
    cellValueTextState: {
      opacity: 0.7
    },
    cellValueTooltipCopy: {
      position: 'absolute',
      bottom: 3,
      right: 3
    },
    cellValueTooltipEdit: {
      position: 'absolute',
      bottom: 3,
      right: 15
    },
    cellButtons: {
      display: 'inline-block',
      verticalAlign: 'top'
    },
    cellButtonsButton: {
      display: 'inline-block',
      opacity: 0.7,
      width: SMALL_BUTTON_SIZE + 4,
      height: SMALL_BUTTON_SIZE + 4,
      '&:hover': {
        opacity: 1
      },
      paddingTop: 0,
      marginTop: -2
    },
    cellButtonsEmptyButton: {
      fontSize: 12
    },
    cellButtonMinWidth: {
      minWidth: 47
    },
    cellButtonsButtonAlone: {
      marginLeft: SMALL_BUTTON_SIZE + 4,
      paddingTop: 0,
      marginTop: -2
    },
    cellButtonsButtonWithCustoms: {
      color: theme.palette.secondary.main
    },
    cellButtonsValueButton: {
      position: 'absolute',
      display: 'inline-block',
      top: SMALL_BUTTON_SIZE / 2 - 2,
      opacity: 0.7,
      width: SMALL_BUTTON_SIZE - 2,
      height: SMALL_BUTTON_SIZE - 2,
      color: theme.palette.action.active,
      '&:hover': {
        opacity: 1
      }
    },
    cellButtonsValueButtonCopy: {
      right: theme.spacing(1),
      cursor: 'pointer'
    },
    cellButtonsValueButtonEdit: {
      right: SMALL_BUTTON_SIZE / 2 + theme.spacing(2)
    },
    filteredOut: {
      opacity: 0.3
    },
    filterInput: {
      marginTop: 0,
      marginBottom: 0
    },
    selectIcon: {
      width: 16,
      height: 16,
      paddingRight: 5
    },
    selectNone: {
      opacity: 0.5
    },
    itemSelected: {
      background: "".concat(theme.palette.type === 'dark' ? theme.palette.primary.light : theme.palette.primary.dark, " !important"),
      color: "".concat(_Utils["default"].invertColor(theme.palette.primary.main, true), " !important")
    },
    header: {
      width: '100%'
    },
    headerCell: {
      display: 'inline-block',
      verticalAlign: 'top'
    },
    headerCellValue: {
      paddingTop: 4,
      // paddingLeft: 5,
      fontSize: 16
    },
    headerCellInput: {
      width: 'calc(100% - 5px)',
      height: ROW_HEIGHT,
      paddingTop: 3,
      '& .itemIcon': {
        verticalAlign: 'middle',
        width: ICON_SIZE,
        height: ICON_SIZE,
        display: 'inline-block'
      }
    },
    headerCellSelectItem: {
      '& .itemIcon': {
        width: ICON_SIZE,
        height: ICON_SIZE,
        marginRight: 5,
        display: 'inline-block'
      }
    },
    visibleButtons: {
      color: '#2196f3',
      opacity: 0.7
    },
    grow: {
      flexGrow: 1
    },
    enumIconDiv: {
      marginRight: theme.spacing(1),
      width: 32,
      height: 32,
      borderRadius: 8,
      background: '#FFFFFF'
    },
    enumIcon: {
      marginTop: 4,
      marginLeft: 4,
      width: 24,
      height: 24
    },
    enumDialog: {
      overflow: 'hidden'
    },
    enumList: {
      minWidth: 250,
      height: 'calc(100% - 50px)',
      overflow: 'auto'
    },
    enumButton: {
      "float": 'right'
    },
    enumCheckbox: {
      minWidth: 0
    },
    buttonIcon: {
      marginRight: theme.spacing(1)
    },
    backgroundDef: {
      backgroundColor: theme.palette.background["default"]
    },
    buttonDiv: {
      display: 'flex',
      height: '100%',
      alignItems: 'center'
    },
    aclText: {
      fontSize: 13
    },
    rightsObject: {
      color: '#55ff55',
      paddingLeft: 3
    },
    rightsState: {
      color: '#86b6ff',
      paddingLeft: 3
    },
    textCenter: {
      padding: 12,
      textAlign: 'center'
    },
    tooltipAccessControl: {
      display: 'flex',
      flexDirection: 'column'
    },
    '@media screen and (max-width: 465px)': {
      columnsDialogInputWidth: {
        width: 50
      },
      fontSizeTitle: {
        '& *': {
          fontSize: 12
        }
      }
    },
    '@media screen and (max-width: 700px)': {},
    '@media screen and (max-width: 430px)': {}
  };
};

function generateFile(filename, obj) {
  var el = document.createElement('a');
  el.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(obj, null, 2)));
  el.setAttribute('download', filename);
  el.style.display = 'none';
  document.body.appendChild(el);
  el.click();
  document.body.removeChild(el);
} // d=data, t=target, s=start, e=end, m=middle


function binarySearch(list, find, _start, _end) {
  _start = _start || 0;

  if (_end === undefined) {
    _end = list.length - 1;

    if (!_end) {
      return list[0] === find;
    }
  }

  var middle = Math.floor((_start + _end) / 2);

  if (find === list[middle]) {
    return list[middle];
  }

  if (_end - 1 === _start) {
    return list[_start] === find || list[_end] === find;
  }

  if (find > list[middle]) {
    return binarySearch(list, find, middle, _end);
  }

  if (find < list[middle]) {
    return binarySearch(list, find, _start, middle);
  }
}

function applyFilter(item, filters, lang, objects, context, counter, customFilter) {
  var filteredOut = false;

  if (!context) {
    context = {};

    if (filters.id) {
      context.id = filters.id.toLowerCase();
    }

    if (filters.name) {
      context.name = filters.name.toLowerCase();
    }

    if (filters.type) {
      context.type = filters.type.toLowerCase();
    }

    if (filters.custom) {
      context.custom = filters.custom.toLowerCase();
    }

    if (filters.role) {
      context.role = filters.role.toLowerCase();
    }

    if (filters.room) {
      context.room = objects[filters.room] && objects[filters.room].common && objects[filters.room].common.members || [];
    }

    if (filters.func) {
      context.func = objects[filters.func] && objects[filters.func].common && objects[filters.func].common.members || [];
    }
  }

  var data = item.data;

  if (data && data.id) {
    var common = data.obj && data.obj.common;

    if (customFilter) {
      if (customFilter.type && customFilter.type !== data.obj.type) {
        filteredOut = true;
      } else if (customFilter.common && customFilter.common.custom) {
        if (!common || !common.custom || customFilter.common.custom !== true && !common.custom[customFilter.common.custom]) {
          filteredOut = true;
        }
      }
    }

    if (!filteredOut && !filters.expertMode) {
      filteredOut = data.id === 'system' || data.id === 'enum' || // (data.obj && data.obj.type === 'meta') ||
      data.id.startsWith('system.') || data.id.startsWith('enum.') || data.id.startsWith('_design/') || common && common.expert;
    }

    if (!filteredOut && context.id) {
      if (data.fID === undefined) {
        data.fID = data.id.toLowerCase();
      }

      filteredOut = data.fID.indexOf(context.id) === -1;
    }

    if (!filteredOut && context.name) {
      if (common) {
        if (data.fName === undefined) {
          data.fName = common && getName(common.name, lang) || '';
          data.fName = data.fName.toLowerCase();
        }

        filteredOut = !data.fName.includes(context.name);
      } else {
        filteredOut = true;
      }
    }

    if (!filteredOut && filters.role && common) {
      if (common) {
        filteredOut = !(common.role && common.role.startsWith(context.role));
      } else {
        filteredOut = true;
      }
    }

    if (!filteredOut && context.room) {
      filteredOut = !context.room.find(function (id) {
        return id === data.id || data.id.startsWith(id + '.');
      });
    }

    if (!filteredOut && context.func) {
      filteredOut = !context.func.find(function (id) {
        return id === data.id || data.id.startsWith(id + '.');
      });
    }

    if (!filteredOut && context.type) {
      filteredOut = !(data.obj && data.obj.type && data.obj.type === context.type);
    }

    if (!filteredOut && context.custom) {
      if (common) {
        filteredOut = !common.custom || !common.custom[context.custom];
      } else {
        filteredOut = true;
      }
    }
  }

  data.visible = !filteredOut;
  data.hasVisibleChildren = false;

  if (item.children) {
    item.children.forEach(function (_item) {
      var visible = applyFilter(_item, filters, lang, objects, context, counter, customFilter);

      if (visible) {
        data.hasVisibleChildren = true;
      }
    });
  }

  var visible = data.visible || data.hasVisibleChildren;

  if (counter && visible) {
    counter.count++;
  }

  return visible;
}

function getVisibleItems(item, type, objects, _result) {
  _result = _result || [];
  var data = item.data;

  if (data.visible || data.hasVisibleChildren) {
    var _item$children;

    data.id && objects[data.id] && (!type || objects[data.id].type === type) && _result.push(data.id);
    (_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.forEach(function (_item) {
      return getVisibleItems(_item, type, objects, _result);
    });
  }

  return _result;
}

function getSystemIcon(objects, id, k, imagePrefix) {
  var icon; // system or design have special icons

  if (id.startsWith('_design/') || id === 'system') {
    icon = /*#__PURE__*/_react["default"].createElement(_SettingsApplications["default"], {
      className: "iconOwn"
    });
  } else if (id === '0_userdata' || id === '0_userdata.0') {
    icon = /*#__PURE__*/_react["default"].createElement(_Photo["default"], {
      className: "iconOwn"
    });
  } else if (id === 'alias' || id === 'alias.0') {
    icon = /*#__PURE__*/_react["default"].createElement(_IconAlias["default"], {
      className: "iconOwn"
    });
  } else if (id === 'system.adapter') {
    icon = /*#__PURE__*/_react["default"].createElement(_SettingsApplications["default"], {
      className: "iconOwn"
    });
  } else if (id === 'system.group') {
    icon = /*#__PURE__*/_react["default"].createElement(_SupervisedUserCircle["default"], {
      className: "iconOwn"
    });
  } else if (id === 'system.user') {
    icon = /*#__PURE__*/_react["default"].createElement(_PersonOutlined["default"], {
      className: "iconOwn"
    });
  } else if (id === 'system.host') {
    icon = /*#__PURE__*/_react["default"].createElement(_Router["default"], {
      className: "iconOwn"
    });
  } else if (id.endsWith('.connection') || id.endsWith('.connected')) {
    icon = /*#__PURE__*/_react["default"].createElement(_Wifi["default"], {
      className: "iconOwn"
    });
  } else if (id.endsWith('.info')) {
    icon = /*#__PURE__*/_react["default"].createElement(_Info["default"], {
      className: "iconOwn"
    });
  } else if (objects[id] && objects[id].type === 'meta') {
    icon = /*#__PURE__*/_react["default"].createElement(_Description["default"], {
      className: "iconOwn"
    });
  } else if (k < 2) {
    // detect "cloud.0"
    if (objects['system.adapter.' + id]) {
      icon = getSelectIdIcon(objects, 'system.adapter.' + id, imagePrefix);
    }
  }

  return icon || null;
}

function buildTree(objects, options) {
  options = options || {};
  var imagePrefix = options.imagePrefix || '.';
  var ids = Object.keys(objects);
  ids.sort(function (a, b) {
    if (a === b) return 0;
    a = a.replace(/\./g, '!!!');
    b = b.replace(/\./g, '!!!');
    if (a > b) return 1;
    return -1;
  }); // find empty nodes and create names for it

  var currentPathArr = [];
  var currentPath = '';
  var currentPathLen = 0;
  var root = {
    data: {
      name: '',
      id: ''
    },
    children: []
  };
  var info = {
    funcEnums: [],
    roomEnums: [],
    roles: [],
    ids: [],
    types: [],
    objects: objects,
    customs: [],
    enums: [],
    hasSomeCustoms: false
  };
  var croot = root;

  var _loop = function _loop(i) {
    var id = ids[i];

    if (!id) {
      return "continue";
    }

    var obj = objects[id];
    var parts = id.split('.');

    if (obj.type && !info.types.includes(obj.type)) {
      info.types.push(obj.type);
    }

    if (obj) {
      var common = obj.common;
      var role = common && common.role;

      if (role && !info.roles.includes(role)) {
        info.roles.push(role);
      } else if (id.startsWith('enum.rooms.')) {
        info.roomEnums.push(id);
        info.enums.push(id);
      } else if (id.startsWith('enum.functions.')) {
        info.funcEnums.push(id);
        info.enums.push(id);
      } else if (obj.type === 'enum') {
        info.enums.push(id);
      } else if (obj.type === 'instance' && common && common.supportCustoms) {
        info.hasSomeCustoms = true;
        info.customs.push(id.substring('system.adapter.'.length));
      }
    }

    info.ids.push(id);
    var repeat = void 0; // if next level

    do {
      repeat = false; // If current level is still OK and we can add ID to children

      if (!currentPath || id.startsWith(currentPath + '.')) {
        var _obj$common, _obj$common2, _obj$common3;

        // if more than one level added
        if (parts.length - currentPathLen > 1) {
          var curPath = currentPath; // generate missing levels

          var _loop2 = function _loop2(k) {
            curPath += (curPath ? '.' : '') + parts[k]; // level does not exist

            if (!binarySearch(info.ids, curPath)) {
              var _croot2 = {
                data: {
                  name: parts[k],
                  parent: croot,
                  id: curPath,
                  obj: objects[curPath],
                  level: k,
                  icon: getSystemIcon(objects, curPath, k, imagePrefix),
                  generated: true
                }
              };
              croot.children = croot.children || [];
              croot.children.push(_croot2);
              croot = _croot2;
              info.ids.push(curPath); // IDs will be added by alphabet
            } else {
              croot = croot.children.find(function (item) {
                return item.data.name === parts[k];
              });
            }
          };

          for (var k = currentPathLen; k < parts.length - 1; k++) {
            _loop2(k);
          }
        }

        var _croot = {
          data: {
            name: parts[parts.length - 1],
            title: getName(obj && obj.common && obj.common.name, options.lang),
            obj: obj,
            parent: croot,
            icon: getSelectIdIcon(objects, id, imagePrefix) || getSystemIcon(objects, id, 0, imagePrefix),
            id: id,
            hasCustoms: ((_obj$common = obj.common) === null || _obj$common === void 0 ? void 0 : _obj$common.custom) && Object.keys(obj.common.custom).length,
            level: parts.length - 1,
            generated: false,
            button: obj.type === 'state' && ((_obj$common2 = obj.common) === null || _obj$common2 === void 0 ? void 0 : _obj$common2.role) && typeof obj.common.role === 'string' && obj.common.role.startsWith('button') && ((_obj$common3 = obj.common) === null || _obj$common3 === void 0 ? void 0 : _obj$common3.write) !== false
          }
        };
        croot.children = croot.children || [];
        croot.children.push(_croot);
        croot = _croot;
        currentPathLen = parts.length;
        currentPathArr = parts;
        currentPath = id;
      } else {
        var u = 0;

        while (currentPathArr[u] === parts[u]) {
          u++;
        }

        if (u > 0) {
          var move = currentPathArr.length;
          currentPathArr = currentPathArr.splice(0, u);
          currentPathLen = u;
          currentPath = currentPathArr.join('.');

          while (move > u) {
            croot = croot.data.parent;
            move--;
          }
        } else {
          croot = root;
          currentPathArr = [];
          currentPath = '';
          currentPathLen = 0;
        }

        repeat = true;
      }
    } while (repeat);
  };

  for (var i = 0; i < ids.length; i++) {
    var _ret = _loop(i);

    if (_ret === "continue") continue;
  }

  info.roomEnums.sort();
  info.funcEnums.sort();
  info.roles.sort();
  info.types.sort();
  return {
    info: info,
    root: root
  };
}

function findNode(root, id, _parts, _path, _level) {
  if (root.data.id === id) {
    return root;
  }

  if (!_parts) {
    _parts = id.split('.');
    _level = 0;
    _path = _parts[_level];
  }

  if (!root.children && root.data.id !== id) {
    return null;
  } else {
    var found;

    for (var i = 0; i < root.children.length; i++) {
      var _id = root.children[i].data.id;

      if (_id === _path) {
        found = root.children[i];
        break;
      } else if (_id > _path) {
        break;
      }
    }

    if (found) {
      return findNode(found, id, _parts, _path + '.' + _parts[_level + 1], _level + 1);
    } else {
      return null;
    }
  }
}

function getName(name, lang) {
  if (name && _typeof(name) === 'object') {
    return (name[lang] || name.en || '').toString();
  } else {
    return (name || '').toString();
  }
}

function findRoomsForObject(data, id, lang, withParentInfo, rooms) {
  if (!id) {
    return {
      rooms: [],
      per: false
    };
  }

  rooms = rooms || [];

  for (var i = 0; i < data.roomEnums.length; i++) {
    var _data$objects$data$ro, _common$members;

    var common = (_data$objects$data$ro = data.objects[data.roomEnums[i]]) === null || _data$objects$data$ro === void 0 ? void 0 : _data$objects$data$ro.common;
    var name = getName(common.name, lang);

    if (common !== null && common !== void 0 && (_common$members = common.members) !== null && _common$members !== void 0 && _common$members.includes(id) && !rooms.includes(name)) {
      if (!withParentInfo) {
        rooms.push(name);
      } else {
        rooms.push({
          name: name,
          origin: id
        });
      }
    }
  }

  var ownEnums; // Check parent

  var parts = id.split('.');
  parts.pop();
  id = parts.join('.');

  if (data.objects[id]) {
    ownEnums = rooms.length;
    findRoomsForObject(data, id, lang, withParentInfo, rooms);
  }

  return {
    rooms: rooms,
    per: !ownEnums
  }; // pe is if the enums are from parent
}

function findEnumsForObjectAsIds(data, id, enumName, funcs) {
  if (!id) {
    return [];
  }

  funcs = funcs || [];

  for (var i = 0; i < data[enumName].length; i++) {
    var _data$objects$data$en, _common$members2;

    var common = (_data$objects$data$en = data.objects[data[enumName][i]]) === null || _data$objects$data$en === void 0 ? void 0 : _data$objects$data$en.common;

    if (common !== null && common !== void 0 && (_common$members2 = common.members) !== null && _common$members2 !== void 0 && _common$members2.includes(id) && !funcs.includes(data[enumName][i])) {
      funcs.push(data[enumName][i]);
    }
  }

  funcs.sort();
  return funcs;
}

function findFunctionsForObject(data, id, lang, withParentInfo, funcs) {
  if (!id) {
    return {
      funcs: [],
      pef: false
    };
  }

  funcs = funcs || [];

  for (var i = 0; i < data.funcEnums.length; i++) {
    var _data$objects$data$fu, _common$members3;

    var common = (_data$objects$data$fu = data.objects[data.funcEnums[i]]) === null || _data$objects$data$fu === void 0 ? void 0 : _data$objects$data$fu.common;
    var name = getName(common.name, lang);

    if (common !== null && common !== void 0 && (_common$members3 = common.members) !== null && _common$members3 !== void 0 && _common$members3.includes(id) && !funcs.includes(name)) {
      if (!withParentInfo) {
        funcs.push(name);
      } else {
        funcs.push({
          name: name,
          origin: id
        });
      }
    }
  }

  var ownEnums; // Check parent

  var parts = id.split('.');
  parts.pop();
  id = parts.join('.');

  if (data.objects[id]) {
    ownEnums = funcs.length;
    findFunctionsForObject(data, id, lang, withParentInfo, funcs);
  }

  return {
    funcs: funcs,
    pef: !ownEnums
  };
}
/*function quality2text(q) {
    if (!q) {
        return 'ok';
    }
    const custom = q & 0xFFFF0000;
    let text = '';
    if (q & 0x40) text += 'device';
    if (q & 0x80) text += 'sensor';
    if (q & 0x01) text += ' bad';
    if (q & 0x02) text += ' not connected';
    if (q & 0x04) text += ' error';

    return text + (custom ? '|0x' + (custom >> 16).toString(16).toUpperCase() : '') + ' [0x' + q.toString(16).toUpperCase() + ']';
}*/


function formatValue(id, state, obj, texts, dateFormat, isFloatComma) {
  var states = _Utils["default"].getStates(obj);

  var isCommon = obj.common;
  var valText = {};
  var v = !state || state.val === null ? '(null)' : state.val === undefined ? '[undef]' : state.val;

  var type = _typeof(v);

  if (type === 'number') {
    v = Math.round(v * 100000000) / 100000000; // remove 4.00000000000000001

    if (isFloatComma) {
      v = v.toString().replace('.', ',');
    }
  } else if (type === 'object') {
    v = JSON.stringify(v);
  } else if (type !== 'string') {
    v = v.toString();
  }

  if (isCommon && isCommon.role && typeof isCommon.role === 'string' && isCommon.role.match(/^value\.time|^date/)) {
    if (typeof v === 'string' && v.length === 13) {
      // warning, this solution only works till Nov 20 2286 18:46:39CET
      v = parseInt(v, 10);
    }

    v = v ? new Date(v).toString() : v;
  } else if (typeof v !== 'string') {
    v = v.toString();
  }

  if (states && states[v] !== undefined) {
    valText.s = v;
    v = states[valText.s];
  }

  var valFull;

  if (isCommon && isCommon.unit) {
    valText.u = isCommon.unit;
  }

  valFull = [{
    t: texts.value,
    v: v
  }];

  if (state) {
    if (state.ack !== undefined) {
      valFull.push({
        t: texts.ack,
        v: state.ack.toString()
      });
    }

    if (state.ts) {
      valFull.push({
        t: texts.ts,
        v: state.ts ? _Utils["default"].formatDate(new Date(state.ts), dateFormat) : ''
      });
    }

    if (state.lc) {
      valFull.push({
        t: texts.lc,
        v: state.lc ? _Utils["default"].formatDate(new Date(state.lc), dateFormat) : ''
      });
    }

    if (state.from) {
      var from = state.from || '';

      if (from.startsWith('system.adapter.')) {
        from = from.substring(15);
      }

      valFull.push({
        t: texts.from,
        v: from
      });
    }

    if (state.user) {
      var user = state.user || '';

      if (user.startsWith('system.user.')) {
        user = user.substring(12);
      }

      valFull.push({
        t: texts.user,
        v: user
      });
    }

    valFull.push({
      t: texts.quality,
      v: _Utils["default"].quality2text(state.q || 0).join(', '),
      nbr: true
    });
  }

  if (typeof v === 'string' && v) {
    v = v.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  valText.v = v;
  return {
    valText: valText,
    valFull: valFull,
    style: {
      color: state !== null && state !== void 0 && state.ack ? state.q ? '#ffa500' : '' : '#ff2222c9'
    }
  };
}

function getSelectIdIcon(objects, id, imagePrefix) {
  imagePrefix = imagePrefix || '.'; //http://localhost:8081';

  var src = '';

  var _id_ = 'system.adapter.' + id;

  var aIcon = id && objects[_id_] && objects[_id_].common && objects[_id_].common.icon;

  if (aIcon) {
    // if not BASE64
    if (!aIcon.startsWith('data:image/')) {
      if (aIcon.includes('.')) {
        src = imagePrefix + '/adapter/' + objects[_id_].common.name + '/' + aIcon;
      } else if (aIcon && aIcon.length < 3) {
        return aIcon; // utf-8
      } else {
        return null; //'<i class="material-icons iob-list-icon">' + objects[_id_].common.icon + '</i>';
      }
    } else {
      if (aIcon.startsWith('data:image/svg')) {
        src = /*#__PURE__*/_react["default"].createElement(_reactInlinesvg["default"], {
          src: aIcon,
          width: 28,
          height: 28
        });
      } else {
        src = aIcon;
      }
    }
  } else {
    var common = objects[id] && objects[id].common;

    if (common) {
      var cIcon = common.icon;

      if (cIcon) {
        if (!cIcon.startsWith('data:image/')) {
          if (cIcon.includes('.')) {
            var instance;

            if (objects[id].type === 'instance' || objects[id].type === 'adapter') {
              src = imagePrefix + '/adapter/' + common.name + '/' + cIcon;
            } else if (id && id.startsWith('system.adapter.')) {
              instance = id.split('.', 3);

              if (cIcon[0] === '/') {
                instance[2] += cIcon;
              } else {
                instance[2] += '/' + cIcon;
              }

              src = imagePrefix + '/adapter/' + instance[2];
            } else {
              instance = id.split('.', 2);

              if (cIcon[0] === '/') {
                instance[0] += cIcon;
              } else {
                instance[0] += '/' + cIcon;
              }

              src = imagePrefix + '/adapter/' + instance[0];
            }
          } else if (aIcon && aIcon.length < 3) {
            return aIcon; // utf-8
          } else {
            return null;
          }
        } else {
          // base 64 image
          if (cIcon.startsWith('data:image/svg')) {
            src = /*#__PURE__*/_react["default"].createElement(_reactInlinesvg["default"], {
              src: cIcon,
              width: 28,
              height: 28
            });
          } else {
            src = cIcon;
          }
        }
      }
    }
  }

  return src || null;
}

function prepareSparkData(values, from) {
  // set every hour one point
  var time = from;
  var i = 1;
  var v = [];

  while (i < values.length && time < from + 25 * 3600000) {
    // find the interval
    while (values[i - 1].ts < time && time <= values[i].ts && i < values.length) {
      i++;
    }

    if (i === 1 && values[i - 1].ts >= time) {
      // assume the value was always null
      v.push(0);
    } else if (i < values.length) {
      if (typeof values[i].val === 'boolean' || typeof values[i - 1].val === 'boolean') {
        v.push(values[i].val ? 1 : 0);
      } else {
        // remove nulls
        values[i - 1].val = values[i - 1].val || 0;
        values[i].val = values[i].val || 0; // interpolate

        var val = values[i - 1].val + (values[i].val - values[i - 1].val) * (time - values[i - 1].ts) / (values[i].ts - values[i - 1].ts);
        v.push(val);
      }
    }

    time += 3600000;
  }

  return v;
}
/**
 * @type {import('./types').ObjectBrowserTableFilter}
 */


var DEFAULT_FILTER = {
  id: '',
  name: '',
  room: '',
  func: '',
  role: '',
  type: '',
  custom: '',
  expertMode: false
};
var ITEM_IMAGES = {
  state: /*#__PURE__*/_react["default"].createElement(_IconState["default"], {
    className: "itemIcon"
  }),
  channel: /*#__PURE__*/_react["default"].createElement(_IconChannel["default"], {
    className: "itemIcon"
  }),
  device: /*#__PURE__*/_react["default"].createElement(_IconDevice["default"], {
    className: "itemIcon"
  }),
  adapter: /*#__PURE__*/_react["default"].createElement(_IconAdapter["default"], {
    className: "itemIcon"
  }),
  meta: /*#__PURE__*/_react["default"].createElement(_Description["default"], {
    className: "itemIcon"
  }),
  instance: /*#__PURE__*/_react["default"].createElement(_IconInstance["default"], {
    className: "itemIcon",
    style: {
      color: '#7da7ff'
    }
  }),
  "enum": /*#__PURE__*/_react["default"].createElement(_ListAlt["default"], {
    className: "itemIcon"
  }),
  chart: /*#__PURE__*/_react["default"].createElement(_ShowChart["default"], {
    className: "itemIcon"
  }),
  config: /*#__PURE__*/_react["default"].createElement(_Settings["default"], {
    className: "itemIcon"
  }),
  group: /*#__PURE__*/_react["default"].createElement(_SupervisedUserCircle["default"], {
    className: "itemIcon"
  }),
  user: /*#__PURE__*/_react["default"].createElement(_PersonOutlined["default"], {
    className: "itemIcon"
  }),
  host: /*#__PURE__*/_react["default"].createElement(_Router["default"], {
    className: "itemIcon"
  }),
  schedule: /*#__PURE__*/_react["default"].createElement(_CalendarToday["default"], {
    className: "itemIcon"
  }),
  script: /*#__PURE__*/_react["default"].createElement(_Code["default"], {
    className: "itemIcon"
  })
};
var StyledBadge = (0, _withStyles["default"])(function (theme) {
  return {
    badge: {
      right: 3,
      top: 3,
      border: "2px solid ".concat(theme.palette.background.paper),
      padding: '0 4px'
    }
  };
})(_Badge["default"]);
var SCREEN_WIDTHS = {
  // extra-small: 0px
  xs: {
    idWidth: '100%',
    fields: [],
    widths: {}
  },
  // small: 600px
  sm: {
    idWidth: 300,
    fields: ['room', 'val'],
    widths: {
      room: 100,
      val: 200
    }
  },
  // medium: 960px
  md: {
    idWidth: 300,
    fields: ['room', 'func', 'val', 'buttons'],
    widths: {
      name: 200,
      room: 150,
      func: 150,
      val: 120,
      buttons: 120
    }
  },
  // large: 1280px
  lg: {
    idWidth: 300,
    fields: ['name', 'type', 'role', 'room', 'func', 'val', 'buttons', 'changedFrom', 'qualityCode', 'timestamp', 'lastChange'],
    widths: {
      name: 300,
      type: 80,
      role: 120,
      room: 180,
      func: 180,
      val: 140,
      buttons: 120,
      changedFrom: 120,
      qualityCode: 100,
      timestamp: 165,
      lastChange: 165
    }
  },
  ///////////////
  // extra-large: 1920px
  xl: {
    idWidth: 650,
    fields: ['name', 'type', 'role', 'room', 'func', 'val', 'buttons', 'changedFrom', 'qualityCode', 'timestamp', 'lastChange'],
    widths: {
      name: 400,
      type: 80,
      role: 120,
      room: 180,
      func: 180,
      val: 140,
      buttons: 120,
      changedFrom: 120,
      qualityCode: 100,
      timestamp: 170,
      lastChange: 170
    }
  }
};
/**
 * @extends {React.Component<import('./types').ObjectBrowserProps>}
 */

var ObjectBrowser = /*#__PURE__*/function (_Component) {
  _inherits(ObjectBrowser, _Component);

  var _super = _createSuper(ObjectBrowser);

  /**
   * @param {import('./types').ObjectBrowserProps} props
   */
  function ObjectBrowser(props) {
    var _this;

    _classCallCheck(this, ObjectBrowser);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onStateChange", function (id, state) {
      console.log('> stateChange ' + id);

      if (_this.states[id]) {
        var item = _this.findItem(id);

        if (item && item.data.state) {
          item.data.state = null;
        }
      }

      _this.states[id] = state;

      if (!_this.pausedSubscribes) {
        if (!_this.statesUpdateTimer) {
          _this.statesUpdateTimer = setTimeout(function () {
            _this.statesUpdateTimer = null;

            _this.forceUpdate();
          }, 300);
        }
      } else {
        if (_this.statesUpdateTimer) {
          clearTimeout(_this.statesUpdateTimer);
          _this.statesUpdateTimer = null;
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onObjectChange", function (id, obj, oldObj) {
      console.log('> objectChange ' + id);
      _this.objects = _this.objects || [];

      if (id.startsWith('system.adapter.') && obj && obj.type === 'adapter') {
        var columnsForAdmin = JSON.parse(JSON.stringify(_this.state.columnsForAdmin));

        _this.parseObjectForAdmins(columnsForAdmin, obj);

        if (JSON.stringify(_this.state.columnsForAdmin) !== JSON.stringify(columnsForAdmin)) {
          _this.setState({
            columnsForAdmin: columnsForAdmin
          });
        }
      }

      if (_this.objects[id]) {
        if (obj) {
          _this.objects[id] = obj;
        } else {
          delete _this.objects[id];
        }
      } else if (_this.objects[id]) {
        delete _this.objects[id];
      }

      if (!_this.objectsUpdateTimer) {
        _this.objectsUpdateTimer = setTimeout(function () {
          _this.objectsUpdateTimer = null;

          var _buildTree = buildTree(_this.objects, _this.props),
              info = _buildTree.info,
              root = _buildTree.root;

          _this.root = root;
          _this.info = info;
          _this.lastAppliedFilter = null; // apply filter anew

          if (!_this.pausedSubscribes) {
            _this.forceUpdate();
          } // else it will be re-rendered when dialog will be closed

        }, 500);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getEnumsForId", function (id) {
      var result = [];

      _this.info.enums.forEach(function (_id) {
        var _this$objects$_id, _this$objects$_id$com, _this$objects$_id$com2;

        if ((_this$objects$_id = _this.objects[_id]) !== null && _this$objects$_id !== void 0 && (_this$objects$_id$com = _this$objects$_id.common) !== null && _this$objects$_id$com !== void 0 && (_this$objects$_id$com2 = _this$objects$_id$com.members) !== null && _this$objects$_id$com2 !== void 0 && _this$objects$_id$com2.includes(id)) {
          var en = {
            _id: _this.objects[_id]._id,
            common: JSON.parse(JSON.stringify(_this.objects[_id].common)),
            "native": _this.objects[_id]["native"]
          };

          if (en.common) {
            delete en.common.members;
            delete en.common.custom;
            delete en.common.mobile;
          }

          result.push(en);
        }
      });

      return result.length ? result : undefined;
    });

    _defineProperty(_assertThisInitialized(_this), "_createAllEnums", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(enums, objId) {
        var e, _enObj$common, _enObj$common$members, id, _enObj, enObj;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                e = 0;

              case 1:
                if (!(e < enums.length)) {
                  _context.next = 24;
                  break;
                }

                id = enums[e];
                _enObj = void 0;

                if (_typeof(id) === 'object') {
                  _enObj = id;
                  id = id._id;
                }

                enObj = _this.objects[id];

                if (enObj) {
                  _context.next = 14;
                  break;
                }

                enObj = _enObj || {
                  _id: id,
                  common: {
                    name: id.split('.').pop(),
                    members: []
                  },
                  "native": {}
                };
                enObj.common = enObj.common || {};
                enObj.common.members = [objId];
                _context.next = 12;
                return _this.props.socket.setObject(id, enObj);

              case 12:
                _context.next = 21;
                break;

              case 14:
                if ((_enObj$common = enObj.common) !== null && _enObj$common !== void 0 && (_enObj$common$members = _enObj$common.members) !== null && _enObj$common$members !== void 0 && _enObj$common$members.includes(objId)) {
                  _context.next = 21;
                  break;
                }

                enObj.common = enObj.common || {};
                enObj.common.members = enObj.common.members || []; // add missing object

                enObj.common.members.push(objId);
                enObj.common.members.sort();
                _context.next = 21;
                return _this.props.socket.setObject(id, enObj);

              case 21:
                e++;
                _context.next = 1;
                break;

              case 24:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "loadObjects", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(objs) {
        var id, obj, enums, state;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!objs) {
                  _context2.next = 42;
                  break;
                }

                _context2.t0 = regeneratorRuntime.keys(objs);

              case 2:
                if ((_context2.t1 = _context2.t0()).done) {
                  _context2.next = 42;
                  break;
                }

                id = _context2.t1.value;

                if (!(!objs.hasOwnProperty(id) || !objs[id])) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("continue", 2);

              case 6:
                obj = objs[id];
                enums = null;

                if (obj && obj.common && obj.common.enums) {
                  enums = obj.common.enums;
                  delete obj.common.enums;
                } else {
                  enums = null;
                }

                _context2.prev = 9;
                _context2.next = 12;
                return _this.props.socket.setObject(id, obj);

              case 12:
                _context2.t2 = enums;

                if (!_context2.t2) {
                  _context2.next = 16;
                  break;
                }

                _context2.next = 16;
                return _this._createAllEnums(enums, obj._id);

              case 16:
                if (!(obj.type === 'state')) {
                  _context2.next = 35;
                  break;
                }

                _context2.prev = 17;
                _context2.next = 20;
                return _this.props.socket.getState(obj._id);

              case 20:
                state = _context2.sent;

                if (!(!state || state.val === null)) {
                  _context2.next = 30;
                  break;
                }

                _context2.prev = 22;
                _context2.next = 25;
                return _this.props.socket.setState(obj._id, !obj.common || obj.common.def === undefined ? null : obj.common.def, true);

              case 25:
                _context2.next = 30;
                break;

              case 27:
                _context2.prev = 27;
                _context2.t3 = _context2["catch"](22);
                window.alert("Cannot set state \"".concat(obj._id, "\": ").concat(_context2.t3));

              case 30:
                _context2.next = 35;
                break;

              case 32:
                _context2.prev = 32;
                _context2.t4 = _context2["catch"](17);
                window.alert("Cannot read state \"".concat(obj._id, "\": ").concat(_context2.t4));

              case 35:
                _context2.next = 40;
                break;

              case 37:
                _context2.prev = 37;
                _context2.t5 = _context2["catch"](9);
                window.alert(_context2.t5);

              case 40:
                _context2.next = 2;
                break;

              case 42:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[9, 37], [17, 32], [22, 27]]);
      }));

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "handleJsonUpload", function (evt) {
      var f = evt.target.files[0];

      if (f) {
        var r = new FileReader();

        r.onload = /*#__PURE__*/function () {
          var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(e) {
            var contents, json, len, id, enums, state;
            return regeneratorRuntime.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    contents = e.target.result;
                    _context3.prev = 1;
                    json = JSON.parse(contents);
                    len = Object.keys(json).length;
                    id = json._id;

                    if (!(id === undefined && len)) {
                      _context3.next = 11;
                      break;
                    }

                    _context3.next = 8;
                    return _this.loadObjects(json);

                  case 8:
                    window.alert(_this.props.t('ra_%s object(s) processed', len));
                    _context3.next = 33;
                    break;

                  case 11:
                    if (id) {
                      _context3.next = 13;
                      break;
                    }

                    return _context3.abrupt("return", window.alert(_this.props.t('ra_Invalid structure')));

                  case 13:
                    _context3.prev = 13;

                    if (json.common.enums) {
                      enums = json.common.enums;
                      delete json.common.enums;
                    }

                    _context3.next = 17;
                    return _this.props.socket.setObject(json._id, json);

                  case 17:
                    if (!(json.type === 'state')) {
                      _context3.next = 24;
                      break;
                    }

                    _context3.next = 20;
                    return _this.props.socket.getState(json._id);

                  case 20:
                    state = _context3.sent;

                    if (!(!state || state.val === null || state.val === undefined)) {
                      _context3.next = 24;
                      break;
                    }

                    _context3.next = 24;
                    return _this.props.socket.getState(json._id, json.common.def === undefined ? null : json.common.def, true);

                  case 24:
                    if (!enums) {
                      _context3.next = 27;
                      break;
                    }

                    _context3.next = 27;
                    return _this._createAllEnums(enums, json._id);

                  case 27:
                    window.alert(_this.props.t('ra_%s was imported', json._id));
                    _context3.next = 33;
                    break;

                  case 30:
                    _context3.prev = 30;
                    _context3.t0 = _context3["catch"](13);
                    window.alert(_context3.t0);

                  case 33:
                    _context3.next = 38;
                    break;

                  case 35:
                    _context3.prev = 35;
                    _context3.t1 = _context3["catch"](1);
                    window.alert(_context3.t1);

                  case 38:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, null, [[1, 35], [13, 30]]);
          }));

          return function (_x4) {
            return _ref3.apply(this, arguments);
          };
        }();

        r.readAsText(f);
      } else {
        window.alert(_this.props.t('ra_Failed to open JSON File'));
      }
    });

    _defineProperty(_assertThisInitialized(_this), "toolTipObjectCreating", function () {
      var _this$objects$id2;

      var t = _this.props.t;
      var value = [/*#__PURE__*/_react["default"].createElement("div", {
        key: 1
      }, t('ra_Only following structures of objects are available:')), /*#__PURE__*/_react["default"].createElement("div", {
        key: 2
      }, t('ra_Folder → State')), /*#__PURE__*/_react["default"].createElement("div", {
        key: 3
      }, t('ra_Folder → Channel → State')), /*#__PURE__*/_react["default"].createElement("div", {
        key: 4
      }, t('ra_Folder → Device → Channel → State')), /*#__PURE__*/_react["default"].createElement("div", {
        key: 5
      }, t('ra_Device → Channel → State')), /*#__PURE__*/_react["default"].createElement("div", {
        key: 6
      }, t('ra_Channel → State')), /*#__PURE__*/_react["default"].createElement("div", {
        key: 7,
        style: {
          height: 10
        }
      }), /*#__PURE__*/_react["default"].createElement("div", {
        key: 8
      }, t('ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".')), /*#__PURE__*/_react["default"].createElement("div", {
        key: 9
      }, t('ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").'))];

      if (_this.state.selected.length || _this.state.selectedNonObject) {
        var _this$objects$id;

        var id = _this.state.selected[0] || _this.state.selectedNonObject;

        if (id.split('.').length < 2 || _this.objects[id] && ((_this$objects$id = _this.objects[id]) === null || _this$objects$id === void 0 ? void 0 : _this$objects$id.type) === 'state') {} else {
          if (_this.props.expertMode) {
            switch ((_this$objects$id2 = _this.objects[id]) === null || _this$objects$id2 === void 0 ? void 0 : _this$objects$id2.type) {
              case 'device':
                value = [/*#__PURE__*/_react["default"].createElement("div", {
                  key: 1
                }, t('ra_Only following structures of objects are available:')), /*#__PURE__*/_react["default"].createElement("div", {
                  key: 5
                }, t('ra_Device → Channel → State'))];
                break;

              case 'folder':
                value = [/*#__PURE__*/_react["default"].createElement("div", {
                  key: 1
                }, t('ra_Only following structures of objects are available:')), /*#__PURE__*/_react["default"].createElement("div", {
                  key: 2
                }, t('ra_Folder → State')), /*#__PURE__*/_react["default"].createElement("div", {
                  key: 3
                }, t('ra_Folder → Channel → State')), /*#__PURE__*/_react["default"].createElement("div", {
                  key: 4
                }, t('ra_Folder → Device → Channel → State'))];
                break;

              case 'channel':
                value = [/*#__PURE__*/_react["default"].createElement("div", {
                  key: 1
                }, t('ra_Only following structures of objects are available:')), /*#__PURE__*/_react["default"].createElement("div", {
                  key: 1
                }, t('ra_Channel → State'))];
                break;

              default:
                break;
            }
          } else if (id.startsWith('alias.0') || id.startsWith('0_userdata')) {
            value = [/*#__PURE__*/_react["default"].createElement("div", {
              key: 1
            }, t('ra_Only following structures of objects are available:')), /*#__PURE__*/_react["default"].createElement("div", {
              key: 7
            }, t('ra_Non-experts may create new objects only in "0_userdata.0" or "alias.0".')), /*#__PURE__*/_react["default"].createElement("div", {
              key: 8
            }, t('ra_The experts may create objects everywhere but from second level (e.g. "vis.0" or "javascript.0").'))];
          }
        }
      }

      return value.length ? value : t('ra_Add new child object to selected parent');
    });

    _defineProperty(_assertThisInitialized(_this), "renderTooltipAccessControl", function (acl) {
      // acl ={object,state,owner,ownerGroup}
      if (!acl) {
        return null;
      }

      var check = [{
        value: '0x400',
        valueNum: 0x400,
        title: 'read',
        group: 'Owner'
      }, {
        value: '0x200',
        valueNum: 0x200,
        title: 'write',
        group: 'Owner'
      }, {
        value: '0x40',
        valueNum: 0x40,
        title: 'read',
        group: 'Group'
      }, {
        value: '0x20',
        valueNum: 0x20,
        title: 'write',
        group: 'Group'
      }, {
        value: '0x4',
        valueNum: 0x4,
        title: 'read',
        group: 'Everyone'
      }, {
        value: '0x2',
        valueNum: 0x2,
        title: 'write',
        group: 'Everyone'
      }];
      var arrayTooltipText = [];

      var funcRenderStateObject = function funcRenderStateObject() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'object';
        var rights = acl[value];
        check.forEach(function (el, i) {
          if (rights & el.valueNum) {
            arrayTooltipText.push( /*#__PURE__*/_react["default"].createElement("span", {
              key: value + i
            }, _this.texts['acl' + el.group + '_' + el.title + '_' + value], ",", /*#__PURE__*/_react["default"].createElement("span", {
              className: value === 'object' ? _this.props.classes.rightsObject : _this.props.classes.rightsState
            }, el.value)));
          }
        });
      };

      arrayTooltipText.push( /*#__PURE__*/_react["default"].createElement("span", {
        key: "group"
      }, _this.texts.ownerGroup + ': ' + (acl.ownerGroup || '').replace('system.group.', '')));
      arrayTooltipText.push( /*#__PURE__*/_react["default"].createElement("span", {
        key: "owner"
      }, _this.texts.ownerUser + ': ' + (acl.owner || '').replace('system.user.', '')));
      funcRenderStateObject();

      if (acl.state) {
        funcRenderStateObject('state');
      }

      return arrayTooltipText.length ? /*#__PURE__*/_react["default"].createElement("span", {
        className: _this.props.classes.tooltipAccessControl
      }, arrayTooltipText.map(function (el) {
        return el;
      })) : '';
    });

    _defineProperty(_assertThisInitialized(_this), "extendObject", function (id, data) {
      return _this.props.socket.extendObject(id, data, function (error) {
        return error && window.alert(error);
      });
    });

    _this.lastSelectedItems = window.localStorage.getItem("".concat(props.dialogName || 'App', ".objectSelected")) || '[]';

    try {
      _this.lastSelectedItems = JSON.parse(_this.lastSelectedItems);

      if (_typeof(_this.lastSelectedItems) !== 'object') {
        _this.lastSelectedItems = [_this.lastSelectedItems];
      }

      _this.lastSelectedItems = _this.lastSelectedItems.filter(function (id) {
        return id;
      });
    } catch (e) {}

    var expanded = window.localStorage.getItem("".concat(props.dialogName || 'App', ".objectExpanded")) || '[]';

    try {
      expanded = JSON.parse(expanded);
    } catch (e) {
      expanded = [];
    }

    var filter = props.defaultFilters || window.localStorage.getItem("".concat(props.dialogName || 'App', ".objectFilter")) || Object.assign({}, DEFAULT_FILTER);

    if (typeof filter === 'string') {
      try {
        filter = JSON.parse(filter);
      } catch (e) {
        filter = Object.assign({}, DEFAULT_FILTER);
      }
    }

    filter.expertMode = props.expertMode !== undefined ? props.expertMode : window.sessionStorage.getItem('App.expertMode') === 'true';
    _this.tableRef = /*#__PURE__*/(0, _react.createRef)();
    _this.filterRefs = {};
    Object.keys(DEFAULT_FILTER).forEach(function (name) {
      return _this.filterRefs[name] = /*#__PURE__*/(0, _react.createRef)();
    });
    _this.lastAppliedFilter = null;
    _this.pausedSubscribes = false;
    _this.selectedFound = false;
    _this.root = null;
    _this.states = {};
    _this.subscribes = [];
    _this.statesUpdateTimer = null;
    _this.objectsUpdateTimer = null;
    _this.visibleCols = props.columns || SCREEN_WIDTHS[props.width].fields; // remove type column if only one type must be selected

    if (props.types && props.types.length === 1) {
      var pos = _this.visibleCols.indexOf('type');

      pos !== -1 && _this.visibleCols.splice(pos, 1);
    }

    _this.possibleCols = SCREEN_WIDTHS.xl.fields;
    var customDialog = null;

    if (props.router) {
      var location = props.router.getLocation();

      if (location.id && location.dialog === 'customs') {
        customDialog = [location.id];

        _this.pauseSubscribe(true);
      }
    }

    var selected = props.selected || '';

    if (_typeof(selected) !== 'object') {
      selected = [selected];
    }

    selected = selected.map(function (id) {
      return id.replace(/["']/g, '');
    }).filter(function (id) {
      return id;
    });
    var columns = window.localStorage.getItem("".concat(props.dialogName || 'App', ".columns"));

    try {
      columns = columns ? JSON.parse(columns) : null;
    } catch (e) {
      columns = null;
    }

    var columnsWidths = window.localStorage.getItem("".concat(props.dialogName || 'App', ".columnsWidths"));

    try {
      columnsWidths = columnsWidths ? JSON.parse(columnsWidths) : {};
    } catch (e) {
      columnsWidths = {};
    }

    _this.imagePrefix = props.imagePrefix || '.';
    var foldersFirst = window.localStorage.getItem((props.dialogName || 'App') + '.foldersFirst');

    if (foldersFirst === 'false') {
      foldersFirst = false;
    } else if (foldersFirst === 'true') {
      foldersFirst = true;
    } else {
      foldersFirst = props.foldersFirst === undefined ? true : props.foldersFirst;
    }

    var statesView = _this.props.objectStatesView ? JSON.parse(window.localStorage.getItem((props.dialogName || 'App') + '.objectStatesView')) || false : false;
    _this.state = {
      loaded: false,
      foldersFirst: foldersFirst,
      selected: selected,
      selectedNonObject: window.localStorage.getItem("".concat(props.dialogName || 'App', ".selectedNonObject")) || '',
      filter: filter,
      filterKey: 0,
      depth: 0,
      expandAllVisible: false,
      expanded: expanded,
      toast: '',
      lang: props.lang,
      scrollBarWidth: 16,
      hasSomeCustoms: false,
      customDialog: customDialog,
      editObjectDialog: '',
      enumDialog: null,
      roleDialog: null,
      modalEmptyId: null,
      statesView: statesView,
      columns: columns,
      columnsForAdmin: null,
      columnsSelectorShow: false,
      columnsAuto: window.localStorage.getItem("".concat(props.dialogName || 'App', ".columnsAuto")) !== 'false',
      columnsWidths: columnsWidths,
      columnsDialogTransparent: 100,
      columnsEditCustomDialog: null,
      customColumnDialogValueChanged: false,
      showExportDialog: false
    };
    _this.edit = {};
    _this.texts = {
      value: props.t('ra_tooltip_value'),
      ack: props.t('ra_tooltip_ack'),
      ts: props.t('ra_tooltip_ts'),
      lc: props.t('ra_tooltip_lc'),
      from: props.t('ra_tooltip_from'),
      user: props.t('ra_tooltip_user'),
      quality: props.t('ra_tooltip_quality'),
      editObject: props.t('ra_tooltip_editObject'),
      deleteObject: props.t('ra_tooltip_deleteObject'),
      customConfig: props.t('ra_tooltip_customConfig'),
      copyState: props.t('ra_tooltip_copyState'),
      editState: props.t('ra_tooltip_editState'),
      close: props.t('ra_Close'),
      filter_id: props.t('ra_filter_id'),
      filter_name: props.t('ra_filter_name'),
      filter_type: props.t('ra_filter_type'),
      filter_role: props.t('ra_filter_role'),
      filter_room: props.t('ra_filter_room'),
      filter_func: props.t('ra_filter_func'),
      filter_customs: props.t('ra_filter_customs'),
      //
      objectChangedByUser: props.t('ra_object_changed_by_user'),
      // Object last changed at
      objectChangedBy: props.t('ra_object_changed_by'),
      // Object changed by
      objectChangedFrom: props.t('ra_state_changed_from'),
      // Object changed from
      stateChangedBy: props.t('ra_state_changed_by'),
      // State changed by
      stateChangedFrom: props.t('ra_state_changed_from'),
      // State changed from
      ownerGroup: props.t('ra_Owner group'),
      ownerUser: props.t('ra_Owner user'),
      aclOwner_read_object: props.t('ra_aclOwner_read_object'),
      aclOwner_read_state: props.t('ra_aclOwner_read_state'),
      aclOwner_write_object: props.t('ra_aclOwner_write_object'),
      aclOwner_write_state: props.t('ra_aclOwner_write_state'),
      aclGroup_read_object: props.t('ra_aclGroup_read_object'),
      aclGroup_read_state: props.t('ra_aclGroup_read_state'),
      aclGroup_write_object: props.t('ra_aclGroup_write_object'),
      aclGroup_write_state: props.t('ra_aclGroup_write_state'),
      aclEveryone_read_object: props.t('ra_aclEveryone_read_object'),
      aclEveryone_read_state: props.t('ra_aclEveryone_read_state'),
      aclEveryone_write_object: props.t('ra_aclEveryone_write_object'),
      aclEveryone_write_state: props.t('ra_aclEveryone_write_state')
    };

    _this.calculateColumnsVisibility();

    props.socket.getObjects(true, true).then(function (objects) {
      _this.systemConfig = objects['system.config'] || {};
      _this.systemConfig.common = _this.systemConfig.common || {};
      _this.systemConfig.common.defaultNewAcl = _this.systemConfig.common.defaultNewAcl || {};
      _this.systemConfig.common.defaultNewAcl.owner = _this.systemConfig.common.defaultNewAcl.owner || 'system.user.admin';
      _this.systemConfig.common.defaultNewAcl.ownerGroup = _this.systemConfig.common.defaultNewAcl.ownerGroup || 'system.group.administrator';

      if (typeof _this.systemConfig.common.defaultNewAcl.state !== 'number') {
        _this.systemConfig.common.defaultNewAcl.state = 0x664;
      }

      if (typeof _this.systemConfig.common.defaultNewAcl.object !== 'number') {
        _this.systemConfig.common.defaultNewAcl.state = 0x664;
      }

      if (props.types) {
        _this.objects = {};
        Object.keys(objects).forEach(function (id) {
          var type = objects[id] && objects[id].type;

          if (type && (type === 'channel' || type === 'device' || type === 'enum' || type === 'folder' || type === 'adapter' || type === 'instance' || props.types.includes(type))) {
            _this.objects[id] = objects[id];
          }
        });
      } else {
        _this.objects = objects;
      }

      var _buildTree2 = buildTree(_this.objects, _this.props),
          info = _buildTree2.info,
          root = _buildTree2.root;

      _this.root = root;
      _this.info = info; // Show first selected item

      var node = _this.state.selected && _this.state.selected.length && findNode(_this.root, _this.state.selected[0]); // If selected ID is not visible, reset filter

      if (node && !applyFilter(node, _this.state.filter, _this.state.lang, _this.objects, null, null, props.customFilter)) {
        // reset filter
        _this.setState({
          filter: Object.assign({}, DEFAULT_FILTER)
        }, function () {
          _this.setState({
            loaded: true
          }, function () {
            return _this.expandAllSelected(function () {
              return _this.onAfterSelect();
            });
          });
        });
      } else {
        _this.setState({
          loaded: true
        }, function () {
          return _this.expandAllSelected(function () {
            return _this.onAfterSelect();
          });
        });
      }
    }); // read default history

    props.socket.getCompactSystemConfig().then(function (config) {
      _this.defaultHistory = config && config.common && config.common.defaultHistory;

      if (_this.defaultHistory) {
        return props.socket.getState('system.adapter.' + _this.defaultHistory + '.alive').then(function (state) {
          if (!state || !state.val) {
            _this.defaultHistory = '';
          }
        })["catch"](function (e) {
          return window.alert('Cannot get state: ' + e);
        });
      }
    }).then(function () {
      return _this.getAdditionalColumns();
    }).then(function (columnsForAdmin) {
      _this.calculateColumnsVisibility(null, null, columnsForAdmin);

      _this.setState({
        columnsForAdmin: columnsForAdmin
      });
    })["catch"](function (e) {
      return _this.showError(e);
    });
    return _this;
  }
  /**
   * @private
   * @param {ioBroker.EmptyCallback} cb
   */


  _createClass(ObjectBrowser, [{
    key: "expandAllSelected",
    value: function expandAllSelected(cb) {
      var expanded = _toConsumableArray(this.state.expanded);

      var changed = false;
      this.state.selected.forEach(function (id) {
        var parts = id.split('.');
        var path = [];

        for (var i = 0; i < parts.length - 1; i++) {
          path.push(parts[i]);

          if (!expanded.includes(path.join('.'))) {
            expanded.push(path.join('.'));
            changed = true;
          }
        }
      });

      if (changed) {
        expanded.sort();
        window.localStorage.setItem("".concat(this.props.dialogName || 'App', ".objectExpanded"), JSON.stringify(expanded));
        this.setState({
          expanded: expanded
        }, cb);
      } else {
        cb && cb();
      }
    }
    /**
     * @private
     * @param {boolean} [isDouble]
     */

  }, {
    key: "onAfterSelect",
    value: function onAfterSelect(isDouble) {
      var _this2 = this;

      this.lastSelectedItems = _toConsumableArray(this.state.selected);

      if (this.state.selected && this.state.selected.length) {
        window.localStorage.setItem("".concat(this.props.dialogName || 'App', ".objectSelected"), JSON.stringify(this.lastSelectedItems));
        var name = this.lastSelectedItems.length === 1 ? _Utils["default"].getObjectName(this.objects, this.lastSelectedItems[0], null, {
          language: this.state.lang
        }) : '';
        this.props.onSelect && this.props.onSelect(this.lastSelectedItems, name, isDouble);
      } else {
        window.localStorage.setItem("".concat(this.props.dialogName || 'App', ".objectSelected"), '');

        if (this.state.selected.length) {
          this.setState({
            selected: []
          }, function () {
            return _this2.props.onSelect && _this2.props.onSelect([], '');
          });
        } else {
          this.props.onSelect && this.props.onSelect([], '');
        }
      }
    }
    /**
     * @private
     * @param {import('./types').ObjectBrowserProps} props
     * @param {any} state
     */

  }, {
    key: "componentDidMount",
    value:
    /**
     * Called when component is mounted.
     */
    function componentDidMount() {
      this.props.socket.subscribeObject('*', this.onObjectChange);
    }
    /**
     * Called when component is unmounted.
     */

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this3 = this;

      this.props.socket.unsubscribeObject('*', this.onObjectChange); // remove all subscribes

      this.subscribes.forEach(function (pattern) {
        console.log('- unsubscribe ' + pattern);

        _this3.props.socket.unsubscribeState(pattern, _this3.onStateChange);
      });
      this.subscribes = [];
    }
    /**
     * Called when component is mounted.
     */

  }, {
    key: "refreshComponent",
    value: function () {
      var _refreshComponent = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
        var _this4 = this;

        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;
                _context5.next = 3;
                return this.props.socket.unsubscribeObject('*', this.onObjectChange);

              case 3:
                _context5.next = 8;
                break;

              case 5:
                _context5.prev = 5;
                _context5.t0 = _context5["catch"](0);
                window.alert('Cannot unsubscribe object: ' + _context5.t0);

              case 8:
                // remove all subscribes
                this.subscribes.forEach( /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(pattern) {
                    return regeneratorRuntime.wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            console.log('- unsubscribe ' + pattern);
                            _context4.next = 3;
                            return _this4.props.socket.unsubscribeState(pattern, _this4.onStateChange);

                          case 3:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  }));

                  return function (_x5) {
                    return _ref4.apply(this, arguments);
                  };
                }());
                this.subscribes = [];
                _context5.next = 12;
                return this.props.socket.subscribeObject('*', this.onObjectChange);

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[0, 5]]);
      }));

      function refreshComponent() {
        return _refreshComponent.apply(this, arguments);
      }

      return refreshComponent;
    }()
    /**
     * Renders the error dialog.
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderErrorDialog",
    value: function renderErrorDialog() {
      var _this5 = this;

      return this.state.error ? /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
        open: true,
        maxWidth: "sm",
        fullWidth: true,
        onClose: function onClose() {
          return _this5.setState({
            error: ''
          });
        },
        "aria-labelledby": "error-dialog-title",
        "aria-describedby": "error-dialog-description"
      }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], {
        id: "alert-dialog-title"
      }, this.props.title || this.props.t('ra_Error')), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], null, /*#__PURE__*/_react["default"].createElement(_DialogContentText["default"], {
        id: "alert-dialog-description"
      }, this.state.error)), /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        variant: "contained",
        onClick: function onClick() {
          return _this5.setState({
            error: ''
          });
        },
        color: "primary",
        autoFocus: true
      }, /*#__PURE__*/_react["default"].createElement(_Check["default"], {
        className: this.props.classes.buttonIcon
      }), this.props.t('ra_Ok')))) : null;
    }
    /**
     * Show the error dialog.
     * @param {any} error
     */

  }, {
    key: "showError",
    value: function showError(error) {
      this.setState({
        error: _typeof(error) === 'object' ? error && typeof error.toString === 'function' ? error.toString() : JSON.stringify(error) : error
      });
    }
    /**
     * Called when an item is selected/deselected.
     * @param {string} toggleItem
     * @param {boolean} [isDouble]
     */

  }, {
    key: "onSelect",
    value: function onSelect(toggleItem, isDouble) {
      var _this6 = this;

      if (!this.props.multiSelect) {
        if (this.objects[toggleItem] && (!this.props.types || this.props.types.includes(this.objects[toggleItem].type))) {
          window.localStorage.removeItem("".concat(this.props.dialogName || 'App', ".selectedNonObject"));

          if (this.state.selected[0] !== toggleItem) {
            this.setState({
              selected: [toggleItem],
              selectedNonObject: ''
            }, function () {
              return _this6.onAfterSelect(isDouble);
            });
          } else if (isDouble && this.props.onSelect) {
            this.onAfterSelect(isDouble);
          }
        } else {
          window.localStorage.setItem("".concat(this.props.dialogName || 'App', ".selectedNonObject"), toggleItem);
          this.setState({
            selected: [],
            selectedNonObject: toggleItem
          }, function () {
            return _this6.onAfterSelect();
          });
        }
      } else {
        if (this.objects[toggleItem] && (!this.props.types || this.props.types.includes(this.objects[toggleItem].type))) {
          window.localStorage.removeItem("".concat(this.props.dialogName || 'App', ".selectedNonObject"));

          var selected = _toConsumableArray(this.state.selected);

          var pos = selected.indexOf(toggleItem);

          if (pos === -1) {
            selected.push(toggleItem);
            selected.sort();
          } else if (!isDouble) {
            selected.splice(pos, 1);
          }

          this.setState({
            selected: selected,
            selectedNonObject: ''
          }, function () {
            return _this6.onAfterSelect(isDouble);
          });
        }
      }
    }
    /**
     * @private
     * @param {boolean} isLast
     */

  }, {
    key: "_renderDefinedList",
    value: function _renderDefinedList(isLast) {
      var _this7 = this;

      var cols = _toConsumableArray(this.possibleCols);

      cols.unshift('id');

      if (this.props.columns && !this.props.columns.includes('buttons')) {
        var pos = cols.indexOf('buttons');

        if (pos !== -1) {
          cols.splice(pos, 1);
        }
      }

      return cols.filter(function (id) {
        return isLast && (id === 'val' || id === 'buttons') || !isLast && id !== 'val' && id !== 'buttons';
      }).map(function (id) {
        return /*#__PURE__*/_react["default"].createElement(_ListItem["default"], {
          button: true,
          onClick: function onClick() {
            if (!_this7.state.columnsAuto && id !== 'id') {
              var columns = _toConsumableArray(_this7.state.columns || []);

              var _pos = columns.indexOf(id);

              if (_pos === -1) {
                columns.push(id);
                columns.sort();
              } else {
                columns.splice(_pos, 1);
              }

              window.localStorage.setItem((_this7.props.dialogName || 'App') + '.columns', JSON.stringify(columns));

              _this7.calculateColumnsVisibility(null, columns);

              _this7.setState({
                columns: columns
              });
            }
          },
          key: id
        }, /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
          edge: "start",
          disabled: id === 'id' || _this7.state.columnsAuto,
          checked: id === 'id' || (_this7.state.columnsAuto ? _this7.visibleCols.includes(id) : _this7.state.columns && _this7.state.columns.includes(id)),
          disableRipple: true
        }), /*#__PURE__*/_react["default"].createElement(_ListItemText["default"], {
          primary: _this7.texts['filter_' + id] || _this7.props.t('ra_' + id)
        }), /*#__PURE__*/_react["default"].createElement(_ListItemSecondaryAction["default"], null, /*#__PURE__*/_react["default"].createElement(_FormControl["default"], {
          className: _this7.props.classes.columnsDialogInputWidth,
          style: {
            marginTop: 0,
            marginBottom: 0
          },
          margin: "dense"
        }, /*#__PURE__*/_react["default"].createElement(_Input["default"], {
          classes: {
            underline: 'no-underline'
          },
          placeholder: _this7.props.t('ra_Width'),
          value: _this7.state.columnsWidths[id] || '',
          onChange: function onChange(e) {
            var columnsWidths = JSON.parse(JSON.stringify(_this7.state.columnsWidths));
            columnsWidths[id] = e.target.value;
            window.localStorage.setItem((_this7.props.dialogName || 'App') + '.columnsWidths', JSON.stringify(columnsWidths));

            _this7.calculateColumnsVisibility(null, null, null, columnsWidths);

            _this7.setState({
              columnsWidths: columnsWidths
            });
          },
          autoComplete: "off"
        }))));
      });
    }
    /**
     * Renders the columns selector.
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderColumnsSelectorDialog",
    value: function renderColumnsSelectorDialog() {
      var _this8 = this;

      if (!this.state.columnsSelectorShow) {
        return null;
      } else {
        return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
          onClose: function onClose() {
            return _this8.setState({
              columnsSelectorShow: false
            });
          },
          open: true,
          classes: {
            root: _Utils["default"].clsx(this.props.classes.dialogColumns, this.props.classes['transparent_' + this.state.columnsDialogTransparent])
          }
        }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], {
          className: this.props.classes.fontSizeTitle
        }, this.props.t('ra_Configure visible columns')), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], {
          className: this.props.classes.fontSizeTitle
        }, /*#__PURE__*/_react["default"].createElement(_FormControlLabel["default"], {
          className: this.props.classes.switchColumnAuto,
          control: /*#__PURE__*/_react["default"].createElement(_Switch["default"], {
            checked: this.state.columnsAuto,
            onChange: function onChange() {
              window.localStorage.setItem((_this8.props.dialogName || 'App') + '.columnsAuto', _this8.state.columnsAuto ? 'false' : 'true');

              if (!_this8.state.columnsAuto) {
                _this8.calculateColumnsVisibility(true);

                _this8.setState({
                  columnsAuto: true
                });
              } else {
                if (!_this8.state.columns) {
                  _this8.calculateColumnsVisibility(false, _toConsumableArray(_this8.visibleCols));

                  _this8.setState({
                    columnsAuto: false,
                    columns: _toConsumableArray(_this8.visibleCols)
                  });
                } else {
                  _this8.calculateColumnsVisibility(false);

                  _this8.setState({
                    columnsAuto: false
                  });
                }
              }
            }
          }),
          label: this.props.t('ra_Auto (no custom columns)')
        }), /*#__PURE__*/_react["default"].createElement(_FormControlLabel["default"], {
          className: this.props.classes.switchColumnAuto,
          control: /*#__PURE__*/_react["default"].createElement(_Switch["default"], {
            checked: this.state.foldersFirst,
            onChange: function onChange() {
              window.localStorage.setItem((_this8.props.dialogName || 'App') + '.foldersFirst', _this8.state.foldersFirst ? 'false' : 'true');

              _this8.setState({
                foldersFirst: !_this8.state.foldersFirst
              });
            }
          }),
          label: this.props.t('ra_Folders always first')
        }), /*#__PURE__*/_react["default"].createElement(_Typography["default"], {
          classes: {
            root: this.props.classes.dialogColumnsLabel
          }
        }, this.props.t('ra_Transparent dialog')), /*#__PURE__*/_react["default"].createElement(_Slider["default"], {
          classes: {
            root: this.props.classes.width100
          },
          value: this.state.columnsDialogTransparent,
          min: 20,
          max: 100,
          step: 10,
          onChange: function onChange(event, newValue) {
            return _this8.setState({
              columnsDialogTransparent: newValue
            });
          }
        }), /*#__PURE__*/_react["default"].createElement(_List["default"], null, this._renderDefinedList(false), this.state.columnsForAdmin && Object.keys(this.state.columnsForAdmin).sort().map(function (adapter) {
          return _this8.state.columnsForAdmin[adapter].map(function (column) {
            return /*#__PURE__*/_react["default"].createElement(_ListItem["default"], {
              button: true,
              onClick: function onClick() {
                if (!_this8.state.columnsAuto) {
                  var columns = _toConsumableArray(_this8.state.columns || []);

                  var id = '_' + adapter + '_' + column.path;
                  var pos = columns.indexOf(id);

                  if (pos === -1) {
                    columns.push(id);
                    columns.sort();
                  } else {
                    columns.splice(pos, 1);
                  }

                  _this8.calculateColumnsVisibility(null, columns);

                  window.localStorage.setItem((_this8.props.dialogName || 'App') + '.columns', JSON.stringify(columns));

                  _this8.setState({
                    columns: columns
                  });
                }
              },
              key: adapter + '_' + column.name
            }, /*#__PURE__*/_react["default"].createElement(_ListItemIcon["default"], null, /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
              disabled: _this8.state.columnsAuto,
              edge: "start",
              checked: !_this8.state.columnsAuto && _this8.state.columns && _this8.state.columns.includes('_' + adapter + '_' + column.path),
              disableRipple: true
            })), /*#__PURE__*/_react["default"].createElement(_ListItemText["default"], {
              primary: column.name + ' (' + adapter + ')'
            }), /*#__PURE__*/_react["default"].createElement(_ListItemSecondaryAction["default"], null, /*#__PURE__*/_react["default"].createElement(_FormControl["default"], {
              className: _this8.props.classes.columnsDialogInputWidth,
              style: {
                marginTop: 0,
                marginBottom: 0
              },
              margin: "dense"
            }, /*#__PURE__*/_react["default"].createElement(_Input["default"], {
              classes: {
                underline: 'no-underline'
              },
              placeholder: _this8.props.t('ra_Width'),
              value: _this8.state.columnsWidths['_' + adapter + '_' + column.path] || '',
              onChange: function onChange(e) {
                var columnsWidths = JSON.parse(JSON.stringify(_this8.state.columnsWidths));
                columnsWidths['_' + adapter + '_' + column.path] = e.target.value;
                window.localStorage.setItem((_this8.props.dialogName || 'App') + '.columnsWidths', JSON.stringify(columnsWidths));

                _this8.calculateColumnsVisibility(null, null, null, columnsWidths);

                _this8.setState({
                  columnsWidths: columnsWidths
                });
              },
              autoComplete: "off"
            }))));
          });
        }), this._renderDefinedList(true))), /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, /*#__PURE__*/_react["default"].createElement(_Button["default"], {
          variant: "contained",
          onClick: function onClick() {
            return _this8.setState({
              columnsSelectorShow: false
            });
          },
          color: "primary"
        }, /*#__PURE__*/_react["default"].createElement(_Close["default"], {
          className: this.props.classes.buttonIcon
        }), this.texts['close'])));
      }
    }
    /**
     * @private
     */

  }, {
    key: "getAdditionalColumns",
    value: function getAdditionalColumns() {
      var _this9 = this;

      return this.props.socket.getAdapters().then(function (instances) {
        var columnsForAdmin = null; // find all additional columns

        instances.forEach(function (obj) {
          return columnsForAdmin = _this9.parseObjectForAdmins(columnsForAdmin, obj);
        });
        return columnsForAdmin;
      })["catch"](function (e) {
        return window.alert('Cannot get adapters: ' + e);
      });
    }
    /**
     * @private
     */

  }, {
    key: "checkUnsubscribes",
    value: function checkUnsubscribes() {
      // Remove unused subscribed
      for (var i = this.subscribes.length - 1; i >= 0; i--) {
        !this.recordStates.includes(this.subscribes[i]) && this.unsubscribe(this.subscribes[i]);
      }

      this.recordStates = [];
    }
    /**
     * Find an item.
     * @param {string} id
     * @param {string[] | undefined} [_parts]
     * @param {{ data: { name: string; id: string; }; children: never[]; } | null | undefined} [_root]
     * @param {string | undefined} [_partyId]
     * @returns {any}
     */

  }, {
    key: "findItem",
    value: function findItem(id, _parts, _root, _partyId) {
      _parts = _parts || id.split('.');
      _root = _root || this.root;

      if (!_root || !_parts.length) {
        return null;
      }

      _partyId = (_partyId ? _partyId + '.' : '') + _parts.shift();

      if (_root.children) {
        var item = _root.children.find(function (i) {
          return i.data.id === _partyId;
        });

        if (item) {
          if (item.data.id === id) {
            return item;
          } else if (_parts.length) {
            return this.findItem(id, _parts, item, _partyId);
          }
        } else {
          return null;
        }
      } else {
        return null;
      }
    }
    /**
     * Called when a state changes.
     * @param {string} id
     * @param {ioBroker.State} state
     */

  }, {
    key: "parseObjectForAdmins",
    value:
    /**
     * @private
     * @param {{ [x: string]: any; }} columnsForAdmin
     * @param {any} obj
     */
    function parseObjectForAdmins(columnsForAdmin, obj) {
      var _this10 = this;

      if (obj.common && obj.common.adminColumns && obj.common.name) {
        var columns = obj.common.adminColumns;

        if (_typeof(columns) !== 'object') {
          columns = [columns];
        }

        columns = columns.map(function (item) {
          if (_typeof(item) !== 'object') {
            return {
              path: item,
              name: item.split('.').pop()
            };
          } // string => array


          if (item.objTypes && _typeof(item.objTypes) !== 'object') {
            item.objTypes = [item.objTypes];
          } else if (!item.objTypes) {
            item.objTypes = null;
          }

          if (!item.name && item.path) {
            return {
              path: item.path,
              name: item.path.split('.').pop(),
              width: item.width,
              edit: !!item.edit,
              type: item.type,
              objTypes: item.objTypes
            };
          }

          if (_typeof(item.name) !== 'object' && item.path) {
            return {
              path: item.path,
              name: item.name,
              width: item.width,
              edit: !!item.edit,
              type: item.type,
              objTypes: item.objTypes
            };
          }

          if (!item.path) {
            console.warn("Admin columns for ".concat(obj._id, " ignored, because path not found"));
            return null;
          } else {
            return {
              path: item.path,
              name: item.name[_this10.props.lang] || item.name.en,
              width: item.width,
              edit: !!item.edit,
              type: item.type,
              objTypes: item.objTypes
            };
          }
        }).filter(function (item) {
          return item;
        });

        if (columns && columns.length) {
          columnsForAdmin = columnsForAdmin || {};
          columnsForAdmin[obj.common.name] = columns.sort(function (a, b) {
            return a.path > b.path ? -1 : a.path < b.path ? 1 : 0;
          });
        }
      } else if (obj.common && obj.common.name && columnsForAdmin && columnsForAdmin[obj.common.name]) {
        delete columnsForAdmin[obj.common.name];
      }

      return columnsForAdmin;
    }
    /**
     * @param {string} id
     * @param {ioBroker.Object} obj
     * @param {import('./types').OldObject} oldObj
     */

  }, {
    key: "subscribe",
    value:
    /**
     * @private
     * @param {string} id
     */
    function subscribe(id) {
      if (this.subscribes.indexOf(id) === -1) {
        this.subscribes.push(id);
        console.log('+ subscribe ' + id);

        if (!this.pausedSubscribes) {
          this.props.socket.subscribeState(id, this.onStateChange);
        }
      }
    }
    /**
     * @private
     * @param {string} id
     */

  }, {
    key: "unsubscribe",
    value: function unsubscribe(id) {
      var pos = this.subscribes.indexOf(id);

      if (pos !== -1) {
        this.subscribes.splice(pos, 1);

        if (this.states[id]) {
          delete this.states[id];
        }

        console.log('- unsubscribe ' + id);
        this.props.socket.unsubscribeState(id, this.onStateChange);

        if (this.pausedSubscribes) {
          console.warn('Unsubscribe during pause?');
        }
      }
    }
    /**
     * @private
     * @param {boolean} isPause
     */

  }, {
    key: "pauseSubscribe",
    value: function pauseSubscribe(isPause) {
      var _this11 = this;

      if (!this.pausedSubscribes && isPause) {
        this.pausedSubscribes = true;
        this.subscribes.forEach(function (id) {
          return _this11.props.socket.unsubscribeState(id, _this11.onStateChange);
        });
      } else if (this.pausedSubscribes && !isPause) {
        this.pausedSubscribes = false;
        this.subscribes.forEach(function (id) {
          return _this11.props.socket.subscribeState(id, _this11.onStateChange);
        });
      }
    }
    /**
     * @private
     * @param {string} [name]
     * @param {boolean} [value]
     */

  }, {
    key: "onFilter",
    value: function onFilter(name, value) {
      var _this12 = this;

      this.filterTimer = null;
      var filter = {};
      Object.keys(this.filterRefs).forEach(function (name) {
        if (_this12.filterRefs[name] && _this12.filterRefs[name].current) {
          for (var i = 0; i < _this12.filterRefs[name].current.children.length; i++) {
            if (_this12.filterRefs[name].current.children[i].tagName === 'INPUT') {
              filter[name] = _this12.filterRefs[name].current.children[i].value;
              break;
            }
          }
        }
      });

      if (name) {
        filter[name] = value;

        if (name === 'expertMode') {
          window.sessionStorage.setItem('App.expertMode', value ? 'true' : 'false');
        }
      }

      filter = Object.assign({}, this.state.filter, filter);

      if (JSON.stringify(this.state.filter) !== JSON.stringify(filter)) {
        window.localStorage.setItem((this.props.dialogName || 'App') + '.objectFilter', JSON.stringify(filter));
        this.setState({
          filter: filter
        }, function () {
          return _this12.props.onFilterChanged && _this12.props.onFilterChanged(filter);
        });
      }
    }
  }, {
    key: "clearFilter",
    value: function clearFilter() {
      var _this13 = this;

      var filter = {};
      Object.keys(this.filterRefs).forEach(function (name) {
        if (_this13.filterRefs[name] && _this13.filterRefs[name].current) {
          for (var i = 0; i < _this13.filterRefs[name].current.childNodes.length; i++) {
            var item = _this13.filterRefs[name].current.childNodes[i];

            if (item.tagName === 'INPUT') {
              filter[name] = '';
              item.value = '';
              break;
            }
          }
        }
      });
      filter = Object.assign({}, this.state.filter, filter);

      if (JSON.stringify(this.state.filter) !== JSON.stringify(filter)) {
        window.localStorage.setItem((this.props.dialogName || 'App') + '.objectFilter', JSON.stringify(filter));
        this.setState({
          filter: filter,
          filterKey: this.state.filterKey + 1
        }, function () {
          return _this13.props.onFilterChanged && _this13.props.onFilterChanged(filter);
        });
      }
    }
  }, {
    key: "isFilterEmpty",
    value: function isFilterEmpty() {
      var _this14 = this;

      var someNotEmpty = Object.keys(this.state.filter).find(function (attr) {
        return attr !== 'expertMode' && _this14.state.filter[attr];
      });
      return !someNotEmpty;
    }
    /**
     * @private
     * @param {string} name
     */

  }, {
    key: "getFilterInput",
    value: function getFilterInput(name) {
      var _this15 = this,
          _this$filterRefs$name,
          _this$filterRefs$name2;

      return /*#__PURE__*/_react["default"].createElement(_FormControl["default"], {
        className: _Utils["default"].clsx(this.props.classes.headerCellInput, this.props.classes.filterInput),
        key: name + '_' + this.state.filterKey //style={{ marginTop: 0, marginBottom: 0 }}
        ,
        margin: "dense"
      }, /*#__PURE__*/_react["default"].createElement(_Input["default"], {
        ref: this.filterRefs[name],
        classes: {
          underline: 'no-underline'
        },
        id: name,
        placeholder: this.texts['filter_' + name],
        defaultValue: this.state.filter[name],
        onChange: function onChange(e) {
          _this15.filterTimer && clearTimeout(_this15.filterTimer);
          _this15.filterTimer = setTimeout(function () {
            return _this15.onFilter();
          }, 400);
        },
        autoComplete: "off"
      }), (_this$filterRefs$name = this.filterRefs[name]) !== null && _this$filterRefs$name !== void 0 && (_this$filterRefs$name2 = _this$filterRefs$name.current) !== null && _this$filterRefs$name2 !== void 0 && _this$filterRefs$name2.firstChild.value ? /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          position: 'absolute',
          right: 0
        }
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        size: "small",
        onClick: function onClick() {
          _this15.filterRefs[name].current.firstChild.value = '';

          _this15.onFilter(name, '');
        }
      }, /*#__PURE__*/_react["default"].createElement(_Close["default"], null))) : null);
    }
    /**
     * @private
     * @param {string} name
     * @param {any[]} values
     */

  }, {
    key: "getFilterSelect",
    value: function getFilterSelect(name, values) {
      var _this16 = this,
          _this$filterRefs$name3,
          _this$filterRefs$name4,
          _this$filterRefs$name5;

      var hasIcons = !!values.find(function (item) {
        return item.icon;
      });
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          position: 'relative'
        }
      }, /*#__PURE__*/_react["default"].createElement(_Select["default"], {
        key: name + '_' + this.state.filterKey,
        ref: this.filterRefs[name],
        className: this.props.classes.headerCellInput + ' no-underline',
        onChange: function onChange(e) {
          _this16.filterTimer && clearTimeout(_this16.filterTimer);
          _this16.filterTimer = setTimeout(function () {
            return _this16.onFilter();
          }, 400);
        },
        defaultValue: this.state.filter[name] || '',
        inputProps: {
          name: name,
          id: name
        },
        displayEmpty: true
      }, /*#__PURE__*/_react["default"].createElement(_MenuItem["default"], {
        key: "empty",
        value: ""
      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: this.props.classes.selectNone
      }, this.texts['filter_' + name])), values.map(function (item) {
        var id;
        var name;
        var icon;

        if (_typeof(item) === 'object') {
          id = item.value;
          name = item.name;
          icon = item.icon;
        } else {
          id = item;
          name = item;
        }

        return /*#__PURE__*/_react["default"].createElement(_MenuItem["default"], {
          className: _this16.props.classes.headerCellSelectItem,
          key: id,
          value: id
        }, icon ? icon : hasIcons ? /*#__PURE__*/_react["default"].createElement("div", {
          className: "itemIcon"
        }) : null, name);
      })), (_this$filterRefs$name3 = this.filterRefs[name]) !== null && _this$filterRefs$name3 !== void 0 && (_this$filterRefs$name4 = _this$filterRefs$name3.current) !== null && _this$filterRefs$name4 !== void 0 && (_this$filterRefs$name5 = _this$filterRefs$name4.childNodes[1]) !== null && _this$filterRefs$name5 !== void 0 && _this$filterRefs$name5.value ? /*#__PURE__*/_react["default"].createElement("div", {
        className: this.props.classes.backgroundDef,
        style: {
          position: 'absolute',
          top: 0,
          right: 0,
          borderRadius: 20
        }
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        size: "small",
        onClick: function onClick() {
          var newFilter = _objectSpread({}, _this16.state.filter);

          newFilter[name] = '';
          _this16.filterRefs[name].current.childNodes[1].value = "";
          window.localStorage.setItem((_this16.props.dialogName || 'App') + '.objectFilter', JSON.stringify(newFilter));

          _this16.setState({
            filter: newFilter,
            filterKey: _this16.state.filterKey + 1
          }, function () {
            return _this16.props.onFilterChanged && _this16.props.onFilterChanged(newFilter);
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_Close["default"], null))) : null);
    }
    /**
     * @private
     */

  }, {
    key: "getFilterSelectRole",
    value: function getFilterSelectRole() {
      return this.getFilterSelect('role', this.info.roles);
    }
    /**
     * @private
     */

  }, {
    key: "getFilterSelectRoom",
    value: function getFilterSelectRoom() {
      var _this17 = this;

      var rooms = this.info.roomEnums.map(function (id) {
        return {
          name: getName(_this17.objects[id] && _this17.objects[id].common && _this17.objects[id].common.name || id.split('.').pop()),
          value: id
        };
      });
      return this.getFilterSelect('room', rooms);
    }
    /**
     * @private
     */

  }, {
    key: "getFilterSelectFunction",
    value: function getFilterSelectFunction() {
      var _this18 = this;

      var func = this.info.funcEnums.map(function (id) {
        return {
          name: getName(_this18.objects[id] && _this18.objects[id].common && _this18.objects[id].common.name || id.split('.').pop()),
          value: id
        };
      });
      return this.getFilterSelect('func', func);
    }
    /**
     * @private
     */

  }, {
    key: "getFilterSelectType",
    value: function getFilterSelectType() {
      var types = this.info.types.map(function (type) {
        return {
          name: type,
          value: type,
          icon: ITEM_IMAGES[type]
        };
      });
      return this.getFilterSelect('type', types);
    }
    /**
     * @private
     */

  }, {
    key: "getFilterSelectCustoms",
    value: function getFilterSelectCustoms() {
      if (this.info.customs.length) {
        return this.getFilterSelect('custom', this.info.customs);
      } else {
        return null;
      }
    }
    /**
     * @private
     * @param {any} [root]
     * @param {any[]} [expanded]
     */

  }, {
    key: "onExpandAll",
    value: function onExpandAll(root, expanded) {
      var _this19 = this;

      root = root || this.root;
      expanded = expanded || [];
      root.children && root.children.forEach(function (item) {
        if (item.data.hasVisibleChildren) {
          expanded.push(item.data.id);

          _this19.onExpandAll(item, expanded);
        }
      });

      if (root === this.root) {
        expanded.sort();
        window.localStorage.setItem((this.props.dialogName || 'App') + '.objectExpanded', JSON.stringify(expanded));
        this.setState({
          expanded: expanded
        });
      }
    }
    /**
     * @private
     */

  }, {
    key: "onCollapseAll",
    value: function onCollapseAll() {
      window.localStorage.setItem((this.props.dialogName || 'App') + '.objectExpanded', JSON.stringify([]));
      this.setState({
        expanded: [],
        depth: 0
      });
    }
    /**
     * @private
     * @param {any} root
     * @param {number} depth
     * @param {any[]} expanded
     */

  }, {
    key: "expandDepth",
    value: function expandDepth(root, depth, expanded) {
      var _this20 = this;

      root = root || this.root;

      if (depth > 0) {
        if (root.children) {
          root.children.forEach(function (item) {
            if (item.data.visible || item.data.hasVisibleChildren) {
              if (!binarySearch(expanded, item.data.id)) {
                expanded.push(item.data.id);
                expanded.sort();
              }

              if (depth - 1 > 0) {
                _this20.expandDepth(item, depth - 1, expanded);
              }
            }
          });
        }
      }
    }
    /**
     * @private
     * @param {number} depth
     * @param {any[]} expanded
     */

  }, {
    key: "collapseDepth",
    value: function collapseDepth(depth, expanded) {
      return expanded.filter(function (id) {
        return id.split('.').length <= depth;
      });
    }
    /**
     * @private
     */

  }, {
    key: "onExpandVisible",
    value: function onExpandVisible() {
      if (this.state.depth < 9) {
        var depth = this.state.depth + 1;

        var expanded = _toConsumableArray(this.state.expanded);

        this.expandDepth(this.root, depth, expanded);
        window.localStorage.setItem((this.props.dialogName || 'App') + '.objectExpanded', JSON.stringify(expanded));
        this.setState({
          depth: depth,
          expanded: expanded
        });
      }
    }
    /**
     * @private
     */

  }, {
    key: "onStatesViewVisible",
    value: function onStatesViewVisible() {
      var statesView = !this.state.statesView;
      window.localStorage.setItem((this.props.dialogName || 'App') + '.objectStatesView', JSON.stringify(statesView));
      this.setState({
        statesView: statesView
      });
    }
    /**
     * @private
     */

  }, {
    key: "onCollapseVisible",
    value: function onCollapseVisible() {
      if (this.state.depth > 0) {
        var depth = this.state.depth - 1;
        var expanded = this.collapseDepth(depth, this.state.expanded);
        window.localStorage.setItem((this.props.dialogName || 'App') + '.objectExpanded', JSON.stringify(expanded));
        this.setState({
          depth: depth,
          expanded: expanded
        });
      }
    }
    /**
     * @private
     * @param {string} id
     */

  }, {
    key: "_getSelectedIdsForExport",
    value: function _getSelectedIdsForExport() {
      if (this.state.selected.length || this.state.selectedNonObject) {
        var result = [];
        var keys = Object.keys(this.objects);
        var id = this.state.selected[0] || this.state.selectedNonObject;
        var idDot = id + '.';
        var idLen = idDot.length;

        for (var k = 0; k < keys.length; k++) {
          var key = keys[k];

          if (id === key || key.startsWith(idDot)) {
            result.push(key);
          }

          if (key.substring(0, idLen) > idDot) {
            break;
          }
        }

        return result;
      } else {
        return [];
      }
    }
  }, {
    key: "_exportObjects",
    value: function _exportObjects(isAll) {
      var _this21 = this;

      if (isAll) {
        generateFile('allObjects.json', this.objects);
      } else if (this.state.selected.length || this.state.selectedNonObject) {
        var result = {};
        var id = this.state.selected[0] || this.state.selectedNonObject;

        this._getSelectedIdsForExport().forEach(function (key) {
          result[key] = JSON.parse(JSON.stringify(_this21.objects[key])); // add enum information

          if (result[key].common) {
            var enums = _this21.getEnumsForId(key);

            if (enums) {
              result[key].common.enums = enums;
            }
          }
        });

        generateFile(id + '.json', result);
      } else {
        window.alert(this.props.t('ra_Save of objects-tree is not possible'));
      }
    }
  }, {
    key: "renderExportDialog",
    value: function renderExportDialog() {
      var _this22 = this;

      if (this.state.showExportDialog === false) {
        return null;
      } else {
        return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
          open: true
        }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], null, this.props.t('Select type of export')), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], null, /*#__PURE__*/_react["default"].createElement(_DialogContentText["default"], null, this.props.t('You can export all objects or just the selected branch.'), /*#__PURE__*/_react["default"].createElement("br", null), this.props.t('Selected %s object(s)', this.state.showExportDialog))), /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, /*#__PURE__*/_react["default"].createElement(_Button["default"], {
          variant: "contained",
          onClick: function onClick() {
            return _this22.setState({
              showExportDialog: false
            }, function () {
              return _this22._exportObjects(true);
            });
          }
        }, this.props.t('All objects')), /*#__PURE__*/_react["default"].createElement(_Button["default"], {
          variant: "contained",
          autoFocus: true,
          color: "primary",
          onClick: function onClick() {
            return _this22.setState({
              showExportDialog: false
            }, function () {
              return _this22._exportObjects(false);
            });
          }
        }, this.props.t('Only selected')), /*#__PURE__*/_react["default"].createElement(_Button["default"], {
          variant: "contained",
          onClick: function onClick() {
            return _this22.setState({
              showExportDialog: false
            });
          }
        }, this.props.t('Cancel'))));
      }
    }
    /**
     * @private
     * @param {object} evt
     */

  }, {
    key: "getToolbar",
    value:
    /**
     * Renders the toolbar.
     * @returns {JSX.Element}
     */
    function getToolbar() {
      var _this23 = this;

      var allowObjectCreation = false;

      if (this.state.selected.length || this.state.selectedNonObject) {
        var id = this.state.selected[0] || this.state.selectedNonObject;

        if (id.split('.').length < 2 || this.objects[id] && this.objects[id].type === 'state') {
          allowObjectCreation = false;
        } else {
          if (this.props.expertMode) {
            allowObjectCreation = true;
          } else if (id.startsWith('alias.0') || id.startsWith('0_userdata')) {
            allowObjectCreation = true;
          }
        }
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          display: 'flex',
          width: '100%',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          display: 'flex',
          width: '100%',
          alignItems: 'center'
        }
      }, /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Refresh tree')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        onClick: function onClick() {
          return _this23.refreshComponent();
        }
      }, /*#__PURE__*/_react["default"].createElement(_Refresh["default"], null))), this.props.showExpertButton && /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_expertMode')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "expertMode",
        color: this.state.filter.expertMode ? 'secondary' : 'default',
        onClick: function onClick() {
          return _this23.onFilter('expertMode', !_this23.state.filter.expertMode);
        }
      }, /*#__PURE__*/_react["default"].createElement(_IconExpert["default"], null))), !this.props.disableColumnSelector && /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Configure visible columns')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "columnSelector",
        color: this.state.columnsAuto ? 'primary' : 'default',
        onClick: function onClick() {
          return _this23.setState({
            columnsSelectorShow: true
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_ViewColumn["default"], null))), this.state.expandAllVisible && /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Expand all nodes')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "expandAll",
        onClick: function onClick() {
          return _this23.onExpandAll();
        }
      }, /*#__PURE__*/_react["default"].createElement(_IconOpen["default"], null))), /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Collapse all nodes')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "collapseAll",
        onClick: function onClick() {
          return _this23.onCollapseAll();
        }
      }, /*#__PURE__*/_react["default"].createElement(_IconClosed["default"], null))), /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Expand one step node')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "expandVisible",
        color: "primary",
        onClick: function onClick() {
          return _this23.onExpandVisible();
        }
      }, /*#__PURE__*/_react["default"].createElement(StyledBadge, {
        badgeContent: this.state.depth,
        color: "secondary"
      }, /*#__PURE__*/_react["default"].createElement(_IconOpen["default"], null)))), /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Collapse one step node')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "collapseVisible",
        color: "primary",
        onClick: function onClick() {
          return _this23.onCollapseVisible();
        }
      }, /*#__PURE__*/_react["default"].createElement(StyledBadge, {
        badgeContent: this.state.depth,
        color: "secondary"
      }, /*#__PURE__*/_react["default"].createElement(_IconClosed["default"], null)))), this.props.objectStatesView && /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Toggle the states view')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        onClick: function onClick() {
          return _this23.onStatesViewVisible();
        }
      }, /*#__PURE__*/_react["default"].createElement(_LooksOne["default"], {
        color: this.state.statesView ? 'primary' : 'inherit'
      }))), this.props.objectAddBoolean ? /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.toolTipObjectCreating()
      }, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        disabled: !allowObjectCreation,
        onClick: function onClick() {
          return _this23.setState({
            modalNewObj: true
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_Add["default"], null)))) : null, this.props.objectImportExport && /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Add objects tree from JSON file')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        onClick: function onClick() {
          var input = document.createElement('input');
          input.setAttribute('type', 'file');
          input.setAttribute('id', 'files');
          input.setAttribute('opacity', 0);
          input.addEventListener('change', function (e) {
            return _this23.handleJsonUpload(e);
          }, false);
          input.click();
        }
      }, /*#__PURE__*/_react["default"].createElement(_Publish["default"], null))), this.props.objectImportExport && (!!this.state.selected.length || this.state.selectedNonObject) && /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Save objects tree as JSON file')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        onClick: function onClick() {
          return _this23.setState({
            showExportDialog: _this23._getSelectedIdsForExport().length
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_Publish["default"], {
        style: {
          transform: 'rotate(180deg)'
        }
      })))), !!this.props.objectBrowserEditObject && /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          display: 'flex',
          whiteSpace: 'nowrap'
        }
      }, "".concat(this.props.t('ra_Objects'), ": ").concat(Object.keys(this.info.objects).length, ", ").concat(this.props.t('ra_States'), ": ").concat(Object.keys(this.info.objects).filter(function (el) {
        return _this23.info.objects[el].type === 'state';
      }).length)), this.props.objectEditBoolean && /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        title: this.props.t('ra_Edit custom config')
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        onClick: function onClick() {
          // get all visible states
          var ids = getVisibleItems(_this23.root, 'state', _this23.objects);

          if (ids.length) {
            _this23.pauseSubscribe(true);

            if (ids.length === 1) {
              window.localStorage.setItem((_this23.props.dialogName || 'App') + '.objectSelected', _this23.state.selected[0]);
              _this23.props.router && _this23.props.router.doNavigate(null, 'custom', _this23.state.selected[0]);
            }

            _this23.setState({
              customDialog: ids
            });
          } else {
            _this23.setState({
              toast: _this23.props.t('ra_please select object')
            });
          }
        }
      }, /*#__PURE__*/_react["default"].createElement(_Build["default"], null))));
    }
    /**
     * @private
     * @param {string} id
     */

  }, {
    key: "toggleExpanded",
    value: function toggleExpanded(id) {
      var expanded = JSON.parse(JSON.stringify(this.state.expanded));
      var pos = expanded.indexOf(id);

      if (pos === -1) {
        expanded.push(id);
        expanded.sort();
      } else {
        expanded.splice(pos, 1);
      }

      window.localStorage.setItem((this.props.dialogName || 'App') + '.objectExpanded', JSON.stringify(expanded));
      this.setState({
        expanded: expanded
      });
    }
    /**
     * @private
     * @param {Event} e
     * @param {string} text
     */

  }, {
    key: "onCopy",
    value: function onCopy(e, text) {
      e.stopPropagation();
      e.preventDefault();
      (0, _copyToClipboard["default"])(text);

      if (text.length < 50) {
        this.setState({
          toast: this.props.t('ra_Copied %s', text)
        });
      } else {
        this.setState({
          toast: this.props.t('ra_Copied')
        });
      }
    }
  }, {
    key: "renderColumnButtons",
    value:
    /**
     * @param {string} id
     * @param {{ data: { obj: { type: string; }; hasCustoms: any; }; }} item
     * @param {{ cellButtonsButton: string | undefined; cellButtonsButtonAlone: any; cellButtonsButtonIcon: string | undefined; cellButtonsButtonWithCustoms: any; }} classes
     */
    function renderColumnButtons(id, item, classes) {
      var _this24 = this,
          _item$children2,
          _item$data$obj$common;

      if (!item.data.obj) {
        return this.props.onObjectDelete || this.props.objectEditOfAccessControl ? /*#__PURE__*/_react["default"].createElement("div", {
          className: classes.buttonDiv
        }, this.props.expertMode && this.props.objectEditOfAccessControl ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
          className: _Utils["default"].clsx(classes.cellButtonsButton, classes.cellButtonsEmptyButton, classes.cellButtonMinWidth),
          onClick: function onClick() {
            return _this24.setState({
              modalEditOfAccess: true,
              modalEmptyId: id,
              modalEditOfAccessObjData: item.data
            });
          }
        }, "---") : null, this.props.onObjectDelete && item.children && item.children.length ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
          className: _Utils["default"].clsx(classes.cellButtonsButton, classes.cellButtonsButtonAlone),
          size: "small",
          "aria-label": "delete",
          title: this.texts.deleteObject,
          onClick: function onClick() {
            return _this24.props.onObjectDelete(id, !!(item.children && item.children.length), false);
          }
        }, /*#__PURE__*/_react["default"].createElement(_Delete["default"], {
          className: classes.cellButtonsButtonIcon
        })) : null) : null;
      }

      item.data.aclTooltip = item.data.aclTooltip || this.renderTooltipAccessControl(item.data.obj.acl);
      var acl = item.data.obj.acl ? item.data.obj.type === 'state' ? item.data.obj.acl.state : item.data.obj.acl.object : 0;
      var aclSystemConfig = item.data.obj.acl && (item.data.obj.type === 'state' ? this.systemConfig.common.defaultNewAcl.state : this.systemConfig.common.defaultNewAcl.object);
      return [this.props.expertMode && this.props.objectEditOfAccessControl ? /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        key: "acl",
        title: item.data.aclTooltip
      }, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        className: classes.cellButtonMinWidth,
        onClick: function onClick() {
          return _this24.setState({
            modalEditOfAccess: true,
            modalEditOfAccessObjData: item.data
          });
        }
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.aclText
      }, isNaN(Number(acl).toString(16)) ? Number(aclSystemConfig).toString(16) : Number(acl).toString(16)))) : /*#__PURE__*/_react["default"].createElement("div", {
        key: "aclEmpty",
        className: classes.cellButtonMinWidth
      }), /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "edit",
        className: classes.cellButtonsButton,
        size: "small",
        "aria-label": "edit",
        title: this.texts.editObject,
        onClick: function onClick() {
          window.localStorage.setItem("".concat(_this24.props.dialogName || 'App', ".objectSelected"), id);

          _this24.setState({
            editObjectDialog: id
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_Edit["default"], {
        className: classes.cellButtonsButtonIcon
      })), this.props.onObjectDelete && ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length || !((_item$data$obj$common = item.data.obj.common) !== null && _item$data$obj$common !== void 0 && _item$data$obj$common.dontDelete)) ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        key: "delete",
        className: classes.cellButtonsButton,
        size: "small",
        "aria-label": "delete",
        onClick: function onClick() {
          var _item$children3, _item$data$obj$common2;

          return _this24.props.onObjectDelete(id, !!((_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length), !((_item$data$obj$common2 = item.data.obj.common) !== null && _item$data$obj$common2 !== void 0 && _item$data$obj$common2.dontDelete));
        },
        title: this.texts.deleteObject
      }, /*#__PURE__*/_react["default"].createElement(_Delete["default"], {
        className: classes.cellButtonsButtonIcon
      })) : null, this.props.objectCustomDialog && this.info.hasSomeCustoms && item.data.obj.type === 'state' ? /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
        className: _Utils["default"].clsx(classes.cellButtonsButton, item.data.hasCustoms && classes.cellButtonsButtonWithCustoms),
        key: "custom",
        size: "small",
        "aria-label": "config",
        title: this.texts.customConfig,
        onClick: function onClick() {
          window.localStorage.setItem((_this24.props.dialogName || 'App') + '.objectSelected', id);

          _this24.pauseSubscribe(true);

          _this24.props.router && _this24.props.router.doNavigate(null, 'customs', id);

          _this24.setState({
            customDialog: [id]
          });
        }
      }, /*#__PURE__*/_react["default"].createElement(_Settings["default"], {
        className: classes.cellButtonsButtonIcon
      })) : null];
    }
    /**
     * @private
     * @param {string} id
     */

  }, {
    key: "readHistory",
    value: function readHistory(id) {
      var _this25 = this;

      /*interface GetHistoryOptions {
          instance?: string;
          start?: number;
          end?: number;
          step?: number;
          count?: number;
          from?: boolean;
          ack?: boolean;
          q?: boolean;
          addID?: boolean;
          limit?: number;
          ignoreNull?: boolean;
          sessionId?: any;
          aggregate?: 'minmax' | 'min' | 'max' | 'average' | 'total' | 'count' | 'none';
      }*/
      if (window.sparkline && this.defaultHistory && this.objects[id] && this.objects[id].common && this.objects[id].common.custom && this.objects[id].common.custom[this.defaultHistory]) {
        var now = new Date();
        now.setHours(now.getHours() - 24);
        now.setMinutes(0);
        now.setSeconds(0);
        now.setMilliseconds(0);
        var nowMs = now.getTime();
        this.props.socket.getHistory(id, {
          instance: this.defaultHistory,
          start: nowMs,
          end: Date.now(),
          step: 3600000,
          from: false,
          ack: false,
          q: false,
          addID: false,
          aggregate: 'minmax'
        }).then(function (values) {
          var sparks = window.document.getElementsByClassName('sparkline');

          for (var s = 0; s < sparks.length; s++) {
            if (sparks[s].dataset.id === id) {
              var v = prepareSparkData(values, nowMs);
              window.sparkline.sparkline(sparks[s], v);
              break;
            }
          }
        })["catch"](function (e) {
          return _this25.showError(e);
        });
      }
    }
    /**
     * @private
     * @param {string} id
     * @param {any} item
     * @param {Record<string, any>} classes
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderColumnValue",
    value: function renderColumnValue(id, item, classes) {
      var _this26 = this;

      if (!item.data.obj || !this.states) {
        return null;
      }

      if (!this.states[id]) {
        if (item.data.obj.type === 'state') {
          this.recordStates.push(id);
          this.states[id] = {
            val: null
          };
          this.subscribe(id);
        }

        return null;
      } else {
        this.recordStates.push(id);
      }

      var state = this.states[id];
      var info = item.data.state;

      if (!info) {
        info = item.data.state = item.data.state || formatValue(id, state, item.data.obj, this.texts, this.props.dateFormat, this.props.isFloatComma);
        info.valFull = info.valFull.map(function (item) {
          if (item.t === _this26.texts.quality && state.q) {
            return [/*#__PURE__*/_react["default"].createElement("div", {
              className: classes.cellValueTooltipBoth,
              key: item.t
            }, item.t, ": ", item.v), //<div className={classes.cellValueTooltipValue} key={item.t + '_v'}>{item.v}</div>,
            !item.nbr ? /*#__PURE__*/_react["default"].createElement("br", {
              key: item.t + '_br'
            }) : null];
          } else {
            return [/*#__PURE__*/_react["default"].createElement("div", {
              className: classes.cellValueTooltipTitle,
              key: item.t
            }, item.t, ":"), /*#__PURE__*/_react["default"].createElement("div", {
              className: classes.cellValueTooltipValue,
              key: item.t + '_v'
            }, item.v), !item.nbr ? /*#__PURE__*/_react["default"].createElement("br", {
              key: item.t + '_br'
            }) : null];
          }
        });

        if (this.defaultHistory && this.objects[id] && this.objects[id].common && this.objects[id].common.custom && this.objects[id].common.custom[this.defaultHistory]) {
          info.valFull.push( /*#__PURE__*/_react["default"].createElement("svg", {
            key: "sparkline",
            className: "sparkline",
            "data-id": id,
            style: {
              fill: '#3d85de'
            },
            width: "200",
            height: "30",
            strokeWidth: "3"
          }));
        }

        var copyText = info.valText.v || '';
        info.val = copyText;
        info.valText = [/*#__PURE__*/_react["default"].createElement("span", {
          className: classes.newValue || classes.newValue,
          key: "".concat(info.valText.v.toString(), "valText")
        }, info.valText.v.toString()), info.valText.u ? /*#__PURE__*/_react["default"].createElement("span", {
          className: _Utils["default"].clsx(classes.cellValueTextUnit, classes.newValue),
          key: "".concat(info.valText.v.toString(), "unit")
        }, info.valText.u) : null, info.valText.s !== undefined ? /*#__PURE__*/_react["default"].createElement("span", {
          className: _Utils["default"].clsx(classes.cellValueTextState, classes.newValue),
          key: "".concat(info.valText.v.toString(), "states")
        }, "(", info.valText.s, ")") : null, /*#__PURE__*/_react["default"].createElement(_IconCopy["default"], {
          className: _Utils["default"].clsx(classes.cellButtonsValueButton, 'copyButton', classes.cellButtonsValueButtonCopy),
          onClick: function onClick(e) {
            return _this26.onCopy(e, copyText);
          },
          key: "cc"
        }) //<IconEdit className={ Utils.clsx(classes.cellButtonsValueButton, 'copyButton', classes.cellButtonsValueButtonEdit) } key="ce" />
        ];
      }

      var val = info.valText;

      if (!this.props.expertMode && item.data.button) {
        val = /*#__PURE__*/_react["default"].createElement(_RoomService["default"], {
          className: _Utils["default"].clsx(this.props.classes.cellValueButton, !this.states[id] || !this.states[id].val ? this.props.classes.cellValueButtonFalse : '')
        });
      }

      return /*#__PURE__*/_react["default"].createElement(_Tooltip["default"], {
        key: "value",
        title: info.valFull,
        classes: {
          tooltip: this.props.classes.cellValueTooltip,
          popper: this.props.classes.cellValueTooltipBox
        },
        onOpen: function onOpen() {
          return _this26.readHistory(id);
        }
      }, /*#__PURE__*/_react["default"].createElement("div", {
        style: info.style,
        className: classes.cellValueText
      }, val));
    }
    /**
     * @private
     * @returns {undefined}
     */

  }, {
    key: "_syncEnum",
    value: function _syncEnum(id, enumIds, newArray, cb) {
      var _this27 = this;

      if (!enumIds || !enumIds.length) {
        return cb && cb();
      } else {
        var _this$info$objects$en;

        var enumId = enumIds.pop();
        var promises = [];

        if ((_this$info$objects$en = this.info.objects[enumId]) !== null && _this$info$objects$en !== void 0 && _this$info$objects$en.common) {
          var _this$info$objects$en2, _this$info$objects$en3;

          if ((_this$info$objects$en2 = this.info.objects[enumId].common.members) !== null && _this$info$objects$en2 !== void 0 && _this$info$objects$en2.length) {
            var pos = this.info.objects[enumId].common.members.indexOf(id);

            if (pos !== -1 && !newArray.includes(enumId)) {
              // delete from members
              var obj = JSON.parse(JSON.stringify(this.info.objects[enumId]));
              obj.common.members.splice(pos, 1);
              promises.push(this.props.socket.setObject(enumId, obj).then(function () {
                return _this27.info.objects[enumId] = obj;
              })["catch"](function (e) {
                return _this27.showError(e);
              }));
            }
          } // add to it


          if (newArray.includes(enumId) && !((_this$info$objects$en3 = this.info.objects[enumId].common.members) !== null && _this$info$objects$en3 !== void 0 && _this$info$objects$en3.includes(id))) {
            // add to object
            var _obj = JSON.parse(JSON.stringify(this.info.objects[enumId]));

            _obj.common.members = _obj.common.members || [];

            _obj.common.members.push(id);

            _obj.common.members.sort();

            promises.push(this.props.socket.setObject(enumId, _obj).then(function () {
              return _this27.info.objects[enumId] = _obj;
            })["catch"](function (e) {
              return _this27.showError(e);
            }));
          }
        }

        Promise.all(promises).then(function () {
          return setTimeout(function () {
            return _this27._syncEnum(id, enumIds, newArray, cb);
          }, 0);
        });
      }
    }
    /**
     * @private
     * @returns {Promise}
     */

  }, {
    key: "syncEnum",
    value: function syncEnum(id, enumName, newArray) {
      var _this28 = this;

      var toCheck = _toConsumableArray(this.info[enumName === 'func' ? 'funcEnums' : 'roomEnums']);

      return new Promise(function (resolve) {
        return _this28._syncEnum(id, toCheck, newArray, function (error) {
          error && _this28.showError(error); // force update of object

          resolve();
        });
      });
    }
    /**
     * @private
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderEnumDialog",
    value: function renderEnumDialog() {
      var _this29 = this;

      if (this.state.enumDialog) {
        var type = this.state.enumDialog.type;
        var item = this.state.enumDialog.item;
        var itemEnums = this.state.enumDialogEnums;
        var enumsOriginal = this.state.enumDialog.enumsOriginal;
        var enums = (type === 'room' ? this.info.roomEnums : this.info.funcEnums).map(function (id) {
          return {
            name: getName(_this29.objects[id] && _this29.objects[id].common && _this29.objects[id].common.name || id.split('.').pop(), _this29.props.lang),
            value: id,
            icon: getSelectIdIcon(_this29.objects, id, _this29.imagePrefix)
          };
        });
        enums.forEach(function (item) {
          if (item.icon) {
            item.icon = /*#__PURE__*/_react["default"].createElement("div", {
              className: _this29.props.classes.enumIconDiv
            }, /*#__PURE__*/_react["default"].createElement("img", {
              src: item.icon,
              className: _this29.props.classes.enumIcon,
              alt: item.name
            }));
          }
        }); // const hasIcons = !!enums.find(item => item.icon);

        return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
          className: this.props.classes.enumDialog,
          onClose: function onClose() {
            return _this29.setState({
              enumDialog: null
            });
          },
          "aria-labelledby": "enum-dialog-title",
          open: true
        }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], {
          id: "enum-dialog-title"
        }, type === 'func' ? this.props.t('ra_Define functions') : this.props.t('ra_Define rooms'), /*#__PURE__*/_react["default"].createElement(_Fab["default"], {
          className: this.props.classes.enumButton,
          color: "primary",
          disabled: JSON.stringify(enumsOriginal) === JSON.stringify(itemEnums),
          size: "small",
          onClick: function onClick() {
            return _this29.syncEnum(item.data.id, type, itemEnums).then(function () {
              return _this29.setState({
                enumDialog: null,
                enumDialogEnums: null
              });
            });
          }
        }, /*#__PURE__*/_react["default"].createElement(_Check["default"], null))), /*#__PURE__*/_react["default"].createElement(_List["default"], {
          classes: {
            root: this.props.classes.enumList
          }
        }, enums.map(function (item) {
          var id;
          var name;
          var icon;

          if (_typeof(item) === 'object') {
            id = item.value;
            name = item.name;
            icon = item.icon;
          } else {
            id = item;
            name = item;
          }

          var labelId = "checkbox-list-label-".concat(id);
          return /*#__PURE__*/_react["default"].createElement(_ListItem["default"], {
            className: _this29.props.classes.headerCellSelectItem,
            key: id,
            onClick: function onClick() {
              var pos = itemEnums.indexOf(id);
              var enumDialogEnums = JSON.parse(JSON.stringify(_this29.state.enumDialogEnums));

              if (pos === -1) {
                enumDialogEnums.push(id);
                enumDialogEnums.sort();
              } else {
                enumDialogEnums.splice(pos, 1);
              }

              _this29.setState({
                enumDialogEnums: enumDialogEnums
              });
            }
          }, /*#__PURE__*/_react["default"].createElement(_ListItemIcon["default"], {
            classes: {
              root: _this29.props.classes.enumCheckbox
            }
          }, /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
            edge: "start",
            checked: itemEnums.includes(id),
            tabIndex: -1,
            disableRipple: true,
            inputProps: {
              'aria-labelledby': labelId
            }
          })), /*#__PURE__*/_react["default"].createElement(_ListItemText["default"], {
            id: labelId
          }, name), icon ? /*#__PURE__*/_react["default"].createElement(_ListItemSecondaryAction["default"], null, icon) : null);
        })));
      } else {
        return null;
      }
    }
    /**
     * @private
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderEditRoleDialog",
    value: function renderEditRoleDialog() {
      var _this30 = this;

      if (this.state.roleDialog && this.props.objectBrowserEditRole) {
        var ObjectBrowserEditRole = this.props.objectBrowserEditRole;
        return /*#__PURE__*/_react["default"].createElement(ObjectBrowserEditRole, {
          key: "objectBrowserEditRole",
          id: this.state.roleDialog,
          socket: this.props.socket,
          t: this.props.t,
          roles: this.info.roles,
          onClose: function onClose(obj) {
            if (obj) {
              _this30.info.objects[_this30.state.roleDialog] = obj;
            }

            _this30.setState({
              roleDialog: false
            });
          }
        });
      } else {
        return null;
      }
    }
    /**
     * @private
     * @param {boolean} [isSave]
     */

  }, {
    key: "onColumnsEditCustomDialogClose",
    value: function onColumnsEditCustomDialogClose(isSave) {
      var _this31 = this;

      if (isSave) {
        var value = this.customColumnDialog.value;

        if (this.customColumnDialog.type === 'boolean') {
          value = value === 'true' || value === true;
        } else if (this.customColumnDialog.type === 'number') {
          value = parseFloat(value);
        }

        this.customColumnDialog = null;
        this.props.socket.getObject(this.state.columnsEditCustomDialog.obj._id).then(function (obj) {
          if (_this31.setCustomValue(obj, _this31.state.columnsEditCustomDialog.it, value)) {
            return _this31.props.socket.setObject(obj._id, obj);
          } else {
            throw new Error(_this31.props.t('ra_Cannot update attribute, because not found in the object'));
          }
        }).then(function () {
          return _this31.setState({
            columnsEditCustomDialog: null
          });
        })["catch"](function (e) {
          return _this31.showError(e);
        });
      } else {
        this.customColumnDialog = null;
        this.setState({
          columnsEditCustomDialog: null
        });
      }
    }
    /**
     * @private
     */

  }, {
    key: "renderColumnsEditCustomDialog",
    value: function renderColumnsEditCustomDialog() {
      var _this32 = this;

      if (this.state.columnsEditCustomDialog) {
        if (!this.customColumnDialog) {
          var value = this.getCustomValue(this.state.columnsEditCustomDialog.obj, this.state.columnsEditCustomDialog.it);
          this.customColumnDialog = {
            type: this.state.columnsEditCustomDialog.it.type || _typeof(value),
            initValue: (value === null || value === undefined ? '' : value).toString(),
            value: (value === null || value === undefined ? '' : value).toString()
          };
        }

        return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
          onClose: function onClose() {
            return _this32.setState({
              columnsEditCustomDialog: null
            });
          },
          maxWidth: "md",
          "aria-labelledby": "custom-dialog-title",
          open: true
        }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], {
          id: "custom-dialog-title"
        }, this.props.t('ra_Edit object field') + ': ' + this.state.columnsEditCustomDialog.obj._id), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], null, /*#__PURE__*/_react["default"].createElement(_DialogContentText["default"], {
          id: "alert-dialog-description"
        }, this.customColumnDialog.type === 'boolean' ? /*#__PURE__*/_react["default"].createElement(_FormControlLabel["default"], {
          control: /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
            onKeyUp: function onKeyUp(e) {
              return e.keyCode === 13 && _this32.onColumnsEditCustomDialogClose(true);
            },
            defaultChecked: this.customColumnDialog.value === 'true',
            onChange: function onChange(e) {
              _this32.customColumnDialog.value = e.target.checked.toString();
              var changed = _this32.customColumnDialog.value !== _this32.customColumnDialog.initValue;

              if (changed === !_this32.state.customColumnDialogValueChanged) {
                _this32.setState({
                  customColumnDialogValueChanged: changed
                });
              }
            }
          }),
          label: this.state.columnsEditCustomDialog.it.name + ' (' + this.state.columnsEditCustomDialog.it.pathText + ')'
        }) : /*#__PURE__*/_react["default"].createElement(_TextField["default"], {
          defaultValue: this.customColumnDialog.value,
          fullWidth: true,
          onKeyUp: function onKeyUp(e) {
            return e.keyCode === 13 && _this32.onColumnsEditCustomDialogClose(true);
          },
          label: this.state.columnsEditCustomDialog.it.name + ' (' + this.state.columnsEditCustomDialog.it.pathText + ')',
          onChange: function onChange(e) {
            _this32.customColumnDialog.value = e.target.value;
            var changed = _this32.customColumnDialog.value !== _this32.customColumnDialog.initValue;

            if (changed === !_this32.state.customColumnDialogValueChanged) {
              _this32.setState({
                customColumnDialogValueChanged: changed
              });
            }
          },
          autoFocus: true
        }))), /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, /*#__PURE__*/_react["default"].createElement(_Button["default"], {
          variant: "contained",
          onClick: function onClick() {
            return _this32.onColumnsEditCustomDialogClose(true);
          },
          disabled: !this.state.customColumnDialogValueChanged,
          color: "primary"
        }, /*#__PURE__*/_react["default"].createElement(_Check["default"], {
          className: this.props.classes.buttonIcon
        }), " ", this.props.t('ra_Update')), /*#__PURE__*/_react["default"].createElement(_Button["default"], {
          variant: "contained",
          onClick: function onClick() {
            return _this32.onColumnsEditCustomDialogClose();
          }
        }, /*#__PURE__*/_react["default"].createElement(_Close["default"], {
          className: this.props.classes.buttonIcon
        }), this.props.t('Cancel'))));
      } else {
        return null;
      }
    }
    /**
     * @private
     * @param {any} obj
     * @param {any} it
     */

  }, {
    key: "getCustomValue",
    value: function getCustomValue(obj, it) {
      if (obj && obj._id && obj._id.startsWith(it.adapter + '.') && it.path.length > 1) {
        var p = it.path;
        var value;

        if (obj[p[0]] && _typeof(obj[p[0]]) === 'object') {
          if (p.length === 2) {
            // most common case
            value = obj[p[0]][p[1]];
          } else if (p.length === 3) {
            value = obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object' ? obj[p[0]][p[1]][p[2]] : null;
          } else if (p.length === 4) {
            value = obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object' && obj[p[0]][p[1]][p[2]] ? obj[p[0]][p[1]][p[2]][p[3]] : null;
          } else if (p.length === 5) {
            value = obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object' && obj[p[0]][p[1]][p[2]] && obj[p[0]][p[1]][p[2]][p[3]] ? obj[p[0]][p[1]][p[2]][p[3]][p[4]] : null;
          } else if (p.length === 6) {
            value = obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object' && obj[p[0]][p[1]][p[2]] && obj[p[0]][p[1]][p[2]][p[3]] && obj[p[0]][p[1]][p[2]][p[3]][p[4]] ? obj[p[0]][p[1]][p[2]][p[3]][p[4]][p[5]] : null;
          }

          if (value === undefined || value === null) {
            return null;
          } else {
            return value;
          }
        }
      } else {
        return null;
      }
    }
    /**
     * @private
     * @param {any} obj
     * @param {any} it
     * @param {any} value
     */

  }, {
    key: "setCustomValue",
    value: function setCustomValue(obj, it, value) {
      if (obj && obj._id && obj._id.startsWith(it.adapter + '.') && it.path.length > 1) {
        var p = it.path;

        if (obj[p[0]] && _typeof(obj[p[0]]) === 'object') {
          if (p.length === 2) {
            // most common case
            obj[p[0]][p[1]] = value;
            return true;
          } else if (p.length === 3) {
            if (obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object') {
              obj[p[0]][p[1]][p[2]] = value;
              return true;
            }
          } else if (p.length === 4) {
            if (obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object' && obj[p[0]][p[1]][p[2]] && _typeof(obj[p[0]][p[1]][p[2]]) === 'object') {
              obj[p[0]][p[1]][p[2]][p[3]] = value;
              return true;
            }
          } else if (p.length === 5) {
            if (obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object' && obj[p[0]][p[1]][p[2]] && _typeof(obj[p[0]][p[1]][p[2]]) === 'object' && obj[p[0]][p[1]][p[2]][p[3]] && _typeof(obj[p[0]][p[1]][p[2]][p[3]]) === 'object') {
              obj[p[0]][p[1]][p[2]][p[3]][p[4]] = value;
              return true;
            }
          } else if (p.length === 6) {
            if (obj[p[0]][p[1]] && _typeof(obj[p[0]][p[1]]) === 'object' && obj[p[0]][p[1]][p[2]] && _typeof(obj[p[0]][p[1]][p[2]]) === 'object' && obj[p[0]][p[1]][p[2]][p[3]] && _typeof(obj[p[0]][p[1]][p[2]][p[3]]) === 'object' && obj[p[0]][p[1]][p[2]][p[3]][p[4]] && _typeof(obj[p[0]][p[1]][p[2]][p[3]][p[4]]) === 'object') {
              obj[p[0]][p[1]][p[2]][p[3]][p[4]][p[5]] = value;
              return true;
            }
          }
        }
      }

      return false;
    }
    /**
     * Renders a custom value.
     * @param {any} obj
     * @param {any} it
     * @param {any} item
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderCustomValue",
    value: function renderCustomValue(obj, it, item) {
      var _this33 = this;

      var text = this.getCustomValue(obj, it);

      if (text !== null && text !== undefined) {
        if (it.edit && !this.props.notEditable && (!it.objTypes || it.objTypes.includes(obj.type))) {
          return /*#__PURE__*/_react["default"].createElement("div", {
            className: _Utils["default"].clsx(this.props.classes.columnCustom, this.props.classes.columnCustomEditable, this.props.classes['columnCustom_' + it.align]),
            onClick: function onClick() {
              return _this33.setState({
                columnsEditCustomDialog: {
                  item: item,
                  it: it,
                  obj: obj
                },
                customColumnDialogValueChanged: false
              });
            }
          }, text);
        } else {
          return /*#__PURE__*/_react["default"].createElement("div", {
            className: _Utils["default"].clsx(this.props.classes.columnCustom, this.props.classes['columnCustom_' + it.align])
          }, text);
        }
      } else {
        return null;
      }
    }
    /**
     * Renders a leaf.
     * @param {any} item
     * @param {boolean} isExpanded
     * @param {Record<string, any>} classes
     * @param {{ count: number; }} counter
     * @returns {JSX.Element}
     */

  }, {
    key: "renderLeaf",
    value: function renderLeaf(item, isExpanded, classes, counter) {
      var _item$data$obj,
          _this34 = this,
          _item$data$obj2,
          _item$data$obj2$commo,
          _item$data$obj3,
          _item$data$obj4,
          _item$data$obj5,
          _item$data$obj6,
          _item$data$obj6$commo,
          _item$data$obj6$commo2,
          _item$data$obj7,
          _item$data$obj7$commo,
          _item$data$obj7$commo2,
          _item$data,
          _item$data$obj8,
          _item$data$obj8$commo,
          _this$states$id2,
          _item$data2,
          _this$states$id3,
          _this$states$id4,
          _this$states$id5;

      var id = item.data.id;
      counter.count++;
      isExpanded = isExpanded === undefined ? this.state.expanded.includes(id) : isExpanded; // icon

      var iconFolder;
      var itemType = (_item$data$obj = item.data.obj) === null || _item$data$obj === void 0 ? void 0 : _item$data$obj.type;

      if (item.children || itemType === 'folder' || itemType === 'device' || itemType === 'channel' || itemType === 'meta') {
        iconFolder = isExpanded ? /*#__PURE__*/_react["default"].createElement(_IconOpen["default"], {
          className: classes.cellIdIconFolder,
          onClick: function onClick() {
            return _this34.toggleExpanded(id);
          }
        }) : /*#__PURE__*/_react["default"].createElement(_IconClosed["default"], {
          className: classes.cellIdIconFolder,
          onClick: function onClick() {
            return _this34.toggleExpanded(id);
          }
        });
      } else {
        iconFolder = /*#__PURE__*/_react["default"].createElement(_IconDocument["default"], {
          className: classes.cellIdIconDocument
        });
      }

      var iconItem = null;

      if (item.data.icon) {
        if (typeof item.data.icon === 'string') {
          if (item.data.icon.length < 3) {
            iconItem = /*#__PURE__*/_react["default"].createElement("span", {
              className: _Utils["default"].clsx(classes.cellIdIconOwn, 'iconOwn')
            }, item.data.icon); // utf-8 char
          } else {
            iconItem = /*#__PURE__*/_react["default"].createElement("img", {
              className: _Utils["default"].clsx(classes.cellIdIconOwn, 'iconOwn'),
              src: item.data.icon,
              alt: ""
            });
          }
        } else {
          iconItem = item.data.icon;
        }
      }

      var obj = item.data.obj;

      var typeImg = obj && obj.type && ITEM_IMAGES[obj.type] || /*#__PURE__*/_react["default"].createElement("div", {
        className: "itemIcon"
      });

      var paddingLeft = ITEM_LEVEL * item.data.level;

      if (item.data.lang !== this.state.lang) {
        var _findRoomsForObject = findRoomsForObject(this.info, id, this.state.lang),
            rooms = _findRoomsForObject.rooms,
            per = _findRoomsForObject.per;

        item.data.rooms = rooms.join(', ');
        item.data.per = per;

        var _findFunctionsForObje = findFunctionsForObject(this.info, id, this.state.lang),
            funcs = _findFunctionsForObje.funcs,
            pef = _findFunctionsForObje.pef;

        item.data.funcs = funcs.join(', ');
        item.data.pef = pef;
        item.data.lang = this.state.lang;
      }

      var checkbox = this.props.multiSelect && this.objects[id] && (!this.props.types || this.props.types.includes(this.objects[id].type)) ? /*#__PURE__*/_react["default"].createElement(_Checkbox["default"], {
        className: classes.checkBox,
        checked: this.state.selected.includes(id)
      }) : null;
      var valueEditable = !this.props.notEditable && itemType === 'state' && (this.props.expertMode || ((_item$data$obj2 = item.data.obj) === null || _item$data$obj2 === void 0 ? void 0 : (_item$data$obj2$commo = _item$data$obj2.common) === null || _item$data$obj2$commo === void 0 ? void 0 : _item$data$obj2$commo.write) !== false);
      var enumEditable = !this.props.notEditable && this.objects[id] && (this.props.expertMode || itemType === 'state' || itemType === 'channel' || itemType === 'device');
      var checkVisibleObjectType = this.state.statesView && (itemType === 'state' || itemType === 'channel' || itemType === 'device');
      var newValue = '';
      var newValueTitle = [];

      if (checkVisibleObjectType) {
        var _this$states$id;

        newValue = (_this$states$id = this.states[id]) === null || _this$states$id === void 0 ? void 0 : _this$states$id.from;

        if (newValue === undefined) {
          newValue = '&nbsp;';
        } else {
          newValue = newValue ? newValue.replace(/^system\.adapter\.|^system\./, '') : '';
          newValueTitle.push("".concat(this.texts.stateChangedFrom, " ").concat(newValue));
        }

        if (obj.user) {
          var user = obj.user.replace('system.user.', '');
          newValue += "/".concat(user);
          newValueTitle.push("".concat(this.texts.stateChangedBy, " ").concat(user));
        }
      }

      ((_item$data$obj3 = item.data.obj) === null || _item$data$obj3 === void 0 ? void 0 : _item$data$obj3.from) && newValueTitle.push(this.texts.objectChangedFrom + ' ' + item.data.obj.from.replace(/^system\.adapter\.|^system\./, ''));
      ((_item$data$obj4 = item.data.obj) === null || _item$data$obj4 === void 0 ? void 0 : _item$data$obj4.user) && newValueTitle.push(this.texts.objectChangedBy + ' ' + item.data.obj.user.replace(/^system\.user\./, ''));
      ((_item$data$obj5 = item.data.obj) === null || _item$data$obj5 === void 0 ? void 0 : _item$data$obj5.ts) && newValueTitle.push(this.texts.objectChangedByUser + ' ' + _Utils["default"].formatDate(new Date(item.data.obj.ts), this.props.dateFormat));
      var readWriteAlias = _typeof((_item$data$obj6 = item.data.obj) === null || _item$data$obj6 === void 0 ? void 0 : (_item$data$obj6$commo = _item$data$obj6.common) === null || _item$data$obj6$commo === void 0 ? void 0 : (_item$data$obj6$commo2 = _item$data$obj6$commo.alias) === null || _item$data$obj6$commo2 === void 0 ? void 0 : _item$data$obj6$commo2.id) === 'object';
      var alias = id.startsWith('alias.') && (_item$data$obj7 = item.data.obj) !== null && _item$data$obj7 !== void 0 && (_item$data$obj7$commo = _item$data$obj7.common) !== null && _item$data$obj7$commo !== void 0 && (_item$data$obj7$commo2 = _item$data$obj7$commo.alias) !== null && _item$data$obj7$commo2 !== void 0 && _item$data$obj7$commo2.id ? readWriteAlias ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellIdAliasReadWriteDiv
      }, item.data.obj.common.alias.id.read ? /*#__PURE__*/_react["default"].createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();
          e.preventDefault();

          _this34.onSelect(item.data.obj.common.alias.id.read);

          setTimeout(function () {
            _this34.expandAllSelected(function () {
              return _this34.scrollToItem(item.data.obj.common.alias.id.read);
            });
          }, 100);
        },
        className: _Utils["default"].clsx(classes.cellIdAlias, classes.cellIdAliasReadWrite)
      }, "\u2190", item.data.obj.common.alias.id.read) : null, item.data.obj.common.alias.id.write ? /*#__PURE__*/_react["default"].createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();
          e.preventDefault();

          _this34.onSelect(item.data.obj.common.alias.id.write);

          setTimeout(function () {
            _this34.expandAllSelected(function () {
              return _this34.scrollToItem(item.data.obj.common.alias.id.write);
            });
          }, 100);
        },
        className: _Utils["default"].clsx(classes.cellIdAlias, classes.cellIdAliasReadWrite)
      }, "\u2192", item.data.obj.common.alias.id.write) : null) : /*#__PURE__*/_react["default"].createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();
          e.preventDefault();

          _this34.onSelect(item.data.obj.common.alias.id);

          setTimeout(function () {
            _this34.expandAllSelected(function () {
              return _this34.scrollToItem(item.data.obj.common.alias.id);
            });
          }, 100);
        },
        className: _Utils["default"].clsx(classes.cellIdAlias, classes.cellIdAliasAlone)
      }, "\u2192", item.data.obj.common.alias.id) : null;
      var checkColor = (_item$data = item.data) === null || _item$data === void 0 ? void 0 : (_item$data$obj8 = _item$data.obj) === null || _item$data$obj8 === void 0 ? void 0 : (_item$data$obj8$commo = _item$data$obj8.common) === null || _item$data$obj8$commo === void 0 ? void 0 : _item$data$obj8$commo.color;
      var invertBackground = 'none';

      if (checkColor && !this.state.selected.includes(id)) {
        invertBackground = _Utils["default"].invertColor(checkColor, true);
      }

      if (!checkColor || this.state.selected.includes(id)) {
        checkColor = 'inherit';
      }

      var q = checkVisibleObjectType ? _Utils["default"].quality2text(((_this$states$id2 = this.states[id]) === null || _this$states$id2 === void 0 ? void 0 : _this$states$id2.q) || 0).join(', ') : null;
      return /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        container: true,
        direction: "row",
        wrap: "nowrap",
        className: _Utils["default"].clsx(classes.tableRow, alias && classes.tableRowAlias, readWriteAlias && classes.tableRowAliasReadWrite, !item.data.visible && classes.filteredOut, this.state.selected.includes(id) && classes.itemSelected, this.state.selectedNonObject === id && classes.itemSelected),
        key: id,
        id: id,
        onClick: function onClick() {
          return _this34.onSelect(id);
        },
        onDoubleClick: function onDoubleClick() {
          if (!item.children) {
            _this34.onSelect(id, true);
          } else {
            _this34.toggleExpanded(id);
          }
        }
      }, /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        container: true,
        wrap: "nowrap",
        direction: "row",
        className: classes.cellId,
        style: {
          width: this.columnsVisibility.id,
          paddingLeft: paddingLeft
        }
      }, /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        item: true,
        container: true,
        alignItems: "center",
        style: {
          color: checkColor,
          background: invertBackground
        }
      }, checkbox, iconFolder), /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        item: true,
        className: classes.cellIdSpan,
        style: {
          background: invertBackground,
          color: id === 'system' ? COLOR_NAME_SYSTEM : id === 'system.adapter' ? COLOR_NAME_SYSTEM_ADAPTER : checkColor
        }
      }, item.data.name, alias), /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          color: checkColor,
          background: invertBackground
        },
        className: classes.grow
      }), /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        item: true,
        container: true,
        alignItems: "center"
      }, iconItem), /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          color: checkColor
        }
      }, /*#__PURE__*/_react["default"].createElement(_IconCopy["default"], {
        className: _Utils["default"].clsx(classes.cellCopyButton, 'copyButton'),
        onClick: function onClick(e) {
          return _this34.onCopy(e, id);
        }
      }))), this.columnsVisibility.name ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellName,
        style: {
          width: this.columnsVisibility.name
        }
      }, ((_item$data2 = item.data) === null || _item$data2 === void 0 ? void 0 : _item$data2.title) || '') : null, !this.state.statesView ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, this.columnsVisibility.type ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellType,
        style: {
          width: this.columnsVisibility.type
        }
      }, typeImg, " ", obj && obj.type) : null, this.columnsVisibility.role ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellRole,
        style: {
          width: this.columnsVisibility.role,
          cursor: this.props.expertMode && enumEditable && this.props.objectBrowserEditRole ? 'text' : 'default'
        },
        onClick: this.props.expertMode && enumEditable && this.props.objectBrowserEditRole ? function () {
          return _this34.setState({
            roleDialog: item.data.id
          });
        } : undefined
      }, obj && obj.common && obj.common.role) : null, this.columnsVisibility.room ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(classes.cellRoom, " ").concat(item.data.per ? classes.cellEnumParent : ''),
        style: {
          width: this.columnsVisibility.room,
          cursor: enumEditable ? 'text' : 'default'
        },
        onClick: enumEditable ? function () {
          var enums = findEnumsForObjectAsIds(_this34.info, item.data.id, 'roomEnums');

          _this34.setState({
            enumDialogEnums: enums,
            enumDialog: {
              item: item,
              type: 'room',
              enumsOriginal: JSON.parse(JSON.stringify(enums))
            }
          });
        } : undefined
      }, item.data.rooms) : null, this.columnsVisibility.func ? /*#__PURE__*/_react["default"].createElement("div", {
        className: "".concat(classes.cellFunc, " ").concat(item.data.pef ? classes.cellEnumParent : ''),
        style: {
          width: this.columnsVisibility.func,
          cursor: enumEditable ? 'text' : 'default'
        },
        onClick: enumEditable ? function () {
          var enums = findEnumsForObjectAsIds(_this34.info, item.data.id, 'funcEnums');

          _this34.setState({
            enumDialogEnums: enums,
            enumDialog: {
              item: item,
              type: 'func',
              enumsOriginal: JSON.parse(JSON.stringify(enums))
            }
          });
        } : undefined
      }, item.data.funcs) : null) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, this.columnsVisibility.changedFrom ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellRole,
        style: {
          width: this.columnsVisibility.changedFrom
        },
        title: newValueTitle.join('\n')
      }, checkVisibleObjectType && (_this$states$id3 = this.states[id]) !== null && _this$states$id3 !== void 0 && _this$states$id3.from ? newValue : null) : null, this.columnsVisibility.qualityCode ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellRole,
        style: {
          width: this.columnsVisibility.qualityCode
        },
        title: q || ''
      }, q) : null, this.columnsVisibility.timestamp ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellRole,
        style: {
          width: this.columnsVisibility.timestamp
        }
      }, checkVisibleObjectType && (_this$states$id4 = this.states[id]) !== null && _this$states$id4 !== void 0 && _this$states$id4.ts ? _Utils["default"].formatDate(new Date(this.states[id].ts), this.props.dateFormat) : null) : null, this.columnsVisibility.lastChange ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellRole,
        style: {
          width: this.columnsVisibility.lastChange
        }
      }, checkVisibleObjectType && (_this$states$id5 = this.states[id]) !== null && _this$states$id5 !== void 0 && _this$states$id5.lc ? _Utils["default"].formatDate(new Date(this.states[id].lc), this.props.dateFormat) : null) : null), this.adapterColumns.map(function (it) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: classes.cellAdapter,
          style: {
            width: _this34.columnsVisibility[it.id]
          },
          key: it.id,
          title: it.adapter + ' => ' + it.pathText
        }, _this34.renderCustomValue(obj, it, item));
      }), this.columnsVisibility.val ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellValue,
        style: {
          width: this.columnsVisibility.val,
          cursor: valueEditable ? item.data.button ? 'grab' : 'text' : 'default'
        },
        onClick: valueEditable ? function () {
          if (!item.data.obj || !_this34.states) {
            return null;
          } // in non expert mode control button directly


          if (!_this34.props.expertMode && item.data.button) {
            return _this34.props.socket.setState(id, true)["catch"](function (e) {
              return window.alert("Cannot write state \"".concat(id, "\": ").concat(e));
            });
          }

          _this34.edit = {
            val: _this34.states[id] ? _this34.states[id].val : '',
            q: _this34.states[id] ? _this34.states[id].q || 0 : 0,
            ack: false,
            id: id
          };

          _this34.setState({
            updateOpened: true
          });
        } : undefined
      }, this.renderColumnValue(id, item, classes)) : null, this.columnsVisibility.buttons ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.cellButtons,
        style: {
          width: this.columnsVisibility.buttons
        }
      }, this.renderColumnButtons(id, item, classes)) : null);
    }
    /**
     * Renders an item.
     * @param {any} root
     * @param {boolean} isExpanded
     * @param {Record<string, any>} classes
     * @param {{ count: any; }} [counter]
     * @returns {JSX.Element[]}
     */

  }, {
    key: "renderItem",
    value: function renderItem(root, isExpanded, classes, counter) {
      var _this35 = this;

      var items = [];
      counter = counter || {
        count: 0
      };
      var leaf = this.renderLeaf(root, isExpanded, classes, counter);
      var DragWrapper = this.props.DragWrapper;

      if (this.props.dragEnabled) {
        leaf = /*#__PURE__*/_react["default"].createElement(DragWrapper, {
          key: root.data.id,
          item: root
        }, leaf);
      }

      root.data.id && items.push(leaf);
      isExpanded = isExpanded === undefined ? binarySearch(this.state.expanded, root.data.id) : isExpanded;

      if (!root.data.id || isExpanded) {
        if (!this.state.foldersFirst) {
          root.children && items.push(root.children.map(function (item) {
            // do not render too many items in column editor mode
            if (!_this35.state.columnsSelectorShow || counter.count < 15) {
              if (item.data.visible || item.data.hasVisibleChildren) {
                return _this35.renderItem(item, undefined, classes, counter);
              }
            }

            return null;
          }));
        } else {
          // first only folder
          root.children && items.push(root.children.map(function (item) {
            if (item.children) {
              // do not render too many items in column editor mode
              if (!_this35.state.columnsSelectorShow || counter.count < 15) {
                if (item.data.visible || item.data.hasVisibleChildren) {
                  return _this35.renderItem(item, undefined, classes, counter);
                }
              }
            }

            return null;
          })); // then items

          root.children && items.push(root.children.map(function (item) {
            if (!item.children) {
              // do not render too many items in column editor mode
              if (!_this35.state.columnsSelectorShow || counter.count < 15) {
                if (item.data.visible || item.data.hasVisibleChildren) {
                  return _this35.renderItem(item, undefined, classes, counter);
                }
              }
            }

            return null;
          }));
        }
      }

      return items;
    }
    /**
     * @private
     * @param {boolean} [columnsAuto]
     * @param {string[]} [columns]
     * @param {any} [columnsForAdmin]
     * @param {Record<string, number>} [columnsWidths]
     */

  }, {
    key: "calculateColumnsVisibility",
    value: function calculateColumnsVisibility(columnsAuto, columns, columnsForAdmin, columnsWidths) {
      var _this36 = this;

      columnsWidths = columnsWidths || this.state.columnsWidths;
      columnsForAdmin = columnsForAdmin || this.state.columnsForAdmin;
      columns = columns || this.state.columns || [];
      columnsAuto = typeof columnsAuto !== 'boolean' ? this.state.columnsAuto : columnsAuto;
      columnsWidths = JSON.parse(JSON.stringify(columnsWidths));
      Object.keys(columnsWidths).forEach(function (name) {
        if (columnsWidths[name]) {
          columnsWidths[name] = parseInt(columnsWidths[name], 10) || 0;
        }
      });
      this.adapterColumns = [];
      var WIDTHS = SCREEN_WIDTHS[this.props.width].widths;

      if (columnsAuto) {
        this.columnsVisibility = {
          id: SCREEN_WIDTHS[this.props.width].idWidth,
          name: this.visibleCols.includes('name') ? WIDTHS.name : 0,
          type: this.visibleCols.includes('type') ? WIDTHS.type : 0,
          role: this.visibleCols.includes('role') ? WIDTHS.role : 0,
          room: this.visibleCols.includes('room') ? WIDTHS.room : 0,
          func: this.visibleCols.includes('func') ? WIDTHS.func : 0,
          changedFrom: this.visibleCols.includes('changedFrom') ? WIDTHS.changedFrom : 0,
          qualityCode: this.visibleCols.includes('qualityCode') ? WIDTHS.qualityCode : 0,
          timestamp: this.visibleCols.includes('timestamp') ? WIDTHS.timestamp : 0,
          lastChange: this.visibleCols.includes('lastChange') ? WIDTHS.lastChange : 0,
          val: this.visibleCols.includes('val') ? WIDTHS.val : 0,
          buttons: this.visibleCols.includes('buttons') ? WIDTHS.buttons : 0
        };

        if (this.columnsVisibility.name) {
          var widthSum = this.columnsVisibility.id; // id is always visible

          if (this.state.statesView) {
            widthSum += this.columnsVisibility.changedFrom;
            widthSum += this.columnsVisibility.qualityCode;
            widthSum += this.columnsVisibility.timestamp;
            widthSum += this.columnsVisibility.lastChange;
          } else {
            widthSum += this.columnsVisibility.type;
            widthSum += this.columnsVisibility.role;
            widthSum += this.columnsVisibility.room;
            widthSum += this.columnsVisibility.func;
          }

          widthSum += this.columnsVisibility.val;
          widthSum += this.columnsVisibility.buttons;
          this.columnsVisibility.name = "calc(100% - ".concat(widthSum + 5, "px)");
          this.columnsVisibility.nameHeader = "calc(100% - ".concat(widthSum + 5 + this.state.scrollBarWidth, "px)");
        } else {
          // Calculate the with of ID
          var _widthSum = 0; // id is always visible

          if (this.state.statesView) {
            _widthSum += this.columnsVisibility.changedFrom;
            _widthSum += this.columnsVisibility.qualityCode;
            _widthSum += this.columnsVisibility.timestamp;
            _widthSum += this.columnsVisibility.lastChange;
          } else {
            _widthSum += this.columnsVisibility.type;
            _widthSum += this.columnsVisibility.role;
            _widthSum += this.columnsVisibility.room;
            _widthSum += this.columnsVisibility.func;
          }

          _widthSum += this.columnsVisibility.val;
          _widthSum += this.columnsVisibility.buttons;
          this.columnsVisibility.id = "calc(100% - ".concat(_widthSum + 5, "px)");
        }
      } else {
        this.columnsVisibility = {
          id: columnsWidths.id || SCREEN_WIDTHS[this.props.width].idWidth,
          name: columns.includes('name') ? columnsWidths.name || WIDTHS.name || SCREEN_WIDTHS.xl.widths.name : 0,
          type: columns.includes('type') ? columnsWidths.type || WIDTHS.type || SCREEN_WIDTHS.xl.widths.type : 0,
          role: columns.includes('role') ? columnsWidths.role || WIDTHS.role || SCREEN_WIDTHS.xl.widths.role : 0,
          room: columns.includes('room') ? columnsWidths.room || WIDTHS.room || SCREEN_WIDTHS.xl.widths.room : 0,
          func: columns.includes('func') ? columnsWidths.func || WIDTHS.func || SCREEN_WIDTHS.xl.widths.func : 0
        };
        var _widthSum2 = this.columnsVisibility.id; // id is always visible

        if (this.columnsVisibility.name) {
          _widthSum2 += this.columnsVisibility.type;
          _widthSum2 += this.columnsVisibility.role;
          _widthSum2 += this.columnsVisibility.room;
          _widthSum2 += this.columnsVisibility.func;
        }

        if (columnsForAdmin && columns) {
          Object.keys(columnsForAdmin).sort().forEach(function (adapter) {
            return columnsForAdmin[adapter].forEach(function (column) {
              var id = '_' + adapter + '_' + column.path;
              _this36.columnsVisibility[id] = columns.includes(id);

              if (columns.includes(id)) {
                var item = {
                  adapter: adapter,
                  id: '_' + adapter + '_' + column.path,
                  name: column.name,
                  path: column.path.split('.'),
                  pathText: column.path
                };

                if (column.edit) {
                  item.edit = true;

                  if (column.type) {
                    item.type = column.type;
                  }

                  if (column.objTypes) {
                    item.objTypes = column.objTypes;
                  }
                }

                _this36.adapterColumns.push(item);

                _this36.columnsVisibility[id] = columnsWidths[item.id] || column.width || SCREEN_WIDTHS[_this36.props.width].widths.func || SCREEN_WIDTHS.xl.widths.func;
                _widthSum2 += _this36.columnsVisibility[id];
              } else {
                _this36.columnsVisibility[id] = 0;
              }
            });
          });
        }

        this.adapterColumns.sort(function (a, b) {
          return a.id > b.id ? -1 : a.id < b.id ? 1 : 0;
        });
        this.columnsVisibility.val = columns.includes('val') ? columnsWidths.val || WIDTHS.val || SCREEN_WIDTHS.xl.widths.val : 0; // do not show buttons if not desired

        if (!this.props.columns || this.props.columns.includes('buttons')) {
          this.columnsVisibility.buttons = columns.includes('buttons') ? columnsWidths.buttons || WIDTHS.buttons || SCREEN_WIDTHS.xl.widths.buttons : 0;
          _widthSum2 += this.columnsVisibility.buttons;
        }

        if (this.columnsVisibility.name && !columnsWidths.name) {
          _widthSum2 += this.columnsVisibility.val;
          this.columnsVisibility.name = "calc(100% - ".concat(_widthSum2, "px)");
          this.columnsVisibility.nameHeader = "calc(100% - ".concat(_widthSum2 + 5 + this.state.scrollBarWidth, "px)");
        } else {
          var newWidth = Object.keys(this.columnsVisibility).reduce(function (accumulator, name) {
            return name === 'id' ? accumulator : accumulator + _this36.columnsVisibility[name];
          }, 0);
          this.columnsVisibility.id = "calc(100% - ".concat(newWidth, "px)");
        }
      }
    }
    /**
     * @private
     * @returns {JSX.Element}
     */

  }, {
    key: "renderHeader",
    value: function renderHeader() {
      var _this37 = this;

      var classes = this.props.classes;
      var filterClearInValue = null;

      if (!this.columnsVisibility.buttons && !this.isFilterEmpty()) {
        filterClearInValue = /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
          onClick: function onClick() {
            return _this37.clearFilter();
          },
          className: classes.buttonClearFilter,
          title: this.props.t('ra_Clear filter')
        }, /*#__PURE__*/_react["default"].createElement(_IconClearFilter["default"], null), /*#__PURE__*/_react["default"].createElement(_Close["default"], {
          className: classes.buttonClearFilterIcon
        }));
      }

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerRow
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerCell,
        style: {
          width: this.columnsVisibility.id
        }
      }, this.getFilterInput('id')), this.columnsVisibility.name ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerCell,
        style: {
          width: this.columnsVisibility.nameHeader
        }
      }, this.getFilterInput('name')) : null, !this.state.statesView && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, this.columnsVisibility.type ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerCell,
        style: {
          width: this.columnsVisibility.type
        }
      }, this.getFilterSelectType()) : null, this.columnsVisibility.role ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerCell,
        style: {
          width: this.columnsVisibility.role
        }
      }, this.getFilterSelectRole()) : null, this.columnsVisibility.room ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerCell,
        style: {
          width: this.columnsVisibility.room
        }
      }, this.getFilterSelectRoom()) : null, this.columnsVisibility.func ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerCell,
        style: {
          width: this.columnsVisibility.func
        }
      }, this.getFilterSelectFunction()) : null), this.state.statesView && /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
        className: _Utils["default"].clsx(classes.headerCell, classes.headerCellValue),
        style: {
          width: this.columnsVisibility.changedFrom
        }
      }, this.props.t('ra_Changed from')), /*#__PURE__*/_react["default"].createElement("div", {
        className: _Utils["default"].clsx(classes.headerCell, classes.headerCellValue),
        style: {
          width: this.columnsVisibility.qualityCode
        }
      }, this.props.t('ra_Quality code')), /*#__PURE__*/_react["default"].createElement("div", {
        className: _Utils["default"].clsx(classes.headerCell, classes.headerCellValue),
        style: {
          width: this.columnsVisibility.timestamp
        }
      }, this.props.t('ra_Timestamp')), /*#__PURE__*/_react["default"].createElement("div", {
        className: _Utils["default"].clsx(classes.headerCell, classes.headerCellValue),
        style: {
          width: this.columnsVisibility.lastChange
        }
      }, this.props.t('ra_Last change'))), this.adapterColumns.map(function (item) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          className: _Utils["default"].clsx(classes.headerCell, classes.headerCellValue),
          style: {
            width: _this37.columnsVisibility[item.id]
          },
          title: item.adapter,
          key: item.id
        }, item.name);
      }), this.columnsVisibility.val ? /*#__PURE__*/_react["default"].createElement("div", {
        className: _Utils["default"].clsx(classes.headerCell, classes.headerCellValue),
        style: {
          width: this.columnsVisibility.val
        }
      }, this.props.t('ra_Value'), filterClearInValue) : null, this.columnsVisibility.buttons ? /*#__PURE__*/_react["default"].createElement("div", {
        className: classes.headerCell,
        style: {
          width: this.columnsVisibility.buttons
        }
      }, " ", this.getFilterSelectCustoms()) : null);
    }
    /**
     * @private
     * @returns {JSX.Element}
     */

  }, {
    key: "renderToast",
    value: function renderToast() {
      var _this38 = this;

      return /*#__PURE__*/_react["default"].createElement(_Snackbar["default"], {
        open: !!this.state.toast,
        autoHideDuration: 3000,
        onClick: function onClick() {
          return _this38.setState({
            toast: ''
          });
        },
        onClose: function onClose() {
          return _this38.setState({
            toast: ''
          });
        },
        message: this.state.toast,
        action: /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_IconButton["default"], {
          size: "small",
          "aria-label": "close",
          color: "inherit",
          onClick: function onClick() {
            return _this38.setState({
              toast: ''
            });
          }
        }, /*#__PURE__*/_react["default"].createElement(_Close["default"], {
          fontSize: "small"
        })))
      });
    }
    /**
     * Called when component is updated.
     */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this39 = this;

      if (this.tableRef.current) {
        var scrollBarWidth = this.tableRef.current.offsetWidth - this.tableRef.current.clientWidth;

        if (this.state.scrollBarWidth !== scrollBarWidth) {
          setTimeout(function () {
            return _this39.setState({
              scrollBarWidth: scrollBarWidth
            });
          }, 100);
        } else {
          if (!this.selectedFound && (this.state.selected && this.state.selected[0] || this.lastSelectedItems)) {
            this.scrollToItem(this.state.selected && this.state.selected[0] || this.lastSelectedItems);
          }
        }
      }
    }
  }, {
    key: "scrollToItem",
    value: function scrollToItem(id) {
      var node = window.document.getElementById(id);
      node && node.scrollIntoView({
        behavior: 'auto',
        block: 'center',
        inline: 'center'
      });
      this.selectedFound = true;
    }
    /**
     * @private
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderCustomDialog",
    value: function renderCustomDialog() {
      var _this40 = this;

      if (this.state.customDialog && this.props.objectCustomDialog) {
        var ObjectCustomDialog = this.props.objectCustomDialog;
        return /*#__PURE__*/_react["default"].createElement(ObjectCustomDialog, {
          reportChangedIds: function reportChangedIds(changedIds) {
            return _this40.changedIds = _toConsumableArray(changedIds);
          },
          objectIDs: this.state.customDialog,
          expertMode: this.state.filter.expertMode,
          t: this.props.t,
          lang: this.props.lang,
          socket: this.props.socket,
          themeName: this.props.themeName,
          themeType: this.props.themeType,
          theme: this.props.theme,
          objects: this.objects,
          customsInstances: this.info.customs,
          onClose: function onClose() {
            _this40.pauseSubscribe(false);

            _this40.setState({
              customDialog: null
            });

            if (_this40.changedIds) {
              _this40.changedIds = null; // update all changed IDs

              _this40.forceUpdate();
            }

            _this40.props.router && _this40.props.router.doNavigate('tab-objects');
          }
        });
      } else {
        return null;
      }
    }
    /**
     * @private
     * @param {Partial<ioBroker.State>} valAck
     */

  }, {
    key: "onUpdate",
    value: function onUpdate(valAck) {
      var _this41 = this;

      this.props.socket.setState(this.edit.id, {
        val: valAck.val,
        ack: valAck.ack,
        q: valAck.q || 0,
        expire: valAck.expire || undefined
      })["catch"](function (e) {
        return _this41.showError('Cannot write value: ' + e);
      });
    }
    /**
     * @private
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderEditObjectDialog",
    value: function renderEditObjectDialog() {
      var _this42 = this;

      if (!this.state.editObjectDialog || !this.props.objectBrowserEditObject) {
        return null;
      }

      var ObjectBrowserEditObject = this.props.objectBrowserEditObject;
      return /*#__PURE__*/_react["default"].createElement(ObjectBrowserEditObject, {
        obj: this.objects[this.state.editObjectDialog],
        roleArray: this.info.roles,
        objects: this.objects,
        dateFormat: this.props.dateFormat,
        isFloatComma: this.props.isFloatComma,
        themeName: this.props.themeName,
        socket: this.props.socket,
        dialogName: this.props.dialogName,
        t: this.props.t,
        expertMode: this.state.filter.expertMode,
        onClose: function onClose(obj) {
          _this42.setState({
            editObjectDialog: ''
          });

          if (obj) {
            _this42.props.socket.setObject(obj._id, obj)["catch"](function (e) {
              return _this42.showError('Cannot write object: ' + e);
            });
          }
        }
      });
    }
    /**
     * @private
     * @returns {JSX.Element | null}
     */

  }, {
    key: "renderEditValueDialog",
    value: function renderEditValueDialog() {
      var _this$objects$this$ed,
          _this43 = this;

      if (!this.state.updateOpened || !this.props.objectBrowserValue) {
        return null;
      }

      var type = (_this$objects$this$ed = this.objects[this.edit.id].common) !== null && _this$objects$this$ed !== void 0 && _this$objects$this$ed.type ? this.objects[this.edit.id].common.type : _typeof(this.edit.val);
      var ObjectBrowserValue = this.props.objectBrowserValue;
      return /*#__PURE__*/_react["default"].createElement(ObjectBrowserValue, {
        t: this.props.t,
        lang: this.props.lang,
        type: type,
        states: _Utils["default"].getStates(this.objects[this.edit.id]),
        themeType: this.props.themeType,
        expertMode: this.state.filter.expertMode,
        value: this.edit.val,
        socket: this.props.socket,
        object: this.objects[this.edit.id],
        defaultHistory: this.defaultHistory,
        dateFormat: this.props.dateFormat,
        onClose: function onClose(res) {
          _this43.setState({
            updateOpened: false
          });

          res && _this43.onUpdate(res);
        }
      });
    }
  }, {
    key: "render",
    value:
    /**
     * The rendering method of this component.
     * @returns {JSX.Element}
     */
    function render() {
      var _this44 = this;

      this.recordStates = [];
      this.unsubscribeTimer && clearTimeout(this.unsubscribeTimer); // apply filter if changed

      var jsonFilter = JSON.stringify(this.state.filter);

      if (this.lastAppliedFilter !== jsonFilter && this.objects && this.root) {
        var counter = {
          count: 0
        };
        applyFilter(this.root, this.state.filter, this.state.lang, this.objects, null, counter, this.props.customFilter);

        if (counter.count < 500 && !this.state.expandAllVisible) {
          setTimeout(function () {
            return _this44.setState({
              expandAllVisible: true
            });
          });
        } else if (counter.count >= 500 && this.state.expandAllVisible) {
          setTimeout(function () {
            return _this44.setState({
              expandAllVisible: false
            });
          });
        }

        this.lastAppliedFilter = jsonFilter;
      }

      this.unsubscribeTimer = setTimeout(function () {
        _this44.unsubscribeTimer = null;

        _this44.checkUnsubscribes();
      }, 200);

      if (!this.state.loaded) {
        return /*#__PURE__*/_react["default"].createElement(_CircularProgress["default"], {
          key: this.props.dialogName + '_c'
        });
      } else {
        var classes = this.props.classes;
        var items = this.renderItem(this.root, undefined, classes);
        return /*#__PURE__*/_react["default"].createElement(_TabContainer["default"], {
          key: this.props.dialogName
        }, /*#__PURE__*/_react["default"].createElement(_TabHeader["default"], null, this.getToolbar()), /*#__PURE__*/_react["default"].createElement(_TabContent["default"], null, this.renderHeader(), /*#__PURE__*/_react["default"].createElement("div", {
          className: this.props.classes.tableDiv,
          ref: this.tableRef
        }, items)), this.renderToast(), this.renderColumnsEditCustomDialog(), this.renderColumnsSelectorDialog(), this.renderCustomDialog(), this.renderEditValueDialog(), this.renderEditObjectDialog(), this.renderEditRoleDialog(), this.renderEnumDialog(), this.renderErrorDialog(), this.renderExportDialog(), this.state.modalNewObj && this.props.modalNewObject && this.props.modalNewObject(this), this.state.modalEditOfAccess && this.props.modalEditOfAccessControl && this.props.modalEditOfAccessControl(this, this.state.modalEditOfAccessObjData));
      }
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var newState = {};
      var changed = false;

      if (props.expertMode !== undefined && props.expertMode !== state.filter.expertMode) {
        changed = true;
        newState.filter = Object.assign({}, state.filter);
        newState.filter.expertMode = props.expertMode;
      }

      return changed ? newState : null;
    }
  }]);

  return ObjectBrowser;
}(_react.Component);

ObjectBrowser.defaultProps = {
  objectAddBoolean: false,
  objectEditBoolean: false,
  objectStatesView: false,
  objectImportExport: false,
  objectEditOfAccessControl: false,
  modalNewObject: function modalNewObject() {},
  modalEditOfAccessControl: function modalEditOfAccessControl() {}
};
ObjectBrowser.propTypes = {
  dialogName: _propTypes["default"].string,
  // where to store settings in localStorage
  classes: _propTypes["default"].object,
  defaultFilters: _propTypes["default"].object,
  selected: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].array]),
  onSelect: _propTypes["default"].func,
  onFilterChanged: _propTypes["default"].func,
  socket: _propTypes["default"].object,
  showExpertButton: _propTypes["default"].bool,
  expertMode: _propTypes["default"].bool,
  imagePrefix: _propTypes["default"].string,
  themeName: _propTypes["default"].string,
  themeType: _propTypes["default"].string,
  theme: _propTypes["default"].object,
  t: _propTypes["default"].func,
  lang: _propTypes["default"].string.isRequired,
  multiSelect: _propTypes["default"].bool,
  notEditable: _propTypes["default"].bool,
  foldersFirst: _propTypes["default"].bool,
  disableColumnSelector: _propTypes["default"].bool,
  isFloatComma: _propTypes["default"].bool,
  dateFormat: _propTypes["default"].string,
  // components
  objectCustomDialog: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  objectAddBoolean: _propTypes["default"].bool,
  // optional toolbar button
  objectEditBoolean: _propTypes["default"].bool,
  // optional toolbar button
  objectStatesView: _propTypes["default"].bool,
  // optional toolbar button
  objectImportExport: _propTypes["default"].bool,
  // optional toolbar button
  objectEditOfAccessControl: _propTypes["default"].bool,
  //Access Control
  modalNewObject: _propTypes["default"].func,
  // modal add object
  modalEditOfAccessControl: _propTypes["default"].func,
  //modal Edit Of Access Control
  onObjectDelete: _propTypes["default"].func,
  // optional function (id, hasChildren, objectExists) {  }
  customFilter: _propTypes["default"].object,
  // optional {common: {custom: true}} or {common: {custom: 'sql.0'}}
  objectBrowserValue: _propTypes["default"].object,
  objectBrowserEditObject: _propTypes["default"].object,
  objectBrowserEditRole: _propTypes["default"].object,
  // on Edit role
  router: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].func]),
  types: _propTypes["default"].array,
  // optional ['state', 'instance', 'channel']
  columns: _propTypes["default"].array,
  // optional ['name', 'type', 'role', 'room', 'func', 'val', 'buttons']
  dragSettings: _propTypes["default"].object,
  DragWrapper: _propTypes["default"].func,
  dragEnabled: _propTypes["default"].bool,
  useDrag: _propTypes["default"].func
};
/** @type {typeof ObjectBrowser} */

var _export = (0, _withWidth["default"])()((0, _withStyles["default"])(styles)(ObjectBrowser));

var _default = _export;
exports["default"] = _default;
//# sourceMappingURL=ObjectBrowser.js.map
