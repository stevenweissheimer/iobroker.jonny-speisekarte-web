"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _withStyles = _interopRequireDefault(require("@material-ui/core/styles/withStyles"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Utils = _interopRequireDefault(require("./Utils"));

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var styles = {
  root: {
    width: '100%',
    height: '100%'
  },
  overflowHidden: {
    overflow: 'hidden'
  },
  container: {
    height: '100%'
  }
};
/**
 * @typedef {object} TabContainerProps
 * @property {string} [key] The key to identify this component.
 * @property {number} [elevation] The elevation of the tab container.
 * @property {string} [overflow] Set to 'visible' show the overflow.
 * @property {{ [key in keyof styles]: string}} classes The styling class names.
 *
 * @extends {React.Component<TabContainerProps>}
 */

var TabContainer = /*#__PURE__*/function (_React$Component) {
  _inherits(TabContainer, _React$Component);

  var _super = _createSuper(TabContainer);

  function TabContainer() {
    _classCallCheck(this, TabContainer);

    return _super.apply(this, arguments);
  }

  _createClass(TabContainer, [{
    key: "render",
    value: function render() {
      var classes = this.props.classes;
      return /*#__PURE__*/_react["default"].createElement(_Paper["default"], {
        key: this.props.key,
        elevation: !isNaN(this.props.elevation) ? this.props.elevation : 1,
        className: _Utils["default"].clsx(classes.root, _defineProperty({}, classes.overflowHidden, this.props.overflow !== 'visible'))
      }, /*#__PURE__*/_react["default"].createElement(_Grid["default"], {
        container: true,
        direction: "column",
        wrap: "nowrap",
        className: classes.container
      }, this.props.children));
    }
  }]);

  return TabContainer;
}(_react["default"].Component);

TabContainer.propTypes = {
  key: _propTypes["default"].string,
  elevation: _propTypes["default"].number,
  overflow: _propTypes["default"].string
};
/** @type {typeof TabContainer} */

var _export = (0, _withStyles["default"])(styles)(TabContainer);

var _default = _export;
exports["default"] = _default;
//# sourceMappingURL=TabContainer.js.map
