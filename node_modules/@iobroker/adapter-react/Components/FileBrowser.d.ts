export default _export;
/** @type {typeof FileBrowser} */
declare const _export: typeof FileBrowser;
/**
 * @extends {React.Component<import('./types').FileBrowserProps>}
 */
declare class FileBrowser extends React.Component<import("./types").FileBrowserProps, any, any> {
    static getDerivedStateFromProps(props: any, state: any): {
        expertMode: any;
    };
    /**
     * @param {Readonly<import("./types").FileBrowserProps>} props
     */
    constructor(props: Readonly<import("./types").FileBrowserProps>);
    imagePrefix: string;
    levelPadding: any;
    mounted: boolean;
    suppressDeleteConfirm: number;
    browseList: any[];
    browseListRunning: boolean;
    loadFolders(): any;
    scrollToSelected(): void;
    browseFolders(foldersList: any, _newFolders: any, _resolve: any): any;
    readDirSerial(adapter: any, relPath: any): Promise<any>;
    processBrowseList(level: any): void;
    browseFolder(folderId: any, _newFolders: any, _checkEmpty: any): any;
    toggleFolder(item: any, e: any): any;
    changeFolder(e: any, folder: any): any;
    lastSelect: number;
    select(id: any, e: any): void;
    renderFolder(item: any, expanded: any): JSX.Element;
    renderBackFolder(): JSX.Element;
    formatSize(size: any): JSX.Element;
    formatAcl(acl: any): JSX.Element;
    getFileIcon(ext: any): JSX.Element;
    getEditFile(ext: any): boolean;
    setStateBackgroundImage: () => void;
    getClassBackgroundImage: () => any;
    renderFile(item: any): JSX.Element;
    renderItems(folderId: any): any;
    renderToolbar(): JSX.Element;
    findItem(id: any, folders: any): any;
    renderInputDialog(): void | JSX.Element;
    setOpacityTimer: any;
    uploadFile(fileName: any, data: any): Promise<void>;
    findFirstFolder(id: any): any;
    renderUpload(): JSX.Element[];
    deleteRecursive(id: any): Promise<void> | Promise<[any, any, any, any, any, any, any, any, any, any]>;
    deleteItem(deleteItem: any): void;
    renderDeleteDialog(): false | JSX.Element;
    renderViewDialog(): JSX.Element;
    renderError(): JSX.Element;
    updateItemsAcl(info: any): void;
    changeToPath(): void;
    renderBreadcrumb(): (JSX.Element | JSX.Element[])[];
    renderPath(): JSX.Element;
}
declare namespace FileBrowser {
    namespace defaultProps {
        const objectAddBoolean: boolean;
        const objectEditBoolean: boolean;
        const objectStatesView: boolean;
        const objectImportExport: boolean;
        const objectEditOfAccessControl: boolean;
        function modalNewObject(): void;
        function modalEditOfAccessControl(): void;
    }
    namespace propTypes {
        const key: PropTypes.Requireable<string>;
        const style: PropTypes.Requireable<object>;
        const className: PropTypes.Requireable<string>;
        const t: PropTypes.Requireable<(...args: any[]) => any>;
        const lang: PropTypes.Requireable<string>;
        const socket: PropTypes.Requireable<object>;
        const ready: PropTypes.Requireable<boolean>;
        const expertMode: PropTypes.Requireable<boolean>;
        const showToolbar: PropTypes.Requireable<boolean>;
        const allowUpload: PropTypes.Requireable<boolean>;
        const allowDownload: PropTypes.Requireable<boolean>;
        const allowCreateFolder: PropTypes.Requireable<boolean>;
        const allowDelete: PropTypes.Requireable<boolean>;
        const allowView: PropTypes.Requireable<boolean>;
        const imagePrefix: PropTypes.Requireable<string>;
        const showExpertButton: PropTypes.Requireable<boolean>;
        const viewType: PropTypes.Requireable<string>;
        const showViewTypeButton: PropTypes.Requireable<boolean>;
        const selected: PropTypes.Requireable<string>;
        const tileView: PropTypes.Requireable<boolean>;
        const filterFiles: PropTypes.Requireable<any[]>;
        const filterByType: PropTypes.Requireable<string>;
        const onSelect: PropTypes.Requireable<(...args: any[]) => any>;
    }
}
import React from "react";
import PropTypes from "prop-types";
