{"version":3,"sources":["i18n.js"],"names":["I18n","lang","words","Object","keys","forEach","word","translations","console","warn","e","error","translation","w","log","args","arg","replace","window","sysLang"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;IACMA,I;;;;;;;;AACF;AACJ;AACA;AACA;;AAGI;AACJ;AACA;AACA;;AAGI;AACJ;AACA;AACA;AACI,yBAAmBC,IAAnB,EAAyB;AACrB,UAAIA,IAAJ,EAAU;AACND,QAAAA,IAAI,CAACC,IAAL,GAAYA,IAAZ;AACH;AACJ;AAEA;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACK,4BAA0BC,KAA1B,EAAiCD,IAAjC,EAAuC;AACnC,UAAI;AACA,YAAI,CAACA,IAAL,EAAW;AACPE,UAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,OAAnB,CAA2B,UAAAC,IAAI,EAAI;AAC/BH,YAAAA,MAAM,CAACC,IAAP,CAAYF,KAAK,CAACI,IAAD,CAAjB,EAAyBD,OAAzB,CAAiC,UAAAJ,IAAI,EAAI;AACrC,kBAAI,CAACD,IAAI,CAACO,YAAL,CAAkBN,IAAlB,CAAL,EAA8B;AAC1BO,gBAAAA,OAAO,CAACC,IAAR,kCAAuCR,IAAvC;AACH;;AACD,kBAAI,CAACD,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,CAAL,EAAoC;AAChCN,gBAAAA,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,IAAgCJ,KAAK,CAACI,IAAD,CAAL,CAAYL,IAAZ,CAAhC;AACH,eAFD,MAEO,IAAID,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,MAAkCJ,KAAK,CAACI,IAAD,CAAL,CAAYL,IAAZ,CAAtC,EAAyD;AAC5DO,gBAAAA,OAAO,CAACC,IAAR,kCAAsCH,IAAtC,qBAAmDL,IAAnD,0CAAqFD,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,CAArF,uBAA8HJ,KAAK,CAACI,IAAD,CAAL,CAAYL,IAAZ,CAA9H;AACH;AACJ,aATD;AAUH,WAXD;AAYH,SAbD,MAaO;AACH,cAAI,CAACD,IAAI,CAACO,YAAL,CAAkBN,IAAlB,CAAL,EAA8B;AAC1BO,YAAAA,OAAO,CAACC,IAAR,kCAAuCR,IAAvC;AACH;;AACDD,UAAAA,IAAI,CAACO,YAAL,CAAkBN,IAAlB,IAA0BD,IAAI,CAACO,YAAL,CAAkBN,IAAlB,KAA2B,EAArD;AACAE,UAAAA,MAAM,CAACC,IAAP,CAAYF,KAAZ,EACKG,OADL,CACa,UAAAC,IAAI,EAAI;AACb,gBAAI,CAACN,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,CAAL,EAAoC;AAChCN,cAAAA,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,IAAgCJ,KAAK,CAACI,IAAD,CAArC;AACH,aAFD,MAEO,IAAIN,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,MAAkCJ,KAAK,CAACI,IAAD,CAA3C,EAAmD;AACtDE,cAAAA,OAAO,CAACC,IAAR,kCAAsCH,IAAtC,qBAAmDL,IAAnD,0CAAqFD,IAAI,CAACO,YAAL,CAAkBN,IAAlB,EAAwBK,IAAxB,CAArF,uBAA8HJ,KAAK,CAACI,IAAD,CAAnI;AACH;AACJ,WAPL;AAQH;AACJ,OA5BD,CA4BE,OAAOI,CAAP,EAAU;AACRF,QAAAA,OAAO,CAACG,KAAR,sCAA4CD,CAA5C;AACH;AACL;AAED;AACJ;AACA;AACA;;;;WACI,yBAAuBH,YAAvB,EAAqC;AACjC,UAAIA,YAAJ,EAAkB;AACdP,QAAAA,IAAI,CAACO,YAAL,GAAoBA,YAApB;AACH;AACJ;AAED;AACJ;AACA;AACA;;;;WACI,uBAAqB;AACjB,aAAOP,IAAI,CAACC,IAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,WAASK,IAAT,EAAwB;AACpB,UAAMM,WAAW,GAAGZ,IAAI,CAACO,YAAL,CAAkBP,IAAI,CAACC,IAAvB,CAApB;;AACA,UAAIW,WAAJ,EAAiB;AACb,YAAMC,CAAC,GAAGD,WAAW,CAACN,IAAD,CAArB;;AACA,YAAIO,CAAJ,EAAO;AACHP,UAAAA,IAAI,GAAGO,CAAP;AACH,SAFD,MAEO;AACHL,UAAAA,OAAO,CAACM,GAAR,sBAA0BR,IAA1B;AACH;AACJ;;AATmB,wCAANS,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAUpB,+BAAkBA,IAAlB,2BAAwB;AAAnB,YAAMC,GAAG,YAAT;AACDV,QAAAA,IAAI,GAAGA,IAAI,CAACW,OAAL,CAAa,IAAb,EAAmBD,GAAnB,CAAP;AACH;;AACD,aAAOV,IAAP;AACH;;;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;;;gBA/GMN,I,kBAKoB,E;;gBALpBA,I,UAWYkB,MAAM,CAACC,OAAP,IAAkB,I;;eAsGrBnB,I","sourcesContent":["/***\r\n * Copyright 2018-2019 bluefox <dogafox@gmail.com>\r\n *\r\n * MIT License\r\n *\r\n ***/\r\n\r\n /**\r\n  * Translation string management.\r\n  */\r\nclass I18n {\r\n    /**\r\n     * List of all languages with their translations.\r\n     * @type {{ [lang in ioBroker.Languages]?: Record<string, string>; }}\r\n     */\r\n    static translations = {};\r\n\r\n    /**\r\n     * The currently displayed language.\r\n     * @type {ioBroker.Languages}\r\n     */\r\n    static lang = window.sysLang || 'en';\r\n\r\n    /**\r\n     * Set the language to display.\r\n     * @param {ioBroker.Languages} lang\r\n     */\r\n    static setLanguage(lang) {\r\n        if (lang) {\r\n            I18n.lang = lang;\r\n        }\r\n    }\r\n\r\n     /**\r\n      * Add translations\r\n      * User can provide two types of structures:\r\n      * - {\"word1\": \"translated word1\", \"word2\": \"translated word2\"}, but in this case the lang must be provided\r\n      * - {\"word1\": {\"en\": \"translated en word1\", \"de\": \"translated de word1\"}, \"word2\": {\"en\": \"translated en word2\", \"de\": \"translated de word2\"}}, but no lang must be provided\r\n      * @param {object} words additional words for specific language\r\n      * @param {ioBroker.Languages} lang\r\n      */\r\n     static extendTranslations(words, lang) {\r\n         try {\r\n             if (!lang) {\r\n                 Object.keys(words).forEach(word => {\r\n                     Object.keys(words[word]).forEach(lang => {\r\n                         if (!I18n.translations[lang]) {\r\n                             console.warn(`Used unknown language: ${lang}`);\r\n                         }\r\n                         if (!I18n.translations[lang][word]) {\r\n                             I18n.translations[lang][word] = words[word][lang];\r\n                         } else if (I18n.translations[lang][word] !== words[word][lang]) {\r\n                             console.warn(`Translation for word \"${word}\" in \"${lang}\" was ignored: existing = \"${I18n.translations[lang][word]}\", new = ${words[word][lang]}`);\r\n                         }\r\n                     });\r\n                 });\r\n             } else {\r\n                 if (!I18n.translations[lang]) {\r\n                     console.warn(`Used unknown language: ${lang}`);\r\n                 }\r\n                 I18n.translations[lang] = I18n.translations[lang] || {};\r\n                 Object.keys(words)\r\n                     .forEach(word => {\r\n                         if (!I18n.translations[lang][word]) {\r\n                             I18n.translations[lang][word] = words[word];\r\n                         } else if (I18n.translations[lang][word] !== words[word]) {\r\n                             console.warn(`Translation for word \"${word}\" in \"${lang}\" was ignored: existing = \"${I18n.translations[lang][word]}\", new = ${words[word]}`);\r\n                         }\r\n                     });\r\n             }\r\n         } catch (e) {\r\n             console.error(`Cannot apply translations: ${e}`);\r\n         }\r\n    }\r\n\r\n    /**\r\n     * Sets all translations (in all languages).\r\n     * @param {{ [lang in ioBroker.Languages]?: Record<string, string>; }} translations\r\n     */\r\n    static setTranslations(translations) {\r\n        if (translations) {\r\n            I18n.translations = translations;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the currently chosen language.\r\n     * @returns {ioBroker.Languages} The current language.\r\n     */\r\n    static getLanguage() {\r\n        return I18n.lang;\r\n    }\r\n\r\n    /**\r\n     * Translate the given string to the selected language.\r\n     * @param {string} word The (key) word to look up the string.\r\n     * @param {string[]} args Optional arguments which will replace the first (second, third, ...) occurence of %s\r\n     */\r\n    static t(word, ...args) {\r\n        const translation = I18n.translations[I18n.lang];\r\n        if (translation) {\r\n            const w = translation[word];\r\n            if (w) {\r\n                word = w;\r\n            } else {\r\n                console.log(`Translate: ${word}`);\r\n            }\r\n        }\r\n        for (const arg of args) {\r\n            word = word.replace('%s', arg);\r\n        }\r\n        return word;\r\n    }\r\n}\r\n\r\n/*I18n.translations = {\r\n    'en': require('./i18n/en'),\r\n    'ru': require('./i18n/ru'),\r\n    'de': require('./i18n/de'),\r\n};\r\nI18n.fallbacks = true;\r\nI18n.t = function () {};*/\r\n\r\nexport default I18n;"],"file":"i18n.js"}