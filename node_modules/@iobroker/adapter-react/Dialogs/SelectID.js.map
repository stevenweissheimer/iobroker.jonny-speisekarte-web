{"version":3,"sources":["SelectID.js"],"names":["styles","theme","headerID","fontWeight","fontStyle","dialog","height","content","overflow","titleRoot","whiteSpace","width","display","textOverflow","SelectID","props","dialogName","filters","window","localStorage","getItem","JSON","parse","e","selected","filter","id","state","name","onClose","onOk","multiSelect","title","length","I18n","t","classes","key","paper","root","foldersFirst","imagePrefix","prefix","showExpertButton","undefined","columns","types","lang","getLanguage","socket","notEditable","themeName","themeType","customFilter","filterConfig","setItem","stringify","isDouble","setState","handleOk","ok","handleCancel","cancel","React","Component","propTypes","PropTypes","string","object","func","bool","isRequired","isFloatComma","dateFormat","oneOfType","array","statesOnly","_export"],"mappings":"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","sourcesContent":["/**\r\n * Copyright 2018-2020 bluefox <dogafox@gmail.com>\r\n *\r\n * MIT License\r\n *\r\n **/\r\n// please do not delete React, as without it other projects could not be compiled: ReferenceError: React is not defined\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nimport I18n from '../i18n';\r\nimport ObjectBrowser from '../Components/ObjectBrowser';\r\n\r\nconst styles = theme => ({\r\n    headerID: {\r\n        fontWeight: 'bold',\r\n        fontStyle: 'italic'\r\n    },\r\n    dialog: {\r\n        height: '95%'\r\n    },\r\n    content: {\r\n        height: '100%',\r\n        overflow: 'hidden'\r\n    },\r\n    titleRoot: {\r\n        whiteSpace: 'nowrap',\r\n        width: 'calc(100% - 72px)',\r\n        overflow: 'hidden',\r\n        display: 'inline-block',\r\n        textOverflow: 'ellipsis',\r\n    }\r\n});\r\n\r\n/**\r\n * @typedef {object} SelectIDProps\r\n * @property {string} [key] The key to identify this component.\r\n * @property {string} [dialogName] The internal name of the dialog; default: \"default\"\r\n * @property {string} [title] The dialog title; default: Please select object ID... (translated)\r\n * @property {boolean} [multiSelect] Set to true to allow the selection of multiple IDs.\r\n * @property {boolean} [foldersFirst] Show folders before any leaves.\r\n * @property {string} [imagePrefix] Prefix (default: '.')\r\n * @property {boolean} [showExpertButton] Show the expert button?\r\n * @property {import('../Components/types').ObjectBrowserColumn[]} [columns] Columns to display; default: 'name', 'type', 'role', 'room', 'func', 'val'\r\n * @property {import('../Components/types').ObjectBrowserType[]} [types] Object types to show; default: 'state' only\r\n * @property {ioBroker.Languages} [lang] The language.\r\n * @property {import('../Connection').default} socket The socket connection.\r\n * @property {boolean} [notEditable] Can't objects be edited? (default: true)\r\n * @property {string} [themeName] Theme name.\r\n * @property {string} [themeType] Theme type.\r\n * @property {import('../Components/types').ObjectBrowserCustomFilter} [customFilter] Custom filter.\r\n * @property {string | string[]} [selected] The selected IDs.\r\n * @property {string} [ok] The ok button text; default: OK (translated)\r\n * @property {string} [cancel] The cancel button text; default: Cancel (translated)\r\n * @property {() => void} onClose Close handler that is always called when the dialog is closed.\r\n * @property {(selected: string | string[] | undefined, name: string) => void} onOk Handler that is called when the user presses OK.\r\n * @property {{headerID: string; dialog: string; content: string}} [classes] The styling class names.\r\n *\r\n * @extends {React.Component<SelectIDProps>}\r\n */\r\nclass SelectID extends React.Component {\r\n    /**\r\n     * @param {SelectIDProps} props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.dialogName = this.props.dialogName || 'default';\r\n        this.dialogName = 'SelectID.' + this.dialogName;\r\n\r\n        this.filters = window.localStorage.getItem(this.dialogName) || '{}';\r\n\r\n        try {\r\n            this.filters = JSON.parse(this.filters);\r\n        } catch (e) {\r\n            this.filters = {};\r\n        }\r\n\r\n        let selected = this.props.selected || [];\r\n        if (typeof selected !== 'object') {\r\n            selected = [selected];\r\n        }\r\n        selected = selected.filter(id => id);\r\n\r\n        this.state =  {\r\n            selected,\r\n            name: ''\r\n        };\r\n    }\r\n\r\n    handleCancel() {\r\n        this.props.onClose();\r\n    };\r\n\r\n    handleOk() {\r\n        this.props.onOk(this.props.multiSelect ? this.state.selected : this.state.selected[0] || '', this.state.name);\r\n        this.props.onClose();\r\n    };\r\n\r\n    render() {\r\n        let title;\r\n        if (this.state.name || this.state.selected.length) {\r\n            if (this.state.selected.length === 1) {\r\n                title = [\r\n                    <span key=\"selected\">{ I18n.t('ra_Selected') } </span>,\r\n                    <span key=\"id\" className={ this.props.classes.headerID }>{\r\n                        (this.state.name || this.state.selected) + (this.state.name ? ' [' + this.state.selected + ']' : '')\r\n                    }</span>\r\n                ];\r\n            } else {\r\n                title = [\r\n                    <span key=\"selected\">{ I18n.t('ra_Selected') } </span>,\r\n                    <span key=\"id\" className={ this.props.classes.headerID }>{\r\n                        I18n.t('%s items', this.state.selected.length)\r\n                    }</span>\r\n                ];\r\n            }\r\n        } else {\r\n            title = this.props.title || I18n.t('ra_Please select object ID...');\r\n        }\r\n\r\n        return <Dialog\r\n            key={this.props.key}\r\n            disableBackdropClick\r\n            maxWidth={false}\r\n            disableEscapeKeyDown\r\n            classes={{paper: this.props.classes.dialog}}\r\n            fullWidth={true}\r\n            open={true}\r\n            aria-labelledby=\"selectid-dialog-title\"\r\n        >\r\n            <DialogTitle id=\"selectid-dialog-title\" classes={{root: this.props.classes.titleRoot}}>{ title }</DialogTitle>\r\n            <DialogContent className={this.props.classes.content}>\r\n                <ObjectBrowser\r\n                    foldersFirst={ this.props.foldersFirst }\r\n                    imagePrefix={ this.props.imagePrefix || this.props.prefix } // prefix is for back compatibility\r\n                    defaultFilters={ this.filters }\r\n                    dialogName={this.dialogName}\r\n                    showExpertButton={ this.props.showExpertButton !== undefined ? this.props.showExpertButton : true }\r\n                    style={ {width: '100%', height: '100%'} }\r\n                    columns={ this.props.columns || ['name', 'type', 'role', 'room', 'func', 'val'] }\r\n                    types={ this.props.types || ['state'] }\r\n                    t={ I18n.t }\r\n                    lang={ this.props.lang || I18n.getLanguage() }\r\n                    socket={ this.props.socket }\r\n                    selected={ this.state.selected }\r\n                    multiSelect={ this.props.multiSelect }\r\n                    notEditable={ this.props.notEditable === undefined ? true : this.props.notEditable }\r\n                    name={ this.state.name }\r\n                    themeName={ this.props.themeName }\r\n                    themeType={ this.props.themeType }\r\n                    customFilter={ this.props.customFilter }\r\n                    onFilterChanged={ filterConfig => {\r\n                        this.filters = filterConfig;\r\n                        window.localStorage.setItem(this.dialogName, JSON.stringify(filterConfig));\r\n                    } }\r\n                    onSelect={ (selected, name, isDouble) => {\r\n                        if (JSON.stringify(selected) !== JSON.stringify(this.state.selected)) {\r\n                            this.setState({selected, name}, () =>\r\n                                isDouble && this.handleOk());\r\n                        } else if (isDouble) {\r\n                            this.handleOk();\r\n                        }\r\n                    } }\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" onClick={ () => this.handleOk() } disabled={ !this.state.selected.length } color=\"primary\">{ this.props.ok || I18n.t('ra_Ok') }</Button>\r\n                <Button variant=\"contained\" onClick={ () => this.handleCancel() }>{ this.props.cancel || I18n.t('ra_Cancel') }</Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nSelectID.propTypes = {\r\n    dialogName: PropTypes.string, // where to store settings in localStorage\r\n    classes: PropTypes.object,\r\n    onClose: PropTypes.func,\r\n    notEditable: PropTypes.bool,\r\n    onOk: PropTypes.func.isRequired,\r\n    title: PropTypes.string,\r\n    lang: PropTypes.string,\r\n    foldersFirst: PropTypes.bool,\r\n    isFloatComma: PropTypes.bool,\r\n    dateFormat: PropTypes.string,\r\n    selected: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.array\r\n    ]),\r\n    customFilter: PropTypes.object, // optional {common: {custom: true}} or {common: {custom: 'sql.0'}}\r\n    statesOnly: PropTypes.bool,\r\n    socket: PropTypes.object.isRequired,\r\n    cancel: PropTypes.string,\r\n    imagePrefix: PropTypes.string,\r\n    ok: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    themeType: PropTypes.string,\r\n    showExpertButton: PropTypes.bool,\r\n    multiSelect: PropTypes.bool,\r\n    types: PropTypes.array,   // optional ['state', 'instance', 'channel']\r\n    columns: PropTypes.array, // optional ['name', 'type', 'role', 'room', 'func', 'val', 'buttons']\r\n};\r\n\r\n/** @type {typeof SelectID} */\r\nconst _export = withStyles(styles)(SelectID);\r\nexport default _export;\r\n"],"file":"SelectID.js"}