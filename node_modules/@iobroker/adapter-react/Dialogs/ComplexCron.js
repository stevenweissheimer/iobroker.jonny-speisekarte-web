"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _index = require("@material-ui/core/styles/index");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _DialogTitle = _interopRequireDefault(require("@material-ui/core/DialogTitle"));

var _DialogContent = _interopRequireDefault(require("@material-ui/core/DialogContent"));

var _DialogActions = _interopRequireDefault(require("@material-ui/core/DialogActions"));

var _Dialog = _interopRequireDefault(require("@material-ui/core/Dialog"));

var _Check = _interopRequireDefault(require("@material-ui/icons/Check"));

var _Cancel = _interopRequireDefault(require("@material-ui/icons/Cancel"));

var _ComplexCron = _interopRequireDefault(require("../Components/ComplexCron"));

var _i18n = _interopRequireDefault(require("../i18n"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Generate cron expression
var styles = function styles(theme) {
  return {
    headerID: {
      fontWeight: 'bold',
      fontStyle: 'italic'
    },
    radio: {
      display: 'inline-block'
    },
    dialogPaper: {
      height: 'calc(100% - 96px)'
    },
    buttonIcon: {
      marginRight: theme.spacing(1)
    }
  };
};

var DialogComplexCron = /*#__PURE__*/function (_React$Component) {
  _inherits(DialogComplexCron, _React$Component);

  var _super = _createSuper(DialogComplexCron);

  function DialogComplexCron(props) {
    var _this;

    _classCallCheck(this, DialogComplexCron);

    _this = _super.call(this, props);
    var cron;

    if (_this.props.cron && typeof _this.props.cron === 'string' && _this.props.cron.replace(/^["']/, '')[0] !== '{') {
      cron = _this.props.cron.replace(/['"]/g, '').trim();
    } else {
      cron = _this.props.cron || '{}';

      if (typeof cron === 'string') {
        cron = cron.replace(/^["']/, '').replace(/["']\n?$/, '');
      }
    }

    _this.state = {
      cron: cron
    };
    return _this;
  }

  _createClass(DialogComplexCron, [{
    key: "handleCancel",
    value: function handleCancel() {
      this.props.onClose();
    }
  }, {
    key: "handleOk",
    value: function handleOk() {
      this.props.onOk(this.state.cron);
      this.props.onClose();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/_react["default"].createElement(_Dialog["default"], {
        disableBackdropClick: true,
        disableEscapeKeyDown: true,
        maxWidth: "md",
        fullWidth: true,
        classes: {
          paper: this.props.classes.dialogPaper
        },
        open: true,
        "aria-labelledby": "cron-dialog-title"
      }, /*#__PURE__*/_react["default"].createElement(_DialogTitle["default"], {
        id: "cron-dialog-title"
      }, this.props.title || _i18n["default"].t('ra_Define schedule...')), /*#__PURE__*/_react["default"].createElement(_DialogContent["default"], {
        style: {
          height: '100%',
          overflow: 'hidden'
        }
      }, /*#__PURE__*/_react["default"].createElement(_ComplexCron["default"], {
        cronExpression: this.state.cron,
        onChange: function onChange(cron) {
          return _this2.setState({
            cron: cron
          });
        },
        language: _i18n["default"].getLanguage()
      })), /*#__PURE__*/_react["default"].createElement(_DialogActions["default"], null, /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        variant: "contained",
        onClick: function onClick() {
          return _this2.handleOk();
        },
        color: "primary"
      }, /*#__PURE__*/_react["default"].createElement(_Check["default"], {
        className: this.props.classes.buttonIcon
      }), this.props.ok || _i18n["default"].t('ra_Ok')), /*#__PURE__*/_react["default"].createElement(_Button["default"], {
        variant: "contained",
        onClick: function onClick() {
          return _this2.handleCancel();
        }
      }, /*#__PURE__*/_react["default"].createElement(_Cancel["default"], {
        className: this.props.classes.buttonIcon
      }), this.props.cancel || _i18n["default"].t('ra_Cancel'))));
    }
  }]);

  return DialogComplexCron;
}(_react["default"].Component);

DialogComplexCron.propTypes = {
  classes: _propTypes["default"].object,
  onClose: _propTypes["default"].func,
  onOk: _propTypes["default"].func.isRequired,
  title: _propTypes["default"].string,
  cron: _propTypes["default"].string,
  cancel: _propTypes["default"].string,
  ok: _propTypes["default"].string,
  simple: _propTypes["default"].bool,
  language: _propTypes["default"].string
};

var _default = (0, _index.withStyles)(styles)(DialogComplexCron);

exports["default"] = _default;
//# sourceMappingURL=ComplexCron.js.map
