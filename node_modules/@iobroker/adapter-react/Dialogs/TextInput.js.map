{"version":3,"sources":["TextInput.js"],"names":["styles","TextInput","props","state","text","input","error","key","onClose","titleText","promptText","labelText","type","e","charCode","verify","target","value","rule","setState","applyText","cancelText","React","Component","propTypes","PropTypes","string","func","isRequired","replace","_export"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withWidth from \"@material-ui/core/withWidth\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst styles = {\r\n\r\n};\r\n\r\n/**\r\n * @typedef {object} TextInputProps\r\n * @property {string} [key] The key to identify this component.\r\n * @property {(text: string | null) => void} onClose The dialog close callback.\r\n * @property {string} titleText The title text.\r\n * @property {string} [promptText] Prompt text (default: empty).\r\n * @property {string} [labelText] Label text (default: empty).\r\n * @property {string} cancelText The text of the cancel button.\r\n * @property {string} applyText The text of the apply button.\r\n * @property {(text: string) => string} [verify] The verification callback. Return a non-empty string if there was an error.\r\n * @property {(text: string) => string} [rule] The text replacement callback.\r\n * @property {'text' | 'number' | 'password' | 'email'} [type] The type of the textbox (default: text).\r\n * @property {string} [input] The input when opening the dialog.\r\n *\r\n * @extends {React.Component<TextInputProps>}\r\n */\r\nclass TextInput extends React.Component {\r\n    /**\r\n     * @param {Readonly<TextInputProps>} props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: this.props.input || '',\r\n            error: ''\r\n        }\r\n    }\r\n    render() {\r\n        return <Dialog key={this.props.key} open={true} onClose={() => this.props.onClose(null)} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">{this.props.titleText}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {this.props.promptText}\r\n                </DialogContentText>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    error={!!this.state.error}\r\n                    title={this.state.error}\r\n                    value={this.state.text}\r\n                    label={this.props.labelText || ''}\r\n                    type={this.props.type || 'text'}\r\n                    onKeyPress={e => e.charCode === 13 && this.state.text && this.props.onClose(this.state.text)}\r\n                    onChange={e => {\r\n                        let error = '';\r\n                        if (this.props.verify) {\r\n                            error = !this.props.verify(e.target.value);\r\n                        }\r\n\r\n                        if (this.props.rule) {\r\n                            this.setState({text: this.props.rule(e.target.value), error});\r\n                        } else {\r\n                            this.setState({text: e.target.value, error});\r\n                        }\r\n                    }}\r\n                    fullWidth\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" disabled={!this.state.text || this.state.error} onClick={() => this.props.onClose(this.state.text)}\r\n                        color=\"primary\">{this.props.applyText}</Button>\r\n                <Button variant=\"contained\" onClick={() => this.props.onClose(null)} >{this.props.cancelText}</Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n}\r\n\r\nTextInput.propTypes = {\r\n    key: PropTypes.string,\r\n    onClose: PropTypes.func.isRequired,\r\n    titleText: PropTypes.string.isRequired,\r\n    promptText: PropTypes.string,\r\n    labelText: PropTypes.string,\r\n    cancelText: PropTypes.string.isRequired,\r\n    applyText: PropTypes.string.isRequired,\r\n    verify: PropTypes.func,\r\n    replace: PropTypes.func,\r\n    type: PropTypes.string, // text, number, password, email\r\n    input: PropTypes.string,\r\n};\r\n\r\n/** @type {typeof TextInput} */\r\nconst _export = withWidth()(withStyles(styles)(TextInput));\r\nexport default _export;"],"file":"TextInput.js"}