export default _export;
export type SelectIDProps = {
    /**
     * The key to identify this component.
     */
    key?: string;
    /**
     * The internal name of the dialog; default: "default"
     */
    dialogName?: string;
    /**
     * The dialog title; default: Please select object ID... (translated)
     */
    title?: string;
    /**
     * Set to true to allow the selection of multiple IDs.
     */
    multiSelect?: boolean;
    /**
     * Show folders before any leaves.
     */
    foldersFirst?: boolean;
    /**
     * Prefix (default: '.')
     */
    imagePrefix?: string;
    /**
     * Show the expert button?
     */
    showExpertButton?: boolean;
    /**
     * Columns to display; default: 'name', 'type', 'role', 'room', 'func', 'val'
     */
    columns?: import('../Components/types').ObjectBrowserColumn[];
    /**
     * Object types to show; default: 'state' only
     */
    types?: import('../Components/types').ObjectBrowserType[];
    /**
     * The language.
     */
    lang?: ioBroker.Languages;
    /**
     * The socket connection.
     */
    socket: import('../Connection').default;
    /**
     * Can't objects be edited? (default: true)
     */
    notEditable?: boolean;
    /**
     * Theme name.
     */
    themeName?: string;
    /**
     * Theme type.
     */
    themeType?: string;
    /**
     * Custom filter.
     */
    customFilter?: import('../Components/types').ObjectBrowserCustomFilter;
    /**
     * The selected IDs.
     */
    selected?: string | string[];
    /**
     * The ok button text; default: OK (translated)
     */
    ok?: string;
    /**
     * The cancel button text; default: Cancel (translated)
     */
    cancel?: string;
    /**
     * Close handler that is always called when the dialog is closed.
     */
    onClose: () => void;
    /**
     * Handler that is called when the user presses OK.
     */
    onOk: (selected: string | string[] | undefined, name: string) => void;
    /**
     * The styling class names.
     */
    classes?: {
        headerID: string;
        dialog: string;
        content: string;
    };
};
/** @type {typeof SelectID} */
declare const _export: typeof SelectID;
/**
 * @typedef {object} SelectIDProps
 * @property {string} [key] The key to identify this component.
 * @property {string} [dialogName] The internal name of the dialog; default: "default"
 * @property {string} [title] The dialog title; default: Please select object ID... (translated)
 * @property {boolean} [multiSelect] Set to true to allow the selection of multiple IDs.
 * @property {boolean} [foldersFirst] Show folders before any leaves.
 * @property {string} [imagePrefix] Prefix (default: '.')
 * @property {boolean} [showExpertButton] Show the expert button?
 * @property {import('../Components/types').ObjectBrowserColumn[]} [columns] Columns to display; default: 'name', 'type', 'role', 'room', 'func', 'val'
 * @property {import('../Components/types').ObjectBrowserType[]} [types] Object types to show; default: 'state' only
 * @property {ioBroker.Languages} [lang] The language.
 * @property {import('../Connection').default} socket The socket connection.
 * @property {boolean} [notEditable] Can't objects be edited? (default: true)
 * @property {string} [themeName] Theme name.
 * @property {string} [themeType] Theme type.
 * @property {import('../Components/types').ObjectBrowserCustomFilter} [customFilter] Custom filter.
 * @property {string | string[]} [selected] The selected IDs.
 * @property {string} [ok] The ok button text; default: OK (translated)
 * @property {string} [cancel] The cancel button text; default: Cancel (translated)
 * @property {() => void} onClose Close handler that is always called when the dialog is closed.
 * @property {(selected: string | string[] | undefined, name: string) => void} onOk Handler that is called when the user presses OK.
 * @property {{headerID: string; dialog: string; content: string}} [classes] The styling class names.
 *
 * @extends {React.Component<SelectIDProps>}
 */
declare class SelectID extends React.Component<SelectIDProps, any, any> {
    /**
     * @param {SelectIDProps} props
     */
    constructor(props: SelectIDProps);
    dialogName: string;
    filters: any;
    handleCancel(): void;
    handleOk(): void;
}
declare namespace SelectID {
    namespace propTypes {
        const dialogName: PropTypes.Requireable<string>;
        const classes: PropTypes.Requireable<object>;
        const onClose: PropTypes.Requireable<(...args: any[]) => any>;
        const notEditable: PropTypes.Requireable<boolean>;
        const onOk: PropTypes.Validator<(...args: any[]) => any>;
        const title: PropTypes.Requireable<string>;
        const lang: PropTypes.Requireable<string>;
        const foldersFirst: PropTypes.Requireable<boolean>;
        const isFloatComma: PropTypes.Requireable<boolean>;
        const dateFormat: PropTypes.Requireable<string>;
        const selected: PropTypes.Requireable<string | any[]>;
        const customFilter: PropTypes.Requireable<object>;
        const statesOnly: PropTypes.Requireable<boolean>;
        const socket: PropTypes.Validator<object>;
        const cancel: PropTypes.Requireable<string>;
        const imagePrefix: PropTypes.Requireable<string>;
        const ok: PropTypes.Requireable<string>;
        const themeName: PropTypes.Requireable<string>;
        const themeType: PropTypes.Requireable<string>;
        const showExpertButton: PropTypes.Requireable<boolean>;
        const multiSelect: PropTypes.Requireable<boolean>;
        const types: PropTypes.Requireable<any[]>;
        const columns: PropTypes.Requireable<any[]>;
    }
}
import React from "react";
import PropTypes from "prop-types";
