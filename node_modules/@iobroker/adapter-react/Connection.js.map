{"version":3,"sources":["Connection.js"],"names":["PROGRESS","CONNECTING","CONNECTED","OBJECTS_LOADED","READY","PERMISSION_ERROR","NOT_CONNECTED","ERRORS","Connection","props","protocol","window","location","host","hostname","autoSubscribes","autoSubscribeLog","port","ioTimeout","Math","max","cmdTimeout","doNotLoadAllObjects","undefined","doNotLoadACL","states","objects","acl","firstConnect","waitForRestart","systemLang","connected","statesSubscribes","objectsSubscribes","onProgress","onError","err","console","error","loaded","loadTimer","loadCounter","certPromise","onConnectionHandlers","onLogHandlers","_promises","startSocket","io","registerSocketOnLoad","scriptLoadCounter","setTimeout","alert","_socket","replace","socketUrl","parts","split","includes","url","connect","query","name","timeout","on","noTimeout","getVersion","then","info","version","major","minor","patch","v","parseInt","_authTimer","onPreConnect","emit","isOk","isSecure","reload","_subscribe","forEach","cb","subscribed","authenticate","message","onLog","_err","toString","JSON","stringify","operation","type","id","obj","objectChange","state","stateChange","text","onCmdStdoutHandler","onCmdStderrHandler","exitCode","onCmdExitHandler","clearTimeout","onConnect","_getUserPermissions","getCompactSystemConfig","data","systemConfig","common","language","navigator","userLanguage","onLanguage","getObjects","onReady","e","search","pathname","hash","binary","reg","indexOf","RegExp","cbs","push","getBinaryState","base64","Object","keys","pos","splice","length","Promise","resolve","oldObj","changed","_rev","_id","test","onObjectChange","task","hasOwnProperty","disableProgressUpdate","reject","res","STATES_LOADED","val","update","callback","isEnable","isEnabled","maintenance","parse","from","user","ts","adapter","instances","objs","pop","delObject","newId","setObject","_renameGroups","newName","getGroups","groups","groupsToRename","filter","group","startsWith","substring","find","instance","command","result","handler","_enum","startkey","endkey","_res","i","rows","value","start","end","isWeb","cert","getObject","certs","certificates","c","_cert","toLowerCase","m","t","trim","linesNumber","lines","files","map","fileName","btoa","Uint8Array","reduce","byte","String","fromCharCode","folderName","hosts","doc","item","users","timeoutMs","args","repo","installed","cmd","cmdId","feature","features","checkFeatureSupported","config","typeOfDiag","pattern","options","values","stepIgnore","sessionId","password","address","ipOrHostName","ip","IPs4","family","IPs6","hardware","networkInterfaces","eth","num","encryptedText","serverName","match","webName","log","filename","entries","exists","category","notifications","isStrict","controller","AbortController","abort","fetch","signal","json","ratings","currentInstance","namespace","compactAdapters","compactInstances","installedCompact","systemConfigCommon","repoCompact","hostsCompact","uuid","PropTypes","func"],"mappings":";;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAEA;AACO,IAAMA,QAAQ,GAAG;AACpB;AACAC,EAAAA,UAAU,EAAE,CAFQ;;AAGpB;AACAC,EAAAA,SAAS,EAAE,CAJS;;AAKpB;AACAC,EAAAA,cAAc,EAAE,CANI;;AAOpB;AACAC,EAAAA,KAAK,EAAE;AARa,CAAjB;;AAWP,IAAMC,gBAAgB,GAAG,iBAAzB;AACA,IAAMC,aAAa,GAAM,mBAAzB;AAEA,IAAMC,MAAM,GAAG;AACXF,EAAAA,gBAAgB,EAAhBA,gBADW;AAEXC,EAAAA,aAAa,EAAbA;AAFW,CAAf;;;IAKME,U;AACF;AACJ;AACA;AACI,sBAAYC,KAAZ,EAAmB;AAAA;;AACfA,IAAAA,KAAK,GAAmBA,KAAK,IAAI;AAAEC,MAAAA,QAAQ,EAAEC,MAAM,CAACC,QAAP,CAAgBF,QAA5B;AAAsCG,MAAAA,IAAI,EAAEF,MAAM,CAACC,QAAP,CAAgBE;AAA5D,KAAjC;AACA,SAAKL,KAAL,GAAwBA,KAAxB;AAEA,SAAKM,cAAL,GAAwB,KAAKN,KAAL,CAAWM,cAAX,IAA6B,EAArD;AACA,SAAKC,gBAAL,GAAwB,KAAKP,KAAL,CAAWO,gBAAnC;AAEA,SAAKP,KAAL,CAAWC,QAAX,GAAwB,KAAKD,KAAL,CAAWC,QAAX,IAAuBC,MAAM,CAACC,QAAP,CAAgBF,QAA/D;AACA,SAAKD,KAAL,CAAWI,IAAX,GAAwB,KAAKJ,KAAL,CAAWI,IAAX,IAAuBF,MAAM,CAACC,QAAP,CAAgBE,QAA/D;AACA,SAAKL,KAAL,CAAWQ,IAAX,GAAwB,KAAKR,KAAL,CAAWQ,IAAX,KAAwBN,MAAM,CAACC,QAAP,CAAgBK,IAAhB,KAAyB,MAAzB,GAAkC,IAAlC,GAAyCN,MAAM,CAACC,QAAP,CAAgBK,IAAjF,CAAxB;AACA,SAAKR,KAAL,CAAWS,SAAX,GAAwBC,IAAI,CAACC,GAAL,CAAS,KAAKX,KAAL,CAAWS,SAAX,IAAyB,KAAlC,EAAyC,KAAzC,CAAxB;AACA,SAAKT,KAAL,CAAWY,UAAX,GAAwBF,IAAI,CAACC,GAAL,CAAS,KAAKX,KAAL,CAAWY,UAAX,IAAyB,IAAlC,EAAwC,IAAxC,CAAxB,CAXe,CAaf;;AACA,SAAKC,mBAAL,GAA2B,KAAKb,KAAL,CAAWa,mBAAX,KAAmCC,SAAnC,GAA+C,IAA/C,GAAsD,KAAKd,KAAL,CAAWa,mBAA5F;AACA,SAAKE,YAAL,GAA2B,KAAKf,KAAL,CAAWe,YAAX,KAAmCD,SAAnC,GAA+C,IAA/C,GAAsD,KAAKd,KAAL,CAAWe,YAA5F;AAEA;;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,GAAL,GAAW,IAAX;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA;;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AAEA;;AACA,SAAKC,gBAAL,GAAwB,EAAxB,CA5Be,CA4Ba;;AAE5B;;AACA,SAAKC,iBAAL,GAAyB,EAAzB,CA/Be,CA+Bc;;AAC7B,SAAKC,UAAL,GAAkB,KAAKzB,KAAL,CAAWyB,UAAX,IAAyB,YAAY,CAAE,CAAzD;;AACA,SAAKC,OAAL,GAAe,KAAK1B,KAAL,CAAW0B,OAAX,IAAsB,UAAUC,GAAV,EAAe;AAACC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AAAoB,KAAzE;;AACA,SAAKG,MAAL,GAAc,KAAd;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AAEA;;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA;;AACA,SAAKC,aAAL,GAAqB,EAArB;AAEA;;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,WAAL;AACH;AAED;AACJ;AACA;AACA;;;;;;AAKI;AACJ;AACA;AACA;AACI,2BAAc;AAAA;;AACV;AACA,UAAI,OAAOnC,MAAM,CAACoC,EAAd,KAAqB,WAAzB,EAAsC;AAClC;AACA,YAAI,OAAOpC,MAAM,CAACqC,oBAAd,KAAuC,UAA3C,EAAuD;AACnD;AACA,eAAKC,iBAAL,GAAyB,KAAKA,iBAAL,IAA0B,CAAnD;AACA,eAAKA,iBAAL;;AAEA,cAAI,KAAKA,iBAAL,GAAyB,EAA7B,EAAiC;AAC7B;AACAC,YAAAA,UAAU,CAAC;AAAA,qBAAM,KAAI,CAACJ,WAAL,EAAN;AAAA,aAAD,EAA2B,GAA3B,CAAV;AACA;AACH,WAJD,MAIO;AACHnC,YAAAA,MAAM,CAACwC,KAAP,CAAa,2BAAb;AACH;AACJ,SAZD,MAYO;AACH;AACAxC,UAAAA,MAAM,CAACqC,oBAAP,CAA4B;AAAA,mBAAM,KAAI,CAACF,WAAL,EAAN;AAAA,WAA5B;AACH;;AACD;AACH,OAnBD,MAmBO;AACH;AACA,YAAI,KAAKM,OAAT,EAAkB;AACd;AACH;AACJ;;AAED,UAAIvC,IAAI,GAAG,KAAKJ,KAAL,CAAWI,IAAtB;AACA,UAAII,IAAI,GAAG,KAAKR,KAAL,CAAWQ,IAAtB;AACA,UAAIP,QAAQ,GAAG,KAAKD,KAAL,CAAWC,QAAX,CAAoB2C,OAApB,CAA4B,GAA5B,EAAiC,EAAjC,CAAf,CA9BU,CAgCV;;AACA,UAAI1C,MAAM,CAAC2C,SAAX,EAAsB;AAClB,YAAIC,KAAK,GAAG5C,MAAM,CAAC2C,SAAP,CAAiBE,KAAjB,CAAuB,GAAvB,CAAZ;AACA3C,QAAAA,IAAI,GAAG0C,KAAK,CAAC,CAAD,CAAL,IAAY1C,IAAnB;AACAI,QAAAA,IAAI,GAAGsC,KAAK,CAAC,CAAD,CAAL,IAAYtC,IAAnB;;AACA,YAAIJ,IAAI,CAAC4C,QAAL,CAAc,KAAd,CAAJ,EAA0B;AACtBF,UAAAA,KAAK,GAAG1C,IAAI,CAAC2C,KAAL,CAAW,KAAX,CAAR;AACA9C,UAAAA,QAAQ,GAAG6C,KAAK,CAAC,CAAD,CAAhB;AACA1C,UAAAA,IAAI,GAAG0C,KAAK,CAAC,CAAD,CAAZ;AACH;AACJ;;AAED,UAAMG,GAAG,aAAMhD,QAAN,gBAAoBG,IAApB,cAA4BI,IAA5B,CAAT;AAEA,WAAKmC,OAAL,GAAezC,MAAM,CAACoC,EAAP,CAAUY,OAAV,CACXD,GADW,EAEX;AACIE,QAAAA,KAAK,EAAE,SADX;AAEIC,QAAAA,IAAI,EAAE,KAAKpD,KAAL,CAAWoD,IAFrB;AAGIC,QAAAA,OAAO,EAAE,KAAKrD,KAAL,CAAWS;AAHxB,OAFW,CAAf;;AASA,WAAKkC,OAAL,CAAaW,EAAb,CAAgB,SAAhB,EAA2B,UAAAC,SAAS,EAAI;AACpC;AACA,YAAIA,SAAS,KAAK,IAAlB,EAAwB;AACpBd,UAAAA,UAAU,CAAC;AAAA,mBACP,KAAI,CAACe,UAAL,GACKC,IADL,CACU,UAAAC,IAAI,EAAI;AACV,wCAA8BA,IAAI,CAACC,OAAL,CAAaZ,KAAb,CAAmB,GAAnB,CAA9B;AAAA;AAAA,kBAAOa,KAAP;AAAA,kBAAcC,KAAd;AAAA,kBAAqBC,KAArB;;AACA,kBAAMC,CAAC,GAAGC,QAAQ,CAACJ,KAAD,EAAQ,EAAR,CAAR,GAAsB,KAAtB,GAA8BI,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAR,GAAsB,GAApD,GAA0DG,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAA5E;;AACA,kBAAIC,CAAC,GAAG,KAAR,EAAe;AACX,gBAAA,KAAI,CAACE,UAAL,GAAkB,IAAlB,CADW,CAEX;;AACA,gBAAA,KAAI,CAACC,YAAL,CAAkB,KAAlB,EAAyB,KAAzB;AACH,eAJD,MAIO;AACH,gBAAA,KAAI,CAACvB,OAAL,CAAawB,IAAb,CAAkB,cAAlB,EAAkC,UAACC,IAAD,EAAOC,QAAP;AAAA,yBAAoB,KAAI,CAACH,YAAL,CAAkBE,IAAlB,EAAwBC,QAAxB,CAApB;AAAA,iBAAlC;AACH;AACJ,aAXL,CADO;AAAA,WAAD,EAYE,GAZF,CAAV;AAaH,SAdD,MAcO;AACH;AACA,UAAA,KAAI,CAAC1B,OAAL,CAAawB,IAAb,CAAkB,cAAlB,EAAkC,UAACC,IAAD,EAAOC,QAAP;AAAA,mBAAoB,KAAI,CAACH,YAAL,CAAkBE,IAAlB,EAAwBC,QAAxB,CAApB;AAAA,WAAlC;AACH;AACJ,OApBD;;AAsBA,WAAK1B,OAAL,CAAaW,EAAb,CAAgB,WAAhB,EAA6B,YAAM;AAC/B,QAAA,KAAI,CAAC7B,UAAL,CAAgBlC,QAAQ,CAACI,KAAzB;;AACA,QAAA,KAAI,CAAC2B,SAAL,GAAiB,IAAjB;;AAEA,YAAI,KAAI,CAACF,cAAT,EAAyB;AACrBlB,UAAAA,MAAM,CAACC,QAAP,CAAgBmE,MAAhB,CAAuB,KAAvB;AACH,SAFD,MAEO;AACH,UAAA,KAAI,CAACC,UAAL,CAAgB,IAAhB;;AACA,UAAA,KAAI,CAACrC,oBAAL,CAA0BsC,OAA1B,CAAkC,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAAC,IAAD,CAAN;AAAA,WAApC;AACH;AACJ,OAVD;;AAYA,WAAK9B,OAAL,CAAaW,EAAb,CAAgB,YAAhB,EAA8B,YAAM;AAChC,QAAA,KAAI,CAAChC,SAAL,GAAkB,KAAlB;AACA,QAAA,KAAI,CAACoD,UAAL,GAAkB,KAAlB;;AACA,QAAA,KAAI,CAACjD,UAAL,CAAgBlC,QAAQ,CAACC,UAAzB;;AACA,QAAA,KAAI,CAAC0C,oBAAL,CAA0BsC,OAA1B,CAAkC,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAAC,KAAD,CAAN;AAAA,SAApC;AACH,OALD;;AAOA,WAAK9B,OAAL,CAAaW,EAAb,CAAgB,gBAAhB,EAAkC;AAAA,eAC9B,KAAI,CAACqB,YAAL,EAD8B;AAAA,OAAlC;;AAGA,WAAKhC,OAAL,CAAaW,EAAb,CAAgB,KAAhB,EAAuB,UAAAsB,OAAO,EAAI;AAC9B,QAAA,KAAI,CAAC5E,KAAL,CAAW6E,KAAX,IAAoB,KAAI,CAAC7E,KAAL,CAAW6E,KAAX,CAAiBD,OAAjB,CAApB;;AACA,QAAA,KAAI,CAACzC,aAAL,CAAmBqC,OAAnB,CAA2B,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAACG,OAAD,CAAN;AAAA,SAA7B;AACH,OAHD;;AAKA,WAAKjC,OAAL,CAAaW,EAAb,CAAgB,OAAhB,EAAyB,UAAA3B,GAAG,EAAI;AAC5B,YAAImD,IAAI,GAAGnD,GAAG,IAAI,EAAlB;;AACA,YAAI,OAAOmD,IAAI,CAACC,QAAZ,KAAyB,UAA7B,EAAyC;AACrCD,UAAAA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;AACAlD,UAAAA,OAAO,CAACC,KAAR,mCAAyCiD,IAAzC;AACH;;AACDA,QAAAA,IAAI,GAAGA,IAAI,CAACC,QAAL,EAAP;;AACA,YAAID,IAAI,CAAC9B,QAAL,CAAc,qBAAd,CAAJ,EAA0C;AACtC,UAAA,KAAI,CAAC2B,YAAL;AACH,SAFD,MAEO;AACHzE,UAAAA,MAAM,CAACwC,KAAP,yBAA8Bf,GAA9B;AACH;AACJ,OAZD;;AAcA,WAAKgB,OAAL,CAAaW,EAAb,CAAgB,eAAhB,EAAiC,UAAA3B,GAAG;AAAA,eAChCC,OAAO,CAACC,KAAR,0BAAgCF,GAAhC,EADgC;AAAA,OAApC;;AAGA,WAAKgB,OAAL,CAAaW,EAAb,CAAgB,iBAAhB,EAAmC,UAAA3B,GAAG;AAAA,eAClC,KAAI,CAACD,OAAL,CAAa;AAACkD,UAAAA,OAAO,EAAE,eAAV;AAA2BM,UAAAA,SAAS,EAAEvD,GAAG,CAACuD,SAA1C;AAAqDC,UAAAA,IAAI,EAAExD,GAAG,CAACwD,IAA/D;AAAqEC,UAAAA,EAAE,EAAGzD,GAAG,CAACyD,EAAJ,IAAU;AAApF,SAAb,CADkC;AAAA,OAAtC;;AAGA,WAAKzC,OAAL,CAAaW,EAAb,CAAgB,cAAhB,EAAgC,UAAC8B,EAAD,EAAKC,GAAL;AAAA,eAC5B5C,UAAU,CAAC;AAAA,iBAAM,KAAI,CAAC6C,YAAL,CAAkBF,EAAlB,EAAsBC,GAAtB,CAAN;AAAA,SAAD,EAAmC,CAAnC,CADkB;AAAA,OAAhC;;AAGA,WAAK1C,OAAL,CAAaW,EAAb,CAAgB,aAAhB,EAA+B,UAAC8B,EAAD,EAAKG,KAAL;AAAA,eAC3B9C,UAAU,CAAC;AAAA,iBAAM,KAAI,CAAC+C,WAAL,CAAiBJ,EAAjB,EAAqBG,KAArB,CAAN;AAAA,SAAD,EAAoC,CAApC,CADiB;AAAA,OAA/B;;AAGA,WAAK5C,OAAL,CAAaW,EAAb,CAAgB,WAAhB,EAA6B,UAAC8B,EAAD,EAAKK,IAAL;AAAA,eACzB,KAAI,CAACC,kBAAL,IAA2B,KAAI,CAACA,kBAAL,CAAwBN,EAAxB,EAA4BK,IAA5B,CADF;AAAA,OAA7B;;AAGA,WAAK9C,OAAL,CAAaW,EAAb,CAAgB,WAAhB,EAA6B,UAAC8B,EAAD,EAAKK,IAAL;AAAA,eACzB,KAAI,CAACE,kBAAL,IAA2B,KAAI,CAACA,kBAAL,CAAwBP,EAAxB,EAA4BK,IAA5B,CADF;AAAA,OAA7B;;AAGA,WAAK9C,OAAL,CAAaW,EAAb,CAAgB,SAAhB,EAA2B,UAAC8B,EAAD,EAAKQ,QAAL;AAAA,eACvB,KAAI,CAACC,gBAAL,IAAyB,KAAI,CAACA,gBAAL,CAAsBT,EAAtB,EAA0BQ,QAA1B,CADF;AAAA,OAA3B;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,sBAAaxB,IAAb,EAAmBC,QAAnB,EAA6B;AAAA;;AACzB,UAAI,KAAKJ,UAAT,EAAqB;AACjB6B,QAAAA,YAAY,CAAC,KAAK7B,UAAN,CAAZ;AACA,aAAKA,UAAL,GAAkB,IAAlB;AACH;;AAED,WAAK3C,SAAL,GAAiB,IAAjB;AACA,WAAK+C,QAAL,GAAgBA,QAAhB;;AAEA,UAAI,KAAKjD,cAAT,EAAyB;AACrBlB,QAAAA,MAAM,CAACC,QAAP,CAAgBmE,MAAhB,CAAuB,KAAvB;AACH,OAFD,MAEO;AACH,YAAI,KAAKnD,YAAT,EAAuB;AACnB;AACA,eAAKY,SAAL,GAAiBU,UAAU,CAAC,YAAM;AAC9B,YAAA,MAAI,CAACV,SAAL,GAAiB,IAAjB;AACA,YAAA,MAAI,CAACC,WAAL;;AACA,gBAAI,MAAI,CAACA,WAAL,GAAmB,EAAvB,EAA2B;AACvB,cAAA,MAAI,CAAC+D,SAAL;AACH;AACJ,WAN0B,EAMxB,IANwB,CAA3B;;AAQA,cAAI,CAAC,KAAKjE,MAAV,EAAkB;AACd,iBAAKiE,SAAL;AACH;AACJ,SAbD,MAaO;AACH,eAAKtE,UAAL,CAAgBlC,QAAQ,CAACI,KAAzB;AACH;;AAED,aAAK4E,UAAL,CAAgB,IAAhB;;AACA,aAAKrC,oBAAL,CAA0BsC,OAA1B,CAAkC,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAAC,IAAD,CAAN;AAAA,SAApC;AACH;AACJ;AAED;AACJ;AACA;AACA;;;;WACI,uBAAc;AACV,aAAO,KAAKnD,SAAZ;AACH;AAED;AACJ;AACA;AACA;;;;WACI,6BAAoBmD,EAApB,EAAwB;AACpB,UAAI,KAAK1D,YAAT,EAAuB;AACnB,eAAO0D,EAAE,IAAIA,EAAE,EAAf;AACH,OAFD,MAEO;AACH,aAAK9B,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCM,EAAxC;AACH;AACJ;AAED;AACJ;AACA;AACA;;;;WACI,qBAAY;AAAA;;AACR,WAAKuB,mBAAL,CAAyB,UAACrE,GAAD,EAAMT,GAAN,EAAc;AACnC,YAAIS,GAAJ,EAAS;AACL,iBAAO,MAAI,CAACD,OAAL,CAAa,mCAAmCC,GAAhD,CAAP;AACH,SAFD,MAGA,IAAI,CAAC,MAAI,CAACZ,YAAV,EAAwB;AACpB,cAAI,MAAI,CAACe,MAAT,EAAiB;AACb;AACH;;AACD,UAAA,MAAI,CAACA,MAAL,GAAc,IAAd;AACAgE,UAAAA,YAAY,CAAC,MAAI,CAAC/D,SAAN,CAAZ;AACA,UAAA,MAAI,CAACA,SAAL,GAAiB,IAAjB;;AAEA,UAAA,MAAI,CAACN,UAAL,CAAgBlC,QAAQ,CAACE,SAAzB;;AACA,UAAA,MAAI,CAAC0B,YAAL,GAAoB,KAApB;AAEA,UAAA,MAAI,CAACD,GAAL,GAAWA,GAAX;AACH,SAhBkC,CAkBnC;;;AACA,eAAO,MAAI,CAAC+E,sBAAL,GACFxC,IADE,CACG,UAAAyC,IAAI,EAAI;AACV,cAAI,MAAI,CAACnF,YAAT,EAAuB;AACnB,gBAAI,MAAI,CAACe,MAAT,EAAiB;AACb;AACH;;AACD,YAAA,MAAI,CAACA,MAAL,GAAc,IAAd;AACAgE,YAAAA,YAAY,CAAC,MAAI,CAAC/D,SAAN,CAAZ;AACA,YAAA,MAAI,CAACA,SAAL,GAAiB,IAAjB;;AAEA,YAAA,MAAI,CAACN,UAAL,CAAgBlC,QAAQ,CAACE,SAAzB;;AACA,YAAA,MAAI,CAAC0B,YAAL,GAAoB,KAApB;AACH;;AAED,UAAA,MAAI,CAACgF,YAAL,GAAoBD,IAApB;;AACA,cAAI,MAAI,CAACC,YAAL,IAAqB,MAAI,CAACA,YAAL,CAAkBC,MAA3C,EAAmD;AAC/C,YAAA,MAAI,CAAC/E,UAAL,GAAkB,MAAI,CAAC8E,YAAL,CAAkBC,MAAlB,CAAyBC,QAA3C;AACH,WAFD,MAEO;AACH,YAAA,MAAI,CAAChF,UAAL,GAAkBnB,MAAM,CAACoG,SAAP,CAAiBC,YAAjB,IAAiCrG,MAAM,CAACoG,SAAP,CAAiBD,QAApE;;AAEA,gBAAI,MAAI,CAAChF,UAAL,KAAoB,IAApB,IAA4B,MAAI,CAACA,UAAL,KAAoB,IAAhD,IAAwD,MAAI,CAACA,UAAL,KAAoB,IAAhF,EAAsF;AAClF,cAAA,MAAI,CAAC8E,YAAL,CAAkBC,MAAlB,CAAyBC,QAAzB,GAAoC,IAApC;AACA,cAAA,MAAI,CAAChF,UAAL,GAAkB,IAAlB;AACH;AACJ;;AAED,UAAA,MAAI,CAACrB,KAAL,CAAWwG,UAAX,IAAyB,MAAI,CAACxG,KAAL,CAAWwG,UAAX,CAAsB,MAAI,CAACnF,UAA3B,CAAzB;;AAEA,cAAI,CAAC,MAAI,CAACR,mBAAV,EAA+B;AAC3B,mBAAO,MAAI,CAAC4F,UAAL,GACFhD,IADE,CACG,YAAM;AACR,cAAA,MAAI,CAAChC,UAAL,CAAgBlC,QAAQ,CAACI,KAAzB;;AACA,cAAA,MAAI,CAACK,KAAL,CAAW0G,OAAX,IAAsB,MAAI,CAAC1G,KAAL,CAAW0G,OAAX,CAAmB,MAAI,CAACzF,OAAxB,CAAtB;AACH,aAJE,CAAP;AAKH,WAND,MAMO;AACH,YAAA,MAAI,CAACA,OAAL,GAAe;AAAC,+BAAiBiF;AAAlB,aAAf;;AACA,YAAA,MAAI,CAACzE,UAAL,CAAgBlC,QAAQ,CAACI,KAAzB;;AACA,YAAA,MAAI,CAACK,KAAL,CAAW0G,OAAX,IAAsB,MAAI,CAAC1G,KAAL,CAAW0G,OAAX,CAAmB,MAAI,CAACzF,OAAxB,CAAtB;AACH;AACJ,SAvCE,WAwCI,UAAA0F,CAAC;AAAA,iBAAI,MAAI,CAACjF,OAAL,CAAa,gCAAgCiF,CAA7C,CAAJ;AAAA,SAxCL,CAAP;AAyCH,OA5DD;AA6DH;AAED;AACJ;AACA;AACA;;;;WACI,wBAAe;AACX,UAAIzG,MAAM,CAACC,QAAP,CAAgByG,MAAhB,CAAuB5D,QAAvB,CAAgC,QAAhC,CAAJ,EAA+C;AAC3C9C,QAAAA,MAAM,CAACC,QAAP,aAAqBD,MAAM,CAACC,QAAP,CAAgBF,QAArC,eAAkDC,MAAM,CAACC,QAAP,CAAgBC,IAAlE,SAAyEF,MAAM,CAACC,QAAP,CAAgB0G,QAAzF,SAAoG3G,MAAM,CAACC,QAAP,CAAgByG,MAApH,SAA6H1G,MAAM,CAACC,QAAP,CAAgB2G,IAA7I;AACH,OAFD,MAEO;AACH5G,QAAAA,MAAM,CAACC,QAAP,aAAqBD,MAAM,CAACC,QAAP,CAAgBF,QAArC,eAAkDC,MAAM,CAACC,QAAP,CAAgBC,IAAlE,SAAyEF,MAAM,CAACC,QAAP,CAAgB0G,QAAzF,yBAAgH3G,MAAM,CAACC,QAAP,CAAgByG,MAAhI,SAAyI1G,MAAM,CAACC,QAAP,CAAgB2G,IAAzJ;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;WACI,wBAAe1B,EAAf,EAAmB2B,MAAnB,EAA2BtC,EAA3B,EAA+B;AAC3B,UAAI,OAAOsC,MAAP,KAAkB,UAAtB,EAAkC;AAC9BtC,QAAAA,EAAE,GAAGsC,MAAL;AACAA,QAAAA,MAAM,GAAG,KAAT;AACH;;AAED,UAAI,CAAC,KAAKxF,gBAAL,CAAsB6D,EAAtB,CAAL,EAAgC;AAC5B,YAAI4B,GAAG,GAAG5B,EAAE,CACPxC,OADK,CACG,KADH,EACU,KADV,EAELA,OAFK,CAEG,KAFH,EAEU,IAFV,EAGLA,OAHK,CAGG,KAHH,EAGU,KAHV,EAILA,OAJK,CAIG,KAJH,EAIU,KAJV,EAKLA,OALK,CAKG,KALH,EAKU,KALV,EAMLA,OANK,CAMG,KANH,EAMU,KANV,CAAV;;AAQA,YAAIoE,GAAG,CAACC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AACzBD,UAAAA,GAAG,IAAI,GAAP;AACH;;AACD,aAAKzF,gBAAL,CAAsB6D,EAAtB,IAA4B;AAAC4B,UAAAA,GAAG,EAAE,IAAIE,MAAJ,CAAWF,GAAX,CAAN;AAAuBG,UAAAA,GAAG,EAAE;AAA5B,SAA5B;AACA,aAAK5F,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA1B,CAA8BC,IAA9B,CAAmC3C,EAAnC;;AACA,YAAI,KAAKnD,SAAT,EAAoB;AAChB,eAAKqB,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiB,EAA/B;AACH;AACJ,OAjBD,MAiBO;AACH,SAAC,KAAK7D,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA1B,CAA8BnE,QAA9B,CAAuCyB,EAAvC,CAAD,IAA+C,KAAKlD,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA1B,CAA8BC,IAA9B,CAAmC3C,EAAnC,CAA/C;AACH;;AACD,UAAI,OAAOA,EAAP,KAAc,UAAd,IAA4B,KAAKnD,SAArC,EAAgD;AAC5C,YAAIyF,MAAJ,EAAY;AACR,eAAKM,cAAL,CAAoBjC,EAApB,EACK3B,IADL,CACU,UAAA6D,MAAM;AAAA,mBAAI7C,EAAE,CAACW,EAAD,EAAKkC,MAAL,CAAN;AAAA,WADhB,WAEW,UAAAX,CAAC;AAAA,mBAAG/E,OAAO,CAACC,KAAR,qCAA0CuD,EAA1C,iBAAkDJ,IAAI,CAACC,SAAL,CAAe0B,CAAf,CAAlD,EAAH;AAAA,WAFZ;AAGH,SAJD,MAIO;AACH,eAAKhE,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCiB,EAAtC,EAA0C,UAACzD,GAAD,EAAMX,MAAN,EAAiB;AACvDW,YAAAA,GAAG,IAAIC,OAAO,CAACC,KAAR,qCAA0CuD,EAA1C,iBAAkDJ,IAAI,CAACC,SAAL,CAAetD,GAAf,CAAlD,EAAP;AACAX,YAAAA,MAAM,IAAIuG,MAAM,CAACC,IAAP,CAAYxG,MAAZ,EAAoBwD,OAApB,CAA4B,UAAAY,EAAE;AAAA,qBAAIX,EAAE,CAACW,EAAD,EAAKpE,MAAM,CAACoE,EAAD,CAAX,CAAN;AAAA,aAA9B,CAAV;AACH,WAHD;AAIH;AACJ;AACJ;AAED;AACJ;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;;;;WACI,0BAAiBA,EAAjB,EAAqBX,EAArB,EAAyB;AACrB,UAAI,KAAKlD,gBAAL,CAAsB6D,EAAtB,CAAJ,EAA+B;AAC3B,YAAIX,EAAJ,EAAQ;AACJ,cAAMgD,GAAG,GAAG,KAAKlG,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA1B,CAA8BF,OAA9B,CAAsCxC,EAAtC,CAAZ;AACAgD,UAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKlG,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA1B,CAA8BO,MAA9B,CAAqCD,GAArC,EAA0C,CAA1C,CAAd;AACH,SAHD,MAGO;AACH,eAAKlG,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA1B,GAAgC,EAAhC;AACH;;AAED,YAAI,CAAC,KAAK5F,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA3B,IAAkC,CAAC,KAAK5F,gBAAL,CAAsB6D,EAAtB,EAA0B+B,GAA1B,CAA8BQ,MAArE,EAA6E;AACzE,iBAAO,KAAKpG,gBAAL,CAAsB6D,EAAtB,CAAP;AACA,eAAK9D,SAAL,IAAkB,KAAKqB,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiCiB,EAAjC,CAAlB;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,yBAAgBA,EAAhB,EAAoBX,EAApB,EAAwB;AACpB,UAAI,CAAC,KAAKjD,iBAAL,CAAuB4D,EAAvB,CAAL,EAAiC;AAC7B,YAAI4B,GAAG,GAAG5B,EAAE,CAACxC,OAAH,CAAW,KAAX,EAAkB,KAAlB,EAAyBA,OAAzB,CAAiC,KAAjC,EAAwC,IAAxC,CAAV;;AACA,YAAIoE,GAAG,CAACC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EAA6B;AACzBD,UAAAA,GAAG,IAAI,GAAP;AACH;;AACD,aAAKxF,iBAAL,CAAuB4D,EAAvB,IAA6B;AAAC4B,UAAAA,GAAG,EAAE,IAAIE,MAAJ,CAAWF,GAAX,CAAN;AAAuBG,UAAAA,GAAG,EAAE;AAA5B,SAA7B;AACA,aAAK3F,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA3B,CAA+BC,IAA/B,CAAoC3C,EAApC;AACA,aAAKnD,SAAL,IAAkB,KAAKqB,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCiB,EAAtC,CAAlB;AACH,OARD,MAQO;AACH,SAAC,KAAK5D,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA3B,CAA+BnE,QAA/B,CAAwCyB,EAAxC,CAAD,IAAgD,KAAKjD,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA3B,CAA+BC,IAA/B,CAAoC3C,EAApC,CAAhD;AACH;;AACD,aAAOmD,OAAO,CAACC,OAAR,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBzC,EAAlB,EAAsBX,EAAtB,EAA0B;AACtB,UAAI,KAAKjD,iBAAL,CAAuB4D,EAAvB,CAAJ,EAAgC;AAC5B,YAAIX,EAAJ,EAAQ;AACJ,cAAMgD,GAAG,GAAG,KAAKjG,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA3B,CAA+BF,OAA/B,CAAuCxC,EAAvC,CAAZ;AACAgD,UAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKjG,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA3B,CAA+BO,MAA/B,CAAsCD,GAAtC,EAA2C,CAA3C,CAAd;AACH,SAHD,MAGO;AACH,eAAKjG,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA3B,GAAiC,EAAjC;AACH;;AAED,YAAI,KAAK7F,SAAL,KAAmB,CAAC,KAAKE,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA5B,IAAmC,CAAC,KAAK3F,iBAAL,CAAuB4D,EAAvB,EAA2B+B,GAA3B,CAA+BQ,MAAtF,CAAJ,EAAmG;AAC/F,iBAAO,KAAKnG,iBAAL,CAAuB4D,EAAvB,CAAP;AACA,eAAK9D,SAAL,IAAkB,KAAKqB,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCiB,EAAxC,CAAlB;AACH;AACJ;;AACD,aAAOwC,OAAO,CAACC,OAAR,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,sBAAazC,EAAb,EAAiBC,GAAjB,EAAsB;AAAA;;AAClB;AACA,UAAI,CAAC,KAAKpE,OAAV,EAAmB;AACf;AACH;AAED;;;AACA,UAAI6G,MAAJ;AAEA,UAAIC,OAAO,GAAG,KAAd;;AACA,UAAI1C,GAAJ,EAAS;AACL,YAAIA,GAAG,CAAC2C,IAAJ,IAAY,KAAK/G,OAAL,CAAamE,EAAb,CAAhB,EAAkC;AAC9B,eAAKnE,OAAL,CAAamE,EAAb,EAAiB4C,IAAjB,GAAwB3C,GAAG,CAAC2C,IAA5B;AACH;;AAED,YAAI,KAAK/G,OAAL,CAAamE,EAAb,CAAJ,EAAsB;AAClB0C,UAAAA,MAAM,GAAG;AAACG,YAAAA,GAAG,EAAE7C,EAAN;AAAUD,YAAAA,IAAI,EAAE,KAAKlE,OAAL,CAAamE,EAAb,EAAiBD;AAAjC,WAAT;AACH;;AAED,YAAI,CAAC,KAAKlE,OAAL,CAAamE,EAAb,CAAD,IAAqBJ,IAAI,CAACC,SAAL,CAAe,KAAKhE,OAAL,CAAamE,EAAb,CAAf,MAAqCJ,IAAI,CAACC,SAAL,CAAeI,GAAf,CAA9D,EAAmF;AAC/E,eAAKpE,OAAL,CAAamE,EAAb,IAAmBC,GAAnB;AACA0C,UAAAA,OAAO,GAAG,IAAV;AACH;AACJ,OAbD,MAaO,IAAI,KAAK9G,OAAL,CAAamE,EAAb,CAAJ,EAAsB;AACzB0C,QAAAA,MAAM,GAAG;AAACG,UAAAA,GAAG,EAAE7C,EAAN;AAAUD,UAAAA,IAAI,EAAE,KAAKlE,OAAL,CAAamE,EAAb,EAAiBD;AAAjC,SAAT;AACA,eAAO,KAAKlE,OAAL,CAAamE,EAAb,CAAP;AACA2C,QAAAA,OAAO,GAAG,IAAV;AACH;;AAEDR,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhG,iBAAjB,EAAoCgD,OAApC,CAA4C,UAAAyD,GAAG,EAAI;AAC/C,YAAIA,GAAG,KAAK7C,EAAR,IAAc,MAAI,CAAC5D,iBAAL,CAAuByG,GAAvB,EAA4BjB,GAA5B,CAAgCkB,IAAhC,CAAqC9C,EAArC,CAAlB,EAA4D;AACxD,UAAA,MAAI,CAAC5D,iBAAL,CAAuByG,GAAvB,EAA4Bd,GAA5B,CAAgC3C,OAAhC,CAAwC,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACW,EAAD,EAAKC,GAAL,EAAUyC,MAAV,CAAN;AAAA,WAA1C;AACH;AACJ,OAJD;;AAMA,UAAIC,OAAO,IAAI,KAAK/H,KAAL,CAAWmI,cAA1B,EAA0C;AACtC,aAAKnI,KAAL,CAAWmI,cAAX,CAA0B/C,EAA1B,EAA8BC,GAA9B;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAYD,EAAZ,EAAgBG,KAAhB,EAAuB;AACnB,WAAK,IAAM6C,IAAX,IAAmB,KAAK7G,gBAAxB,EAA0C;AACtC,YAAI,KAAKA,gBAAL,CAAsB8G,cAAtB,CAAqCD,IAArC,KAA8C,KAAK7G,gBAAL,CAAsB6G,IAAtB,EAA4BpB,GAA5B,CAAgCkB,IAAhC,CAAqC9C,EAArC,CAAlD,EAA4F;AACxF,eAAK7D,gBAAL,CAAsB6G,IAAtB,EAA4BjB,GAA5B,CAAgC3C,OAAhC,CAAwC,UAAAC,EAAE;AAAA,mBAAIA,EAAE,CAACW,EAAD,EAAKG,KAAL,CAAN;AAAA,WAA1C;AACH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;;;;WACI,mBAAU+C,qBAAV,EAAiC;AAAA;;AAC7B,UAAI,CAAC,KAAKhH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+B,UAACxC,GAAD,EAAM6G,GAAN,EAAc;AACzC,UAAA,MAAI,CAACxH,MAAL,GAAcwH,GAAd;AACA,WAACF,qBAAD,IAA0B,MAAI,CAAC7G,UAAL,CAAgBlC,QAAQ,CAACkJ,aAAzB,CAA1B;AACA,iBAAO9G,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC,MAAI,CAAC7G,MAAN,CAAlC;AACH,SAJD,CADe;AAAA,OAAZ,CAAP;AAMH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,kBAASoE,EAAT,EAAa;AAAA;;AACT,UAAI,CAAC,KAAK9D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,UAAlB,EAA8BiB,EAA9B,EAAkC,UAACzD,GAAD,EAAM4D,KAAN;AAAA,iBAAgB5D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACtC,KAAD,CAA3C;AAAA,SAAlC,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,wBAAeH,EAAf,EAAmB;AAAA;;AACf,UAAI,CAAC,KAAK9D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH,OAHc,CAKf;;;AACA,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoCiB,EAApC,EAAwC,UAACzD,GAAD,EAAM4D,KAAN;AAAA,iBAAgB5D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACtC,KAAD,CAA3C;AAAA,SAAxC,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,wBAAeH,EAAf,EAAmBkC,MAAnB,EAA2B;AAAA;;AACvB,UAAI,CAAC,KAAKhG,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH,OAHsB,CAKvB;;;AACA,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoCiB,EAApC,EAAwCkC,MAAxC,EAAgD,UAAA3F,GAAG;AAAA,iBAAIA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAA/B;AAAA,SAAnD,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAASzC,EAAT,EAAasD,GAAb,EAAkB;AAAA;;AACd,UAAI,CAAC,KAAKpH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,MAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,UAAlB,EAA8BiB,EAA9B,EAAkCsD,GAAlC,EAAuC,UAAA/G,GAAG;AAAA,iBACtCA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADW;AAAA,SAA1C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;WACI,oBAAWc,MAAX,EAAmBL,qBAAnB,EAA0C;AAAA;;AACtC,UAAI,OAAOK,MAAP,KAAkB,UAAtB,EAAkC;AAC9B,YAAMC,QAAQ,GAAGD,MAAjB,CAD8B,CAE9B;;AACA,YAAI,CAAC,KAAKrH,SAAV,EAAqB;AACjBM,UAAAA,OAAO,CAACC,KAAR,CAAchC,aAAd;AACA+I,UAAAA,QAAQ;AACX,SAHD,MAGO;AACH,cAAI,KAAK3H,OAAL,IAAgBsG,MAAM,CAACC,IAAP,CAAY,KAAKvG,OAAjB,EAA0B0G,MAA1B,GAAmC,CAAvD,EAA0D;AACtDlF,YAAAA,UAAU,CAAC;AAAA,qBAAMmG,QAAQ,CAAC,OAAI,CAAC3H,OAAN,CAAd;AAAA,aAAD,EAA+B,GAA/B,CAAV;AACH,WAFD,MAEO;AACH,iBAAK0B,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,UAACxC,GAAD,EAAM6G,GAAN,EAAc;AAC7C,cAAA,OAAI,CAACvH,OAAL,GAAeuH,GAAG,IAAI,EAAtB;AACAF,cAAAA,qBAAqB,IAAI,OAAI,CAAC7G,UAAL,CAAgBlC,QAAQ,CAACG,cAAzB,CAAzB;AACAkJ,cAAAA,QAAQ,CAAC,OAAI,CAAC3H,OAAN,CAAR;AACH,aAJD;AAKH;AACJ;AACJ,OAjBD,MAiBO;AACH,YAAI,CAAC,KAAKK,SAAV,EAAqB;AACjB,iBAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH,SAFD,MAEO;AACH,iBAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,gBAAI,CAACI,MAAD,IAAW,OAAI,CAAC1H,OAApB,EAA6B;AACzB,qBAAO4G,OAAO,CAAC,OAAI,CAAC5G,OAAN,CAAd;AACH;;AAED,YAAA,OAAI,CAAC0B,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,UAACxC,GAAD,EAAM6G,GAAN,EAAc;AAC7C,cAAA,OAAI,CAACvH,OAAL,GAAeuH,GAAf;AACAF,cAAAA,qBAAqB,IAAI,OAAI,CAAC7G,UAAL,CAAgBlC,QAAQ,CAACG,cAAzB,CAAzB;AACAiC,cAAAA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC,OAAI,CAAC5G,OAAN,CAA3B;AACH,aAJD;AAKH,WAVM,CAAP;AAWH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;;;;WACI,oBAAW4H,QAAX,EAAqB;AAAA;;AACjB,UAAIA,QAAQ,IAAI,CAAC,KAAKnE,UAAtB,EAAkC;AAC9B,aAAKA,UAAL,GAAkB,IAAlB;AACA,aAAKpE,cAAL,CAAoBkE,OAApB,CAA4B,UAAAY,EAAE;AAAA,iBAAI,OAAI,CAACzC,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCiB,EAAtC,CAAJ;AAAA,SAA9B,EAF8B,CAG9B;;AACAmC,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhG,iBAAjB,EAAoCgD,OAApC,CAA4C,UAAAY,EAAE;AAAA,iBAAI,OAAI,CAACzC,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCiB,EAAtC,CAAJ;AAAA,SAA9C,EAJ8B,CAK9B;;AACA,aAAK7E,gBAAL,IAAyB,KAAKoC,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC,IAAhC,CAAzB,CAN8B,CAO9B;;AACAoD,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKjG,gBAAjB,EAAmCiD,OAAnC,CAA2C,UAAAY,EAAE;AAAA,iBAAI,OAAI,CAACzC,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiB,EAA/B,CAAJ;AAAA,SAA7C;AACH,OATD,MASO,IAAI,CAACyD,QAAD,IAAa,KAAKnE,UAAtB,EAAkC;AACrC,aAAKA,UAAL,GAAkB,KAAlB,CADqC,CAErC;;AACA,aAAKpE,cAAL,CAAoBkE,OAApB,CAA4B,UAAAY,EAAE;AAAA,iBAAI,OAAI,CAACzC,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCiB,EAAxC,CAAJ;AAAA,SAA9B;AACAmC,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhG,iBAAjB,EAAoCgD,OAApC,CAA4C,UAAAY,EAAE;AAAA,iBAAI,OAAI,CAACzC,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwCiB,EAAxC,CAAJ;AAAA,SAA9C,EAJqC,CAKrC;;AACA,aAAK7E,gBAAL,IAAyB,KAAKoC,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC,KAAhC,CAAzB,CANqC,CAQrC;;AACAoD,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKjG,gBAAjB,EAAmCiD,OAAnC,CAA2C,UAAAY,EAAE;AAAA,iBAAI,OAAI,CAACzC,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiCiB,EAAjC,CAAJ;AAAA,SAA7C;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;;WACI,oBAAW0D,SAAX,EAAsB;AAAA;;AAClB,UAAI,CAAC,KAAKxH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC2E,SAAhC,EAA2C,UAAAnH,GAAG;AAAA,iBAC1CA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADe;AAAA,SAA9C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,mBAAUzC,EAAV,EAAc2D,WAAd,EAA2B;AAAA;;AACvB,UAAI,CAAC,KAAKzH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiB,EAA/B,EAAmC;AAAC2D,UAAAA,WAAW,EAAE,CAAC,CAACA;AAAhB,SAAnC,EAAiE,UAAApH,GAAG;AAAA,iBAChEA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADqC;AAAA,SAApE,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,oBAAWzC,EAAX,EAAe2D,WAAf,EAA4B;AAAA;;AACxB,UAAI,CAAC,KAAKzH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCiB,EAAhC,EAAoC;AAAC2D,UAAAA,WAAW,EAAE,CAAC,CAACA;AAAhB,SAApC,EAAkE,UAAApH,GAAG;AAAA,iBACjEA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADsC;AAAA,SAArE,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,mBAAUzC,EAAV,EAAcC,GAAd,EAAmB;AAAA;;AACf,UAAI,CAAC,KAAK/D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,UAAI,CAACwF,GAAL,EAAU;AACN,eAAOuC,OAAO,CAACW,MAAR,CAAe,4BAAf,CAAP;AACH;;AAEDlD,MAAAA,GAAG,GAAGL,IAAI,CAACgE,KAAL,CAAWhE,IAAI,CAACC,SAAL,CAAeI,GAAf,CAAX,CAAN;;AAEA,UAAIA,GAAG,CAACgD,cAAJ,CAAmB,MAAnB,CAAJ,EAAgC;AAC5B,eAAOhD,GAAG,CAAC4D,IAAX;AACH;;AACD,UAAI5D,GAAG,CAACgD,cAAJ,CAAmB,MAAnB,CAAJ,EAAgC;AAC5B,eAAOhD,GAAG,CAAC6D,IAAX;AACH;;AACD,UAAI7D,GAAG,CAACgD,cAAJ,CAAmB,IAAnB,CAAJ,EAA8B;AAC1B,eAAOhD,GAAG,CAAC8D,EAAX;AACH;;AAED,aAAO,IAAIvB,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiB,EAA/B,EAAmCC,GAAnC,EAAwC,UAAA1D,GAAG;AAAA,iBACvCA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADY;AAAA,SAA3C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,mBAAUzC,EAAV,EAAc;AAAA;;AACV,UAAI,CAAC,KAAK9D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiB,EAA/B,EAAmC,UAACzD,GAAD,EAAM0D,GAAN;AAAA,iBAC/B1D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACxC,GAAD,CADI;AAAA,SAAnC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;WACI,6BAAoB+D,OAApB,EAA6BT,MAA7B,EAAqC;AAAA;;AACjC,UAAI,OAAOS,OAAP,KAAmB,SAAvB,EAAkC;AAC9BT,QAAAA,MAAM,GAAGS,OAAT;AACAA,QAAAA,OAAO,GAAG,EAAV;AACH;;AACDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAI,CAACT,MAAD,IAAW,KAAKvG,SAAL,CAAe,eAAegH,OAA9B,CAAf,EAAuD;AACnD,eAAO,KAAKhH,SAAL,CAAe,eAAegH,OAA9B,CAAP;AACH;;AAED,UAAI,CAAC,KAAK9H,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe,eAAegH,OAA9B,IAAyC,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACjD,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,qBAAlB,EAAyCiF,OAAzC,EAAkD,UAACzH,GAAD,EAAM0H,SAAN;AAAA,iBAC9C1H,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACwB,SAAD,CADmB;AAAA,SAAlD,CADiD;AAAA,OAAZ,CAAzC;AAIA,aAAO,KAAKjH,SAAL,CAAe,eAAegH,OAA9B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;AAAO;AACP;AACA;AACA;AACA;AACA;;;;WACI,qBAAYA,OAAZ,EAAqBT,MAArB,EAA6B;AAAA;;AACzB,UAAI,OAAOS,OAAP,KAAmB,SAAvB,EAAkC;AAC9BT,QAAAA,MAAM,GAAGS,OAAT;AACAA,QAAAA,OAAO,GAAG,EAAV;AACH;;AAEDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,UAAI,CAACT,MAAD,IAAW,KAAKvG,SAAL,CAAe,aAAagH,OAA5B,CAAf,EAAqD;AACjD,eAAO,KAAKhH,SAAL,CAAe,aAAagH,OAA5B,CAAP;AACH;;AAED,UAAI,CAAC,KAAK9H,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe,aAAagH,OAA5B,IAAuC,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC/C,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,qBAAlB,EAAyCiF,OAAzC,EAAkD,UAACzH,GAAD,EAAM0H,SAAN;AAAA,iBAC9C1H,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACwB,SAAD,CADmB;AAAA,SAAlD,CAD+C;AAAA,OAAZ,CAAvC;AAIA,aAAO,KAAKjH,SAAL,CAAe,aAAagH,OAA5B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,uBAAcE,IAAd,EAAoB7E,EAApB,EAAwB;AAAA;;AACpB,UAAI,CAAC6E,IAAD,IAAS,CAACA,IAAI,CAAC3B,MAAnB,EAA2B;AACvBlD,QAAAA,EAAE,IAAIA,EAAE,EAAR;AACH,OAFD,MAEO;AACH,YAAIY,GAAG,GAAGiE,IAAI,CAACC,GAAL,EAAV;AACA,aAAKC,SAAL,CAAenE,GAAG,CAAC4C,GAAnB,EACKxE,IADL,CACU,YAAM;AACR4B,UAAAA,GAAG,CAAC4C,GAAJ,GAAU5C,GAAG,CAACoE,KAAd;AACA,iBAAOpE,GAAG,CAACoE,KAAX;AACA,iBAAO,OAAI,CAACC,SAAL,CAAerE,GAAG,CAAC4C,GAAnB,EAAwB5C,GAAxB,CAAP;AACH,SALL,EAMK5B,IANL,CAMU;AAAA,iBAAMhB,UAAU,CAAC;AAAA,mBAAM,OAAI,CAACkH,aAAL,CAAmBL,IAAnB,EAAyB7E,EAAzB,CAAN;AAAA,WAAD,EAAqC,CAArC,CAAhB;AAAA,SANV,WAOW,UAAA9C,GAAG;AAAA,iBAAI8C,EAAE,IAAIA,EAAE,CAAC9C,GAAD,CAAZ;AAAA,SAPd;AAQH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAYyD,EAAZ,EAAgBqE,KAAhB,EAAuBG,OAAvB,EAAgC;AAAA;;AAC5B,aAAO,KAAKC,SAAL,CAAe,IAAf,EACFpG,IADE,CACG,UAAAqG,MAAM,EAAI;AACZ,YAAIA,MAAM,CAACnC,MAAX,EAAmB;AACf;AACA,cAAMoC,cAAc,GAAGD,MAAM,CACxBE,MADkB,CACX,UAAAC,KAAK;AAAA,mBAAIA,KAAK,CAAChC,GAAN,CAAUiC,UAAV,CAAqB9E,EAAE,GAAG,GAA1B,CAAJ;AAAA,WADM,EAElBZ,OAFkB,CAEV,UAAAyF,KAAK;AAAA,mBAAIA,KAAK,CAACR,KAAN,GAAcA,KAAK,GAAGQ,KAAK,CAAChC,GAAN,CAAUkC,SAAV,CAAoB/E,EAAE,CAACuC,MAAvB,CAA1B;AAAA,WAFK,CAAvB;AAIA,iBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,mBACf,OAAI,CAACoB,aAAL,CAAmBI,cAAnB,EAAmC,UAAApI,GAAG;AAAA,qBAAIA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAA/B;AAAA,aAAtC,CADe;AAAA,WAAZ,EAEFpE,IAFE,CAEG,YAAM;AACR,gBAAM4B,GAAG,GAAGyE,MAAM,CAACM,IAAP,CAAY,UAAAH,KAAK;AAAA,qBAAIA,KAAK,CAAChC,GAAN,KAAc7C,EAAlB;AAAA,aAAjB,CAAZ;;AAEA,gBAAIC,GAAJ,EAAS;AACLA,cAAAA,GAAG,CAAC4C,GAAJ,GAAUwB,KAAV;;AACA,kBAAIG,OAAO,KAAK9I,SAAhB,EAA2B;AACvBuE,gBAAAA,GAAG,CAACe,MAAJ,GAAaf,GAAG,CAACe,MAAJ,IAAc,EAA3B;AACAf,gBAAAA,GAAG,CAACe,MAAJ,CAAWhD,IAAX,GAAkBwG,OAAlB;AACH;;AAED,qBAAO,OAAI,CAACF,SAAL,CAAerE,GAAG,CAAC4C,GAAnB,EAAwB5C,GAAxB,CAAP;AACH;AACJ,WAdE,CAAP;AAeH;AACJ,OAxBE,CAAP;AAyBH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,gBAAOgF,QAAP,EAAiBC,OAAjB,EAA0BpE,IAA1B,EAAgC;AAAA;;AAC5B,UAAI,CAAC,KAAK5E,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACtB,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,QAAlB,EAA4BkG,QAA5B,EAAsCC,OAAtC,EAA+CpE,IAA/C,EAAqD,UAAAqE,MAAM;AAAA,iBACvD1C,OAAO,CAAC0C,MAAD,CADgD;AAAA,SAA3D,CADsB;AAAA,OAAnB,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,sBAAanF,EAAb,EAAiBC,GAAjB,EAAsB;AAAA;;AAClB,UAAI,CAAC,KAAK/D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAEDwF,MAAAA,GAAG,GAAGL,IAAI,CAACgE,KAAL,CAAWhE,IAAI,CAACC,SAAL,CAAeI,GAAf,CAAX,CAAN;;AAEA,UAAIA,GAAG,CAACgD,cAAJ,CAAmB,MAAnB,CAAJ,EAAgC;AAC5B,eAAOhD,GAAG,CAAC4D,IAAX;AACH;;AACD,UAAI5D,GAAG,CAACgD,cAAJ,CAAmB,MAAnB,CAAJ,EAAgC;AAC5B,eAAOhD,GAAG,CAAC6D,IAAX;AACH;;AACD,UAAI7D,GAAG,CAACgD,cAAJ,CAAmB,IAAnB,CAAJ,EAA8B;AAC1B,eAAOhD,GAAG,CAAC8D,EAAX;AACH;;AAED,aAAO,IAAIvB,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,cAAlB,EAAkCiB,EAAlC,EAAsCC,GAAtC,EAA2C,UAAA1D,GAAG;AAAA,iBAAIA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAA/B;AAAA,SAA9C,CADe;AAAA,OAAZ,CAAP;AAEH;AAED;AACJ;AACA;AACA;;;;WACI,4BAAmB2C,OAAnB,EAA4B;AACxB,OAAC,KAAKrI,aAAL,CAAmBa,QAAnB,CAA4BwH,OAA5B,CAAD,IAAyC,KAAKrI,aAAL,CAAmBiF,IAAnB,CAAwBoD,OAAxB,CAAzC;AACH;AAED;AACJ;AACA;AACA;;;;WACI,8BAAqBA,OAArB,EAA8B;AAC1B,UAAM/C,GAAG,GAAG,KAAKtF,aAAL,CAAmB8E,OAAnB,CAA2BuD,OAA3B,CAAZ;AACA/C,MAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKtF,aAAL,CAAmBuF,MAAnB,CAA0BD,GAA1B,EAA+B,CAA/B,CAAd;AACH;AAED;AACJ;AACA;AACA;;;;WACI,mCAA0B+C,OAA1B,EAAmC;AAC/B,OAAC,KAAKtI,oBAAL,CAA0Bc,QAA1B,CAAmCwH,OAAnC,CAAD,IAAgD,KAAKtI,oBAAL,CAA0BkF,IAA1B,CAA+BoD,OAA/B,CAAhD;AACH;AAED;AACJ;AACA;AACA;;;;WACI,qCAA4BA,OAA5B,EAAqC;AACjC,UAAM/C,GAAG,GAAG,KAAKvF,oBAAL,CAA0B+E,OAA1B,CAAkCuD,OAAlC,CAAZ;AACA/C,MAAAA,GAAG,KAAK,CAAC,CAAT,IAAc,KAAKvF,oBAAL,CAA0BwF,MAA1B,CAAiCD,GAAjC,EAAsC,CAAtC,CAAd;AACH;AAED;AACJ;AACA;AACA;;;;WACI,kCAAyB+C,OAAzB,EAAkC;AAC9B,WAAK9E,kBAAL,GAA0B8E,OAA1B;AACH;AAED;AACJ;AACA;AACA;;;;WACI,oCAA2BA,OAA3B,EAAoC;AAChC,WAAK9E,kBAAL,GAA0B,IAA1B;AACH;AAED;AACJ;AACA;AACA;;;;WACI,kCAAyB8E,OAAzB,EAAkC;AAC9B,WAAK7E,kBAAL,GAA0B6E,OAA1B;AACH;AAED;AACJ;AACA;AACA;;;;WACI,oCAA2BA,OAA3B,EAAoC;AAChC,WAAK7E,kBAAL,GAA0B,IAA1B;AACH;AAED;AACJ;AACA;AACA;;;;WACI,gCAAuB6E,OAAvB,EAAgC;AAC5B,WAAK3E,gBAAL,GAAwB2E,OAAxB;AACH;AAED;AACJ;AACA;AACA;;;;WACI,kCAAyBA,OAAzB,EAAkC;AAC9B,WAAK3E,gBAAL,GAAwB,IAAxB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,kBAAS4E,KAAT,EAAgB9B,MAAhB,EAAwB;AAAA;;AACpB,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAe,YAAYqI,KAAK,IAAI,KAArB,CAAf,CAAf,EAA6D;AACzD,eAAO,KAAKrI,SAAL,CAAe,YAAYqI,KAAK,IAAI,KAArB,CAAf,CAAP;AACH;;AAED,UAAI,CAAC,KAAKnJ,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe,YAAYqI,KAAK,IAAI,KAArB,CAAf,IAA8C,IAAI7C,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AAC3E,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,QAAnC,EAA6C,MAA7C,EAAqD;AAACuG,UAAAA,QAAQ,EAAE,WAAWD,KAAK,IAAI,EAApB,CAAX;AAAoCE,UAAAA,MAAM,EAAE,WAAWF,KAAK,GAAIA,KAAK,GAAG,GAAZ,GAAmB,EAAnC,IAAyC;AAArF,SAArD,EAAqJ,UAAC9I,GAAD,EAAM6G,GAAN,EAAc;AAC/J,cAAI,CAAC7G,GAAD,IAAQ6G,GAAZ,EAAiB;AACb,gBAAMoC,IAAI,GAAG,EAAb;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,GAAG,CAACsC,IAAJ,CAASnD,MAA7B,EAAqCkD,CAAC,EAAtC,EAA0C;AACtC,kBAAIJ,KAAK,IAAIjC,GAAG,CAACsC,IAAJ,CAASD,CAAT,EAAYzF,EAAZ,KAAmB,UAAUqF,KAA1C,EAAiD;AAC7C;AACH;;AACDG,cAAAA,IAAI,CAACpC,GAAG,CAACsC,IAAJ,CAASD,CAAT,EAAYzF,EAAb,CAAJ,GAAuBoD,GAAG,CAACsC,IAAJ,CAASD,CAAT,EAAYE,KAAnC;AACH;;AACDlD,YAAAA,OAAO,CAAC+C,IAAD,CAAP;AACH,WATD,MASO;AACHrC,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH;AACJ,SAbD;AAcH,OAf6C,CAA9C;AAiBA,aAAO,KAAKS,SAAL,CAAe,YAAYqI,KAAK,IAAI,KAArB,CAAf,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,uBAAcO,KAAd,EAAqBC,GAArB,EAA0B9F,IAA1B,EAAgC;AAAA;;AAC5B,UAAI,CAAC,KAAK7D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAEDmL,MAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAC,MAAAA,GAAG,GAAKA,GAAG,IAAM,QAAjB;AAEA,aAAO,IAAIrD,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,QAAnC,EAA6CgB,IAA7C,EAAmD;AAACuF,UAAAA,QAAQ,EAAEM,KAAX;AAAkBL,UAAAA,MAAM,EAAEM;AAA1B,SAAnD,EAAmF,UAACtJ,GAAD,EAAM6G,GAAN,EAAc;AAC7F,cAAI,CAAC7G,GAAL,EAAU;AACN,gBAAMiJ,IAAI,GAAG,EAAb;;AACA,gBAAIpC,GAAG,IAAIA,GAAG,CAACsC,IAAf,EAAqB;AACjB,mBAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,GAAG,CAACsC,IAAJ,CAASnD,MAA7B,EAAqCkD,CAAC,EAAtC,EAA0C;AACtCD,gBAAAA,IAAI,CAACpC,GAAG,CAACsC,IAAJ,CAASD,CAAT,EAAYzF,EAAb,CAAJ,GAAuBoD,GAAG,CAACsC,IAAJ,CAASD,CAAT,EAAYE,KAAnC;AACH;AACJ;;AACDlD,YAAAA,OAAO,CAAC+C,IAAD,CAAP;AACH,WARD,MAQO;AACHrC,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH;AACJ,SAZD;AAaH,OAdM,CAAP;AAeH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgBgH,MAAhB,EAAwB;AACpB,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AAED,UAAI,KAAKnG,SAAL,CAAe+I,IAAf,IAAuB,CAACxC,MAA5B,EAAoC;AAChC,eAAO,KAAKvG,SAAL,CAAe+I,IAAtB;AACH;;AAED,UAAI,CAAC,KAAK7J,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe+I,IAAf,GAAsB,KAAKC,SAAL,CAAe,qBAAf,EACjB3H,IADiB,CACZ,UAAA+E,GAAG,EAAI;AACT,YAAM6C,KAAK,GAAG,EAAd;;AACA,YAAI7C,GAAG,IAAIA,GAAG,UAAV,IAAqBA,GAAG,UAAH,CAAW8C,YAApC,EAAkD;AAC9C/D,UAAAA,MAAM,CAACC,IAAP,CAAYgB,GAAG,UAAH,CAAW8C,YAAvB,EAAqC9G,OAArC,CAA6C,UAAA+G,CAAC,EAAI;AAC9C,gBAAMJ,IAAI,GAAG3C,GAAG,UAAH,CAAW8C,YAAX,CAAwBC,CAAxB,CAAb;;AACA,gBAAI,CAACJ,IAAL,EAAW;AACP;AACH;;AACD,gBAAMK,KAAK,GAAG;AACVpI,cAAAA,IAAI,EAAEmI,CADI;AAEVpG,cAAAA,IAAI,EAAE;AAFI,aAAd,CAL8C,CAS9C;;AACA,gBAAIgG,IAAI,CAACxD,MAAL,GAAc,GAAd,KAAsBwD,IAAI,CAAClE,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAvB,IAA4BkE,IAAI,CAAClE,OAAL,CAAa,IAAb,MAAuB,CAAC,CAA1E,CAAJ,EAAkF;AAC9E,kBAAIsE,CAAC,CAACE,WAAF,GAAgBzI,QAAhB,CAAyB,SAAzB,CAAJ,EAAyC;AACrCwI,gBAAAA,KAAK,CAACrG,IAAN,GAAa,SAAb;AACH,eAFD,MAEO,IAAIgG,IAAI,CAACM,WAAL,GAAmBzI,QAAnB,CAA4B,SAA5B,CAAJ,EAA4C;AAC/CwI,gBAAAA,KAAK,CAACrG,IAAN,GAAa,SAAb;AACH,eAFM,MAEA,IAAIoG,CAAC,CAACE,WAAF,GAAgBzI,QAAhB,CAAyB,QAAzB,CAAJ,EAAwC;AAC3CwI,gBAAAA,KAAK,CAACrG,IAAN,GAAa,QAAb;AACH,eAFM,MAEA,IAAIgG,IAAI,CAACM,WAAL,GAAmBzI,QAAnB,CAA4B,QAA5B,CAAJ,EAA2C;AAC9CwI,gBAAAA,KAAK,CAACrG,IAAN,GAAa,QAAb;AACH;;AACDkG,cAAAA,KAAK,CAACjE,IAAN,CAAWoE,KAAX;AACH,aAXD,MAWO;AACHA,cAAAA,KAAK,CAACrG,IAAN,GAAcgG,IAAI,CAAChB,SAAL,CAAe,CAAf,EAAkB,6BAA6BxC,MAA/C,MAA2D,4BAA3D,IAA2FwD,IAAI,CAAChB,SAAL,CAAe,CAAf,EAAkB,yBAAyBxC,MAA3C,MAAuD,wBAAnJ,GAA+K,SAA/K,GAA2L,QAAxM;;AAEA,kBAAI6D,KAAK,CAACrG,IAAN,KAAe,QAAnB,EAA6B;AACzB,oBAAMuG,CAAC,GAAGP,IAAI,CAACpI,KAAL,CAAW,2BAAX,CAAV;;AACA,oBAAI2I,CAAC,CAAC1B,MAAF,CAAS,UAAA2B,CAAC;AAAA,yBAAIA,CAAC,CAAC/I,OAAF,CAAU,YAAV,EAAwB,EAAxB,EAA4BgJ,IAA5B,EAAJ;AAAA,iBAAV,EAAkDjE,MAAlD,GAA2D,CAA/D,EAAkE;AAC9D6D,kBAAAA,KAAK,CAACrG,IAAN,GAAa,SAAb;AACH;AACJ;;AAEDkG,cAAAA,KAAK,CAACjE,IAAN,CAAWoE,KAAX;AACH;AACJ,WAjCD;AAkCH;;AACD,eAAOH,KAAP;AACH,OAxCiB,CAAtB;AA0CA,aAAO,KAAKjJ,SAAL,CAAe+I,IAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQ/K,IAAR,EAAcyL,WAAd,EAA2B;AAAA;;AACvB,UAAI9L,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AAED,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACtB,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,SAAtC,EAAiDyL,WAAW,IAAI,GAAhE,EAAqE,UAAAC,KAAK;AAAA,iBACtEjE,OAAO,CAACiE,KAAD,CAD+D;AAAA,SAA1E,CADsB;AAAA,OAAnB,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;WACI,wBAAe;AAAA;;AACX,UAAI/L,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,UAAlB,EAA8B,UAACxC,GAAD,EAAMoK,KAAN;AAAA,iBAC1BpK,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACkE,KAAD,CADD;AAAA,SAA9B,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,iBAAQ3L,IAAR,EAAc;AAAA;;AACV,UAAIL,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,SAAtC,EAAiD,IAAjD,EAAuD,UAAAyB,KAAK;AAAA,iBACxDA,KAAK,GAAG0G,MAAM,CAAC1G,KAAD,CAAT,GAAmBgG,OAAO,EADyB;AAAA,SAA5D,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;WACI,yBAAgB;AAAA;;AACZ,UAAI,CAAC,KAAKvG,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,eAAlB,EAAmC,QAAnC,EAA6C,MAA7C,EAAqD;AAACuG,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,MAAM,EAAE;AAAvB,SAArD,EAAuF,UAAChJ,GAAD,EAAM2H,IAAN;AAAA,iBACnF3H,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACyB,IAAI,CAACwB,IAAL,IAAaxB,IAAI,CAACwB,IAAL,CAAUkB,GAAV,CAAc,UAAA3G,GAAG;AAAA,mBAAIA,GAAG,CAAC0F,KAAR;AAAA,WAAjB,CAAd,CADwD;AAAA,SAAvF,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,iBAAQ3B,OAAR,EAAiB6C,QAAjB,EAA2B;AAAA;;AACvB,UAAI,CAAC,KAAK3K,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6BiF,OAA7B,EAAsC6C,QAAtC,EAAgD,UAACtK,GAAD,EAAMoK,KAAN;AAAA,iBAC5CpK,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACkE,KAAD,CADiB;AAAA,SAAhD,CADe;AAAA,OAAZ,CAAP;AAGH;;;WAED,kBAAS3C,OAAT,EAAkB6C,QAAlB,EAA4B3E,MAA5B,EAAoC;AAAA;;AAChC,UAAI,CAAC,KAAKhG,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,YAAI,CAACjB,MAAL,EAAa;AACT,UAAA,OAAI,CAAC3E,OAAL,CAAawB,IAAb,CAAkB,UAAlB,EAA8BiF,OAA9B,EAAuC6C,QAAvC,EAAiD,UAACtK,GAAD,EAAMuE,IAAN,EAAYf,IAAZ,EAAqB;AAClExD,YAAAA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC3B,IAAD,EAAOf,IAAP,CAA3B;AACH,WAFD;AAGH,SAJD,MAIO;AACH,UAAA,OAAI,CAACxC,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCiF,OAAhC,EAAyC6C,QAAzC,EAAmD3E,MAAnD,EAA2D,UAAC3F,GAAD,EAAMuE,IAAN;AAAA,mBACvDvE,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC3B,IAAD,CAD4B;AAAA,WAA3D;AAEH;;AAAA;AACJ,OATM,CAAP;AAUH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,qBAAYkD,OAAZ,EAAqB6C,QAArB,EAA+B/F,IAA/B,EAAqC;AAAA;;AACjC,UAAI,CAAC,KAAK5E,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,YAAI,OAAOrC,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAA,OAAI,CAACvD,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiF,OAA/B,EAAwC6C,QAAxC,EAAkD/F,IAAlD,EAAwD,UAAAvE,GAAG;AAAA,mBACvDA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAD4B;AAAA,WAA3D;AAEH,SAHD,MAGO;AACH,cAAMP,MAAM,GAAG4E,IAAI,CACf,IAAIC,UAAJ,CAAejG,IAAf,EACKkG,MADL,CACY,UAAClG,IAAD,EAAOmG,KAAP;AAAA,mBAAgBnG,IAAI,GAAGoG,MAAM,CAACC,YAAP,CAAoBF,KAApB,CAAvB;AAAA,WADZ,EAC8D,EAD9D,CADe,CAAnB;;AAKA,UAAA,OAAI,CAAC1J,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiCiF,OAAjC,EAA0C6C,QAA1C,EAAoD3E,MAApD,EAA4D,UAAA3F,GAAG;AAAA,mBAC3DA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADgC;AAAA,WAA/D;AAEH;AACJ,OAbM,CAAP;AAcH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,oBAAWuB,OAAX,EAAoB6C,QAApB,EAA8B;AAAA;;AAC1B,UAAIlM,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCiF,OAAhC,EAAyC6C,QAAzC,EAAmD,UAAAtK,GAAG;AAAA,iBAClDA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADuB;AAAA,SAAtD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,sBAAauB,OAAb,EAAsBoD,UAAtB,EAAkC;AAAA;;AAC9B,UAAIzM,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,cAAlB,EAAkCiF,OAAlC,EAA2CoD,UAA3C,EAAuD,UAAA7K,GAAG;AAAA,iBACtDA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EAD2B;AAAA,SAA1D,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,kBAASc,MAAT,EAAiB;AAAA;;AACb,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAeqK,KAA9B,EAAqC;AACjC,eAAO,KAAKrK,SAAL,CAAeqK,KAAtB;AACH;;AAED,UAAI,CAAC,KAAKnL,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAeqK,KAAf,GAAuB,IAAI7E,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC/B,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,MAHJ,EAII;AAACuG,UAAAA,QAAQ,EAAE,cAAX;AAA2BC,UAAAA,MAAM,EAAE;AAAnC,SAJJ,EAKI,UAAChJ,GAAD,EAAM+K,GAAN,EAAc;AACV,cAAI/K,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAAC6E,GAAG,CAAC5B,IAAJ,CAASkB,GAAT,CAAa,UAAAW,IAAI;AAAA,qBAAIA,IAAI,CAAC5B,KAAT;AAAA,aAAjB,CAAD,CAAP;AACH;AACJ,SAXL,CAD+B;AAAA,OAAZ,CAAvB;AAcA,aAAO,KAAK3I,SAAL,CAAeqK,KAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,kBAAS9D,MAAT,EAAiB;AAAA;;AACb,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAewK,KAA9B,EAAqC;AACjC,eAAO,KAAKxK,SAAL,CAAewK,KAAtB;AACH;;AACD,UAAI,CAAC,KAAKtL,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAewK,KAAf,GAAuB,IAAIhF,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC/B,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,MAHJ,EAII;AAACuG,UAAAA,QAAQ,EAAE,cAAX;AAA2BC,UAAAA,MAAM,EAAE;AAAnC,SAJJ,EAKI,UAAChJ,GAAD,EAAM+K,GAAN,EAAc;AACV,cAAI/K,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAAC6E,GAAG,CAAC5B,IAAJ,CAASkB,GAAT,CAAa,UAAAW,IAAI;AAAA,qBAAIA,IAAI,CAAC5B,KAAT;AAAA,aAAjB,CAAD,CAAP;AACH;AACJ,SAXL,CAD+B;AAAA,OAAZ,CAAvB;AAcA,aAAO,KAAK3I,SAAL,CAAewK,KAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,mBAAUjE,MAAV,EAAkB;AAAA;;AACd,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAe0H,MAA9B,EAAsC;AAClC,eAAO,KAAK1H,SAAL,CAAe0H,MAAtB;AACH;;AACD,UAAI,CAAC,KAAKxI,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe0H,MAAf,GAAwB,IAAIlC,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAChC,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CACI,eADJ,EAEI,QAFJ,EAGI,OAHJ,EAII;AAACuG,UAAAA,QAAQ,EAAE,eAAX;AAA4BC,UAAAA,MAAM,EAAE;AAApC,SAJJ,EAKI,UAAChJ,GAAD,EAAM+K,GAAN,EAAc;AACV,cAAI/K,GAAJ,EAAS;AACL4G,YAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,WAFD,MAEO;AACHkG,YAAAA,OAAO,CAAC6E,GAAG,CAAC5B,IAAJ,CAASkB,GAAT,CAAa,UAAAW,IAAI;AAAA,qBAAIA,IAAI,CAAC5B,KAAT;AAAA,aAAjB,CAAD,CAAP;AACH;AACJ,SAXL,CADgC;AAAA,OAAZ,CAAxB;AAcA,aAAO,KAAK3I,SAAL,CAAe0H,MAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,qBAAY1J,IAAZ,EAAkBuI,MAAlB,EAA0BkE,SAA1B,EAAqC;AAAA;;AACjC,UAAI9M,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACnI,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,UAAI,CAACuI,MAAD,IAAW,KAAKvG,SAAL,CAAe,aAAahC,IAA5B,CAAf,EAAkD;AAC9C,eAAO,KAAKgC,SAAL,CAAe,aAAahC,IAA5B,CAAP;AACH;;AAED,UAAI,CAAC,KAAKkB,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe,aAAahC,IAA5B,IAAoC,IAAIwH,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACjE,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,qBAAD,CAAN;AACH;AACJ,SALuB,EAKrBsE,SAAS,IAAI,OAAI,CAAC7M,KAAL,CAAWY,UALH,CAAxB;;AAOA,QAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,aAAtC,EAAqD,IAArD,EAA2D,UAAA8F,IAAI,EAAI;AAC/D,cAAI7C,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,cAAAA,MAAM,CAAC,4BAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,cAAAA,MAAM,CAAC,2BAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArBmC,CAApC;AAuBA,aAAO,KAAK9D,SAAL,CAAe,aAAahC,IAA5B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,0BAAiBA,IAAjB,EAAuBuI,MAAvB,EAA+BkE,SAA/B,EAA0C;AAAA;;AACtC,UAAI9M,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACnI,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,UAAI,CAACuI,MAAD,IAAW,KAAKvG,SAAL,CAAe,kBAAkBhC,IAAjC,CAAf,EAAuD;AACnD,eAAO,KAAKgC,SAAL,CAAe,kBAAkBhC,IAAjC,CAAP;AACH;;AAED,UAAI,CAAC,KAAKkB,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe,kBAAkBhC,IAAjC,IAAyC,IAAIwH,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACtE,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,uBAAD,CAAN;AACH;AACJ,SALuB,EAKrBsE,SAAS,IAAI,OAAI,CAAC7M,KAAL,CAAWY,UALH,CAAxB;;AAOA,QAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,kBAAtC,EAA0D,IAA1D,EAAgE,UAAA8F,IAAI,EAAI;AACpE,cAAI7C,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,cAAAA,MAAM,CAAC,iCAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,cAAAA,MAAM,CAAC,gCAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArBwC,CAAzC;AAuBA,aAAO,KAAK9D,SAAL,CAAe,kBAAkBhC,IAAjC,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,uBAAcA,IAAd,EAAoB0M,IAApB,EAA0BnE,MAA1B,EAAkCkE,SAAlC,EAA6C;AAAA;;AACzC,UAAI9M,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAe2K,IAA9B,EAAoC;AAChC,eAAO,KAAK3K,SAAL,CAAe2K,IAAtB;AACH;;AAED,UAAI,CAAC,KAAKzL,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,WAAKgC,SAAL,CAAe2K,IAAf,GAAsB,IAAInF,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACnD,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,uBAAD,CAAN;AACH;AACJ,SALuB,EAKrBsE,SAAS,IAAI,OAAI,CAAC7M,KAAL,CAAWY,UALH,CAAxB;;AAOA,QAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,eAAtC,EAAuD0M,IAAvD,EAA6D,UAAA5G,IAAI,EAAI;AACjE,cAAI7C,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,cAAAA,MAAM,CAAC,8BAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,cAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArBqB,CAAtB;AAuBA,aAAO,KAAK9D,SAAL,CAAe2K,IAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,sBAAa3M,IAAb,EAAmBuI,MAAnB,EAA2B/H,UAA3B,EAAuC;AAAA;;AACnC,UAAIb,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AAED,WAAKnG,SAAL,CAAe4K,SAAf,GAA2B,KAAK5K,SAAL,CAAe4K,SAAf,IAA4B,EAAvD;;AAEA,UAAI,CAACrE,MAAD,IAAW,KAAKvG,SAAL,CAAe4K,SAAf,CAAyB5M,IAAzB,CAAf,EAA+C;AAC3C,eAAO,KAAKgC,SAAL,CAAe4K,SAAf,CAAyB5M,IAAzB,CAAP;AACH;;AAED,UAAI,CAAC,KAAKkB,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,WAAKgC,SAAL,CAAe4K,SAAf,CAAyB5M,IAAzB,IAAiC,IAAIwH,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AAC9D,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,sBAAD,CAAN;AACH;AACJ,SALuB,EAKrB3H,UAAU,IAAI,OAAI,CAACZ,KAAL,CAAWY,UALJ,CAAxB;;AAOA,QAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,cAAtC,EAAsD,IAAtD,EAA4D,UAAA8F,IAAI,EAAI;AAChE,cAAI7C,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,cAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,cAAAA,MAAM,CAAC,4BAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArBgC,CAAjC;AAuBA,aAAO,KAAK9D,SAAL,CAAe4K,SAAf,CAAyB5M,IAAzB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAQA,IAAR,EAAc6M,GAAd,EAAmBC,KAAnB,EAA0B;AAAA;;AACtB,UAAInN,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB9J,IAAhB,CAAL,EAA4B;AACxBA,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,aAAO,IAAIwH,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,iBAAD,CAAN;AACH;AACJ,SALuB,EAKrB,OAAI,CAACvI,KAAL,CAAWY,UALU,CAAxB;;AAOA,QAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6B/D,IAA7B,EAAmC8M,KAAnC,EAA0CD,GAA1C,EAA+C,IAA/C,EAAqD,UAAAtL,GAAG,EAAI;AACxD,cAAI0B,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI1B,GAAJ,EAAS;AACL4G,cAAAA,MAAM,CAAC5G,GAAD,CAAN;AACH,aAFD,MAEO;AACHkG,cAAAA,OAAO;AACV;AACJ;AACJ,SAVD;AAWH,OAnBM,CAAP;AAoBH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,+BAAsBsF,OAAtB,EAA+BxE,MAA/B,EAAuC;AAAA;;AACnC,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAe,uBAAuB+K,OAAtC,CAAf,EAA+D;AAC3D,eAAO,KAAK/K,SAAL,CAAe,uBAAuB+K,OAAtC,CAAP;AACH;;AAED,UAAI,CAAC,KAAK7L,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe,uBAAuB+K,OAAtC,IAAiD,IAAIvF,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACzD,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,uBAAlB,EAA2CgJ,OAA3C,EAAoD,UAACxL,GAAD,EAAMyL,QAAN,EAAmB;AACnEzL,UAAAA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACuF,QAAD,CAA3B;AACH,SAFD,CADyD;AAAA,OAAZ,CAAjD;AAKA,aAAO,KAAKhL,SAAL,CAAe,uBAAuB+K,OAAtC,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,0BAAiB/M,IAAjB,EAAuB;AAAA;;AACnB,UAAIL,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,aAAO,KAAK8E,qBAAL,CAA2B,oCAA3B,EACF5J,IADE,CACG,UAAA8G,MAAM,EAAI;AACZ,YAAIA,MAAJ,EAAY;AACR,cAAI,CAAC,OAAI,CAACjJ,SAAV,EAAqB;AACjB,mBAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,iBAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,gBAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,kBAAIY,OAAJ,EAAa;AACTA,gBAAAA,OAAO,GAAG,IAAV;AACAkF,gBAAAA,MAAM,CAAC,0BAAD,CAAN;AACH;AACJ,aALuB,EAKrB,OAAI,CAACvI,KAAL,CAAWY,UALU,CAAxB;;AAOA,YAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,kBAAtC,EAA0D,IAA1D,EAAgE,UAAA8F,IAAI,EAAI;AACpE,kBAAI7C,OAAJ,EAAa;AACTyC,gBAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,gBAAAA,OAAO,GAAG,IAAV;;AAEA,oBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,kBAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,iBAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,kBAAAA,MAAM,CAAC,4BAAD,CAAN;AACH,iBAFM,MAEA;AACHV,kBAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,aAbD;AAcH,WAtBM,CAAP;AAuBH,SA3BD,MA2BO;AACH,iBAAO0B,OAAO,CAACW,MAAR,CAAe,eAAf,CAAP;AACH;AACJ,OAhCE,CAAP;AAiCH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBnI,IAAlB,EAAwBkN,MAAxB,EAAgC;AAAA;;AAC5B,UAAIvN,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,aAAO,KAAK8E,qBAAL,CAA2B,oCAA3B,EACF5J,IADE,CACG,UAAA8G,MAAM,EAAI;AACZ,YAAIA,MAAJ,EAAY;AACR,cAAI,CAAC,OAAI,CAACjJ,SAAV,EAAqB;AACjB,mBAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,iBAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,gBAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,kBAAIY,OAAJ,EAAa;AACTA,gBAAAA,OAAO,GAAG,IAAV;AACAkF,gBAAAA,MAAM,CAAC,2BAAD,CAAN;AACH;AACJ,aALuB,EAKrB,OAAI,CAACvI,KAAL,CAAWY,UALU,CAAxB;;AAOA,YAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,mBAAtC,EAA2DkN,MAA3D,EAAmE,UAAApH,IAAI,EAAI;AACvE,kBAAI7C,OAAJ,EAAa;AACTyC,gBAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,gBAAAA,OAAO,GAAG,IAAV;;AAEA,oBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,kBAAAA,MAAM,CAAC,8BAAD,CAAN;AACH,iBAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,kBAAAA,MAAM,CAAC,6BAAD,CAAN;AACH,iBAFM,MAEA;AACHV,kBAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,aAbD;AAcH,WAtBM,CAAP;AAuBH,SA3BD,MA2BO;AACH,iBAAO0B,OAAO,CAACW,MAAR,CAAe,eAAf,CAAP;AACH;AACJ,OAhCE,CAAP;AAiCH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkBnI,IAAlB,EAAwB;AAAA;;AACpB,UAAIL,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,aAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,QAAA,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,mBAAtC,EAA2D,IAA3D,EAAiE,UAAAyB,KAAK,EAAI;AACtEA,UAAAA,KAAK,GAAG0G,MAAM,CAAC1G,KAAD,CAAT,GAAmBgG,OAAO,CAAC,IAAD,CAA/B;AACH,SAFD;AAGH,OAJM,CAAP;AAKH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAYzH,IAAZ,EAAkBmN,UAAlB,EAA8B;AAAA;;AAC1B,UAAIxN,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,aAAO,IAAIX,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1B,QAAA,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,aAAtC,EAAqDmN,UAArD,EAAiE,UAAAhD,MAAM;AAAA,iBACnE1C,OAAO,CAAC0C,MAAD,CAD4D;AAAA,SAAvE;AAEH,OAHM,CAAP;AAIH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,0BAAiBiD,OAAjB,EAA0B;AAAA;;AACtB,UAAI,CAAC,KAAKlM,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,kBAAlB,EAAsCqJ,OAAO,IAAI,GAAjD,EAAsD,UAAC7L,GAAD,EAAMX,MAAN;AAAA,iBAClDW,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC7G,MAAD,CADuB;AAAA,SAAtD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,2BAAkBwM,OAAlB,EAA2BrI,IAA3B,EAAiC;AAAA;;AAC7B,UAAI,CAAC,KAAK7D,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,mBAAlB,EAAuCqJ,OAAO,IAAI,GAAlD,EAAuDrI,IAAvD,EAA6D,UAACxD,GAAD,EAAMX,MAAN;AAAA,iBACzDW,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC7G,MAAD,CAD8B;AAAA,SAA7D,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgB2H,MAAhB,EAAwB;AACpB,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAe+D,YAA9B,EAA4C;AACxC,eAAO,KAAK/D,SAAL,CAAe+D,YAAtB;AACH;;AAED,UAAI,CAAC,KAAK7E,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe+D,YAAf,GAA8B,KAAKiF,SAAL,CAAe,eAAf,EACzB3H,IADyB,CACpB,UAAA0C,YAAY,EAAI;AAClBA,QAAAA,YAAY,GAAGA,YAAY,IAAI,EAA/B;AACAA,QAAAA,YAAY,CAACC,MAAb,GAAsBD,YAAY,CAACC,MAAb,IAAuB,EAA7C;AACAD,QAAAA,YAAY,UAAZ,GAAsBA,YAAY,UAAZ,IAAuB,EAA7C;AACA,eAAOA,YAAP;AACH,OANyB,CAA9B;AAQA,aAAO,KAAK/D,SAAL,CAAe+D,YAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgBd,GAAhB,EAAqB;AAAA;;AACjB,aAAO,KAAKqE,SAAL,CAAe,eAAf,EAAgCrE,GAAhC,EACF5B,IADE,CACG;AAAA,eAAM,OAAI,CAACrB,SAAL,CAAe+D,YAAf,GAA8ByB,OAAO,CAACC,OAAR,CAAgBxC,GAAhB,CAApC;AAAA,OADH,CAAP;AAEH;AAED;AACJ;AACA;AACA;;;;WACI,wBAAe;AACX,aAAO,KAAK1C,OAAZ;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,oBAAWyC,EAAX,EAAeqI,OAAf,EAAwB;AAAA;;AACpB,UAAI,CAAC,KAAKnM,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCiB,EAAhC,EAAoCqI,OAApC,EAA6C,UAAC9L,GAAD,EAAM+L,MAAN;AAAA,iBACzC/L,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC6F,MAAD,CADc;AAAA,SAA7C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,sBAAatI,EAAb,EAAiBqI,OAAjB,EAA0B;AAAA;;AACtB,UAAI,CAAC,KAAKnM,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCiB,EAAhC,EAAoCqI,OAApC,EAA6C,UAAC9L,GAAD,EAAM+L,MAAN,EAAcC,UAAd,EAA0BC,SAA1B;AAAA,iBACzCjM,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC;AAAC6F,YAAAA,MAAM,EAANA,MAAD;AAASE,YAAAA,SAAS,EAATA,SAAT;AAAoBD,YAAAA,UAAU,EAAVA;AAApB,WAAD,CADc;AAAA,SAA7C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,wBAAezE,IAAf,EAAqB2E,QAArB,EAA+B;AAAA;;AAC3B,UAAI9N,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,aAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoC+E,IAApC,EAA0C2E,QAA1C,EAAoD,UAAAlM,GAAG;AAAA,iBACnDA,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,EADwB;AAAA,SAAvD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,wBAAezH,IAAf,EAAqBuI,MAArB,EAA6B;AACzB,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACnI,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,GAAG,iBAAiBA,IAAxB;AACH;;AAED,UAAI,CAACuI,MAAD,IAAW,KAAKvG,SAAL,CAAe,SAAShC,IAAxB,CAAf,EAA8C;AAC1C,eAAO,KAAKgC,SAAL,CAAe,SAAShC,IAAxB,CAAP;AACH;;AACD,WAAKgC,SAAL,CAAe,SAAShC,IAAxB,IAAgC,KAAKgL,SAAL,CAAehL,IAAf,EAC3BqD,IAD2B,CACtB,UAAA4B,GAAG;AAAA,eAAIA,GAAG,IAAIA,GAAG,CAACe,MAAX,GAAoBf,GAAG,CAACe,MAAJ,CAAW0H,OAAX,IAAsB,EAA1C,GAA+C,EAAnD;AAAA,OADmB,CAAhC;AAGA,aAAO,KAAK1L,SAAL,CAAe,SAAShC,IAAxB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,qBAAY2N,YAAZ,EAA0BpF,MAA1B,EAAkC;AAAA;;AAC9B,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAIwF,YAAY,CAAC7D,UAAb,CAAwB,cAAxB,CAAJ,EAA6C;AACzC6D,QAAAA,YAAY,GAAGA,YAAY,CAACnL,OAAb,CAAqB,iBAArB,EAAwC,EAAxC,CAAf;AACH;;AAED,UAAI,CAAC+F,MAAD,IAAW,KAAKvG,SAAL,CAAe,UAAU2L,YAAzB,CAAf,EAAuD;AACnD,eAAO,KAAK3L,SAAL,CAAe,UAAU2L,YAAzB,CAAP;AACH;;AACD,WAAK3L,SAAL,CAAe,UAAU2L,YAAzB,IAAyC,IAAInG,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACxD,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiC4J,YAAjC,EAA+C,UAACC,EAAD,EAAK5N,IAAL,EAAc;AAAA;;AACzD,cAAM6N,IAAI,GAAG,CAAC;AAAC7K,YAAAA,IAAI,EAAE,oCAAP;AAA6C0K,YAAAA,OAAO,EAAE,SAAtD;AAAiEI,YAAAA,MAAM,EAAE;AAAzE,WAAD,CAAb;AACA,cAAMC,IAAI,GAAG,CAAC;AAAC/K,YAAAA,IAAI,EAAE,+BAAP;AAA6C0K,YAAAA,OAAO,EAAE,IAAtD;AAAiEI,YAAAA,MAAM,EAAE;AAAzE,WAAD,CAAb;;AACA,8BAAI9N,IAAI,UAAR,kEAAI,aAAagO,QAAjB,kDAAI,sBAAuBC,iBAA3B,EAA8C;AAC1C,iBAAK,IAAMC,GAAX,IAAkBlO,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAAvC,EAA0D;AACtD,kBAAI,CAACjO,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuChG,cAAvC,CAAsDiG,GAAtD,CAAL,EAAiE;AAC7D;AACH;;AACD,mBAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGnO,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4C3G,MAApE,EAA4E4G,GAAG,EAA/E,EAAmF;AAC/E,oBAAInO,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDL,MAAjD,KAA4D,MAAhE,EAAwE;AACpED,kBAAAA,IAAI,CAAC7G,IAAL,CAAU;AAAChE,oBAAAA,IAAI,aAAMhD,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDL,MAAvD,eAAkE9N,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDT,OAAnH,gBAAgIQ,GAAhI,CAAL;AAA4IR,oBAAAA,OAAO,EAAE1N,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDT,OAAtM;AAA+MI,oBAAAA,MAAM,EAAE;AAAvN,mBAAV;AACH,iBAFD,MAEO;AACHC,kBAAAA,IAAI,CAAC/G,IAAL,CAAU;AAAChE,oBAAAA,IAAI,aAAMhD,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDL,MAAvD,eAAkE9N,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDT,OAAnH,gBAAgIQ,GAAhI,CAAL;AAA4IR,oBAAAA,OAAO,EAAE1N,IAAI,UAAJ,CAAYgO,QAAZ,CAAqBC,iBAArB,CAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDT,OAAtM;AAA+MI,oBAAAA,MAAM,EAAE;AAAvN,mBAAV;AACH;AACJ;AACJ;AACJ;;AACD,eAAK,IAAIrD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsD,IAAI,CAACxG,MAAzB,EAAiCkD,CAAC,EAAlC,EAAsC;AAClCoD,YAAAA,IAAI,CAAC7G,IAAL,CAAU+G,IAAI,CAACtD,CAAD,CAAd;AACH;;AACDhD,UAAAA,OAAO,CAACoG,IAAD,CAAP;AACH,SArBD,CADwD;AAAA,OAAnB,CAAzC;AAwBA,aAAO,KAAK7L,SAAL,CAAe,UAAU2L,YAAzB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,iBAAQtI,IAAR,EAAc;AAAA;;AACV,UAAI1F,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,aAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6BsB,IAA7B,EAAmC,UAAC9D,GAAD,EAAM8D,IAAN;AAAA,iBAC/B9D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACpC,IAAD,CADI;AAAA,SAAnC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,iBAAQ+I,aAAR,EAAuB;AAAA;;AACnB,UAAIzO,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,aAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,SAAlB,EAA6BqK,aAA7B,EAA4C,UAAC7M,GAAD,EAAM8D,IAAN;AAAA,iBACxC9D,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACpC,IAAD,CADa;AAAA,SAA5C,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;WACI,sBAAa;AAAA;;AACT,WAAKrD,SAAL,CAAeuB,OAAf,GAAyB,KAAKvB,SAAL,CAAeuB,OAAf,IAA0B,IAAIiE,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC3D,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC,UAACxC,GAAD,EAAMgC,OAAN,EAAe8K,UAAf,EAA8B;AAC1D;AACA,cAAI9M,GAAG,IAAI,CAACgC,OAAR,IAAmB,OAAOhC,GAAP,KAAe,QAAlC,IAA8CA,GAAG,CAAC+M,KAAJ,CAAU,eAAV,CAAlD,EAA8E;AAC1E7G,YAAAA,OAAO,CAAC;AAAClE,cAAAA,OAAO,EAAEhC,GAAV;AAAe8M,cAAAA,UAAU,EAAE;AAA3B,aAAD,CAAP;AACH,WAFD,MAEO;AACH,mBAAO9M,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC;AAAClE,cAAAA,OAAO,EAAPA,OAAD;AAAU8K,cAAAA,UAAU,EAAVA;AAAV,aAAD,CAAlC;AACH;AACJ,SAPD,CAD2D;AAAA,OAAZ,CAAnD;AAUA,aAAO,KAAKrM,SAAL,CAAeuB,OAAtB;AACH;AAED;AACJ;AACA;AACA;;;;WACI,4BAAmB;AAAA;;AACf,WAAKvB,SAAL,CAAeuM,OAAf,GAAyB,KAAKvM,SAAL,CAAeuM,OAAf,IAA0B,IAAI/G,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC3D,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,gBAAlB,EAAoC,UAACxC,GAAD,EAAMyB,IAAN;AAAA,iBAChCzB,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACzE,IAAD,CADK;AAAA,SAApC,CAD2D;AAAA,OAAZ,CAAnD;AAIA,aAAO,KAAKhB,SAAL,CAAeuM,OAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,2BAAkB;AACd/M,MAAAA,OAAO,CAACgN,GAAR,CAAY,4BAAZ;AACA,aAAO,KAAKpL,UAAL,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,mBAAU4F,OAAV,EAAmByF,QAAnB,EAA6BpB,OAA7B,EAAsC;AAAA;;AAClC,UAAI1N,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiF,OAA/B,EAAwCyF,QAAxC,EAAkDpB,OAAlD,EAA2D,UAAC9L,GAAD,EAAMmN,OAAN,EAAe1J,EAAf;AAAA,iBACvDzD,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC;AAACiH,YAAAA,OAAO,EAAPA,OAAD;AAAU1J,YAAAA,EAAE,EAAFA;AAAV,WAAD,CAD4B;AAAA,SAA3D,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,mBAAUgE,OAAV,EAAmByF,QAAnB,EAA6BpB,OAA7B,EAAsC;AAAA;;AAClC,UAAI1N,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,WAAlB,EAA+BiF,OAA/B,EAAwCyF,QAAxC,EAAkDpB,OAAlD,EAA2D,UAAC9L,GAAD,EAAMmN,OAAN,EAAe1J,EAAf;AAAA,iBACvDzD,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC;AAACiH,YAAAA,OAAO,EAAPA,OAAD;AAAU1J,YAAAA,EAAE,EAAFA;AAAV,WAAD,CAD4B;AAAA,SAA3D,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,oBAAWgE,OAAX,EAAoByF,QAApB,EAA8B;AAAA;;AAC1B,UAAI,CAAC,KAAKvN,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCiF,OAAhC,EAAyCyF,QAAzC,EAAmD,UAAClN,GAAD,EAAMoN,MAAN;AAAA,iBAC/CpN,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAACkH,MAAD,CADoB;AAAA,SAAnD,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,0BAAiB3O,IAAjB,EAAuB4O,QAAvB,EAAiC;AAAA;;AAC7B,UAAIjP,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AAED,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACtB,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,kBAAtC,EAA0D;AAAC4O,UAAAA,QAAQ,EAARA;AAAD,SAA1D,EAAsE,UAAAC,aAAa;AAAA,iBAC/EpH,OAAO,CAACoH,aAAD,CADwE;AAAA,SAAnF,CADsB;AAAA,OAAnB,CAAP;AAGH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,4BAAmB7O,IAAnB,EAAyB4O,QAAzB,EAAmC;AAAA;;AAC/B,UAAIjP,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AAED,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACtB,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgC/D,IAAhC,EAAsC,oBAAtC,EAA4D;AAAC4O,UAAAA,QAAQ,EAARA;AAAD,SAA5D,EAAwE,UAAAC,aAAa;AAAA,iBACjFpH,OAAO,CAACoH,aAAD,CAD0E;AAAA,SAArF,CADsB;AAAA,OAAnB,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;WACI,+BAAsB;AAAA;;AAClB,UAAIlP,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,qBAAlB,EAAyC,UAACtC,KAAD,EAAQqN,QAAR;AAAA,iBACrCrN,KAAK,GAAG0G,MAAM,CAAC1G,KAAD,CAAT,GAAmBgG,OAAO,CAACqH,QAAD,CADM;AAAA,SAAzC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;WACI,uBAAc;AAAA;;AACV,UAAInP,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiC,UAACtC,KAAD,EAAQyL,MAAR;AAAA,iBAC7BzL,KAAK,GAAG0G,MAAM,CAAC1G,KAAD,CAAT,GAAmBgG,OAAO,CAACyF,MAAD,CADF;AAAA,SAAjC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;WACI,0BAAiB;AAAA;;AACb,UAAI,CAAC,KAAKhM,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAAAC,OAAO;AAAA,eACtB,OAAI,CAAClF,OAAL,CAAawB,IAAb,CAAkB,aAAlB,EAAiC,UAACE,QAAD,EAAW6E,IAAX;AAAA,iBAC7BrB,OAAO,CAACqB,IAAD,CADsB;AAAA,SAAjC,CADsB;AAAA,OAAnB,CAAP;AAGH;;;WAED,2BAAkBtI,UAAlB,EAA8B;AAC1B,UAAI,CAAC,KAAKU,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACpC,YAAM4G,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AAEA,YAAI/L,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACA8L,YAAAA,UAAU,CAACE,KAAX;AACA9G,YAAAA,MAAM,CAAC,2BAAD,CAAN;AACH;AACJ,SANuB,EAMrB3H,UAAU,IAAI,IANO,CAAxB;AAQA,eAAO0O,KAAK,CAAC,WAAD,EAAc;AAAEC,UAAAA,MAAM,EAAEJ,UAAU,CAACI;AAArB,SAAd,CAAL,CACF9L,IADE,CACG,UAAA+E,GAAG;AAAA,iBAAIA,GAAG,CAACgH,IAAJ,EAAJ;AAAA,SADN,EAEF/L,IAFE,CAEG,UAAA+L,IAAI,EAAI;AACV,cAAInM,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;AACAwE,YAAAA,OAAO,CAAC2H,IAAD,CAAP;AACH;AACJ,SARE,WASI,UAAA7I,CAAC,EAAI;AACR4B,UAAAA,MAAM,CAAC,wBAAwB5B,CAAzB,CAAN;AACH,SAXE,CAAP;AAYH,OAvBM,CAAP;AAwBH;AAED;AACJ;AACA;AACA;;;;WACI,oBAAWgC,MAAX,EAAmB;AAAA;;AACf,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAAC,KAAKjH,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,aAAO,IAAI+H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACf,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,YAAlB,EAAgCwE,MAAhC,EAAwC,UAAChH,GAAD,EAAM8N,OAAN;AAAA,iBACpC9N,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC4H,OAAD,CADS;AAAA,SAAxC,CADe;AAAA,OAAZ,CAAP;AAGH;AAED;AACJ;AACA;AACA;;;;WACI,8BAAqB;AAAA;;AACjB,UAAI,CAAC,KAAKnO,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAesN,eAAf,GAAiC,KAAKtN,SAAL,CAAesN,eAAf,IAC7B,IAAI9H,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACR,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwC,UAACxC,GAAD,EAAMgO,SAAN;AAAA,iBACpChO,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC8H,SAAD,CADS;AAAA,SAAxC,CADQ;AAAA,OAAZ,CADJ;AAKA,aAAO,KAAKvN,SAAL,CAAesN,eAAtB;AACH,K,CAED;;;;WACA,4BAAmB/G,MAAnB,EAA2B;AAAA;;AACvB,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAewN,eAA9B,EAA+C;AAC3C,eAAO,KAAKxN,SAAL,CAAewN,eAAtB;AACH;;AACD,UAAI,CAAC,KAAKtO,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AACD,WAAKuC,SAAL,CAAewN,eAAf,GAAiC,IAAIhI,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACzC,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,oBAAlB,EAAwC,UAACxC,GAAD,EAAMwE,YAAN;AAAA,iBACpCxE,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC1B,YAAD,CADS;AAAA,SAAxC,CADyC;AAAA,OAAZ,CAAjC;AAIA,aAAO,KAAK/D,SAAL,CAAewN,eAAtB;AACH,K,CAED;;;;WACA,6BAAoBjH,MAApB,EAA4B;AAAA;;AACxB,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAeyN,gBAA9B,EAAgD;AAC5C,eAAO,KAAKzN,SAAL,CAAeyN,gBAAtB;AACH;;AACD,UAAI,CAAC,KAAKvO,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAeyN,gBAAf,GAAkC,IAAIjI,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC1C,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,qBAAlB,EAAyC,UAACxC,GAAD,EAAMwE,YAAN;AAAA,iBACrCxE,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC1B,YAAD,CADU;AAAA,SAAzC,CAD0C;AAAA,OAAZ,CAAlC;AAIA,aAAO,KAAK/D,SAAL,CAAeyN,gBAAtB;AACH,K,CAED;AACA;;;;WACA,6BAAoBzP,IAApB,EAA0BuI,MAA1B,EAAkC/H,UAAlC,EAA8C;AAAA;;AAC1C,UAAIb,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AAED,WAAKnG,SAAL,CAAe0N,gBAAf,GAAkC,KAAK1N,SAAL,CAAe0N,gBAAf,IAAmC,EAArE;;AAEA,UAAI,CAACnH,MAAD,IAAW,KAAKvG,SAAL,CAAe0N,gBAAf,CAAgC1P,IAAhC,CAAf,EAAsD;AAClD,eAAO,KAAKgC,SAAL,CAAe0N,gBAAf,CAAgC1P,IAAhC,CAAP;AACH;;AAED,UAAI,CAAC,KAAKkB,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,WAAKgC,SAAL,CAAe0N,gBAAf,CAAgC1P,IAAhC,IAAwC,IAAIwH,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AACrE,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,6BAAD,CAAN;AACH;AACJ,SALuB,EAKrB3H,UAAU,IAAI,OAAI,CAACZ,KAAL,CAAWY,UALJ,CAAxB;;AAOA,QAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,qBAAlB,EAAyC/D,IAAzC,EAA+C,UAAA8F,IAAI,EAAI;AACnD,cAAI7C,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,cAAAA,MAAM,CAAC,oCAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,cAAAA,MAAM,CAAC,mCAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArBuC,CAAxC;AAuBA,aAAO,KAAK9D,SAAL,CAAe0N,gBAAf,CAAgC1P,IAAhC,CAAP;AACH,K,CAED;;;;WACA,gCAAuBuI,MAAvB,EAA+B;AAAA;;AAC3B,UAAI,CAACA,MAAD,IAAW,KAAKvG,SAAL,CAAe2N,kBAA9B,EAAkD;AAC9C,eAAO,KAAK3N,SAAL,CAAe2N,kBAAtB;AACH;;AAED,UAAI,CAAC,KAAKzO,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe2N,kBAAf,GAAoC,IAAInI,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eAC5C,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,wBAAlB,EAA4C,UAACxC,GAAD,EAAMwE,YAAN;AAAA,iBACxCxE,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC1B,YAAD,CADa;AAAA,SAA5C,CAD4C;AAAA,OAAZ,CAApC;AAIA,aAAO,KAAK/D,SAAL,CAAe2N,kBAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,8BAAqB3P,IAArB,EAA2BuI,MAA3B,EAAmCkE,SAAnC,EAA8C;AAAA;;AAC1C,UAAI9M,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAe4N,WAA9B,EAA2C;AACvC,eAAO,KAAK5N,SAAL,CAAe4N,WAAtB;AACH;;AAED,UAAI,CAAC,KAAK1O,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,UAAI,CAACO,IAAI,CAAC8J,UAAL,CAAgB,cAAhB,CAAL,EAAsC;AAClC9J,QAAAA,IAAI,IAAI,iBAAiBA,IAAzB;AACH;;AAED,WAAKgC,SAAL,CAAe4N,WAAf,GAA6B,IAAIpI,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV,EAAqB;AAC1D,YAAIlF,OAAO,GAAGZ,UAAU,CAAC,YAAM;AAC3B,cAAIY,OAAJ,EAAa;AACTA,YAAAA,OAAO,GAAG,IAAV;AACAkF,YAAAA,MAAM,CAAC,8BAAD,CAAN;AACH;AACJ,SALuB,EAKrBsE,SAAS,IAAI,OAAI,CAAC7M,KAAL,CAAWY,UALH,CAAxB;;AAOA,QAAA,OAAI,CAAC+B,OAAL,CAAawB,IAAb,CAAkB,sBAAlB,EAA0C/D,IAA1C,EAAgD,UAAA8F,IAAI,EAAI;AACpD,cAAI7C,OAAJ,EAAa;AACTyC,YAAAA,YAAY,CAACzC,OAAD,CAAZ;AACAA,YAAAA,OAAO,GAAG,IAAV;;AACA,gBAAI6C,IAAI,KAAKtG,gBAAb,EAA+B;AAC3B2I,cAAAA,MAAM,CAAC,qCAAD,CAAN;AACH,aAFD,MAEO,IAAI,CAACrC,IAAL,EAAW;AACdqC,cAAAA,MAAM,CAAC,oCAAD,CAAN;AACH,aAFM,MAEA;AACHV,cAAAA,OAAO,CAAC3B,IAAD,CAAP;AACH;AACJ;AACJ,SAZD;AAaH,OArB4B,CAA7B;AAuBA,aAAO,KAAK9D,SAAL,CAAe4N,WAAtB;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgBrH,MAAhB,EAAwB;AAAA;;AACpB,UAAI5I,UAAU,CAACmL,KAAX,EAAJ,EAAwB;AACpB,eAAOtD,OAAO,CAACW,MAAR,CAAe,uBAAf,CAAP;AACH;;AACD,UAAI,CAACI,MAAD,IAAW,KAAKvG,SAAL,CAAe6N,YAA9B,EAA4C;AACxC,eAAO,KAAK7N,SAAL,CAAe6N,YAAtB;AACH;;AAED,UAAI,CAAC,KAAK3O,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe6N,YAAf,GAA8B,IAAIrI,OAAJ,CAAY,UAACC,OAAD,EAAUU,MAAV;AAAA,eACtC,OAAI,CAAC5F,OAAL,CAAawB,IAAb,CAAkB,iBAAlB,EAAqC,UAACxC,GAAD,EAAMwE,YAAN;AAAA,iBACjCxE,GAAG,GAAG4G,MAAM,CAAC5G,GAAD,CAAT,GAAiBkG,OAAO,CAAC1B,YAAD,CADM;AAAA,SAArC,CADsC;AAAA,OAAZ,CAA9B;AAIA,aAAO,KAAK/D,SAAL,CAAe6N,YAAtB;AACH;AAED;AACJ;AACA;AACA;;;;WACI,mBAAU;AACN,UAAI,KAAK7N,SAAL,CAAe8N,IAAnB,EAAyB;AACrB,eAAO,KAAK9N,SAAL,CAAe8N,IAAtB;AACH;;AAED,UAAI,CAAC,KAAK5O,SAAV,EAAqB;AACjB,eAAOsG,OAAO,CAACW,MAAR,CAAe1I,aAAf,CAAP;AACH;;AAED,WAAKuC,SAAL,CAAe8N,IAAf,GAAsB,KAAK9E,SAAL,CAAe,kBAAf,EACjB3H,IADiB,CACZ,UAAA4B,GAAG;AAAA;;AAAA,eAAIA,GAAJ,aAAIA,GAAJ,sCAAIA,GAAG,UAAP,gDAAI,YAAa6K,IAAjB;AAAA,OADS,CAAtB;AAGA,aAAO,KAAK9N,SAAL,CAAe8N,IAAtB;AACH;;;WA90ED,iBAAe;AACX,aAAOhQ,MAAM,CAAC2C,SAAP,KAAqB/B,SAA5B;AACH;;;;;;AA+0ELf,UAAU,CAACA,UAAX,GAAwB;AACpB8E,EAAAA,KAAK,EAAEsL,sBAAUC,IADG;AAEpB1J,EAAAA,OAAO,EAAEyJ,sBAAUC,IAFC;AAGpB3O,EAAAA,UAAU,EAAE0O,sBAAUC;AAHF,CAAxB;eAQerQ,U","sourcesContent":["/**\r\n * Copyright 2020-2021, bluefox <dogafox@gmail.com>\r\n *\r\n * MIT License\r\n *\r\n **/\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Possible progress states. */\r\nexport const PROGRESS = {\r\n    /** The socket is connecting. */\r\n    CONNECTING: 0,\r\n    /** The socket is successfully connected. */\r\n    CONNECTED: 1,\r\n    /** All objects are loaded. */\r\n    OBJECTS_LOADED: 2,\r\n    /** The socket is ready for use. */\r\n    READY: 3\r\n};\r\n\r\nconst PERMISSION_ERROR = 'permissionError';\r\nconst NOT_CONNECTED    = 'notConnectedError';\r\n\r\nconst ERRORS = {\r\n    PERMISSION_ERROR,\r\n    NOT_CONNECTED\r\n};\r\n\r\nclass Connection {\r\n    /**\r\n     * @param {import('./types').ConnectionProps} props\r\n     */\r\n    constructor(props) {\r\n        props                 = props || { protocol: window.location.protocol, host: window.location.hostname };\r\n        this.props            = props;\r\n\r\n        this.autoSubscribes   = this.props.autoSubscribes || [];\r\n        this.autoSubscribeLog = this.props.autoSubscribeLog;\r\n\r\n        this.props.protocol   = this.props.protocol || window.location.protocol;\r\n        this.props.host       = this.props.host     || window.location.hostname;\r\n        this.props.port       = this.props.port     || (window.location.port === '3000' ? 8081 : window.location.port);\r\n        this.props.ioTimeout  = Math.max(this.props.ioTimeout  || 20000, 20000);\r\n        this.props.cmdTimeout = Math.max(this.props.cmdTimeout || 5000, 5000);\r\n\r\n        // breaking change. Do not load all objects by default is true\r\n        this.doNotLoadAllObjects = this.props.doNotLoadAllObjects === undefined ? true : this.props.doNotLoadAllObjects;\r\n        this.doNotLoadACL        = this.props.doNotLoadACL        === undefined ? true : this.props.doNotLoadACL;\r\n\r\n        /** @type {Record<string, ioBroker.State>} */\r\n        this.states = {};\r\n        this.objects = null;\r\n        this.acl = null;\r\n        this.firstConnect = true;\r\n        this.waitForRestart = false;\r\n        /** @type {ioBroker.Languages} */\r\n        this.systemLang = 'en';\r\n        this.connected = false;\r\n\r\n        /** @type {Record<string, { reg: RegExp; cbs: ioBroker.StateChangeHandler[]}>} */\r\n        this.statesSubscribes = {}; // subscribe for states\r\n\r\n        /** @type {Record<string, { reg: RegExp; cbs: import('./types').ObjectChangeHandler[]}>} */\r\n        this.objectsSubscribes = {}; // subscribe for objects\r\n        this.onProgress = this.props.onProgress || function () {};\r\n        this.onError = this.props.onError || function (err) {console.error(err);};\r\n        this.loaded = false;\r\n        this.loadTimer = null;\r\n        this.loadCounter = 0;\r\n        this.certPromise = null;\r\n\r\n        /** @type {((connected: boolean) => void)[]} */\r\n        this.onConnectionHandlers = [];\r\n        /** @type {((message: string) => void)[]} */\r\n        this.onLogHandlers = [];\r\n\r\n        /** @type {Record<string, Promise<any>>} */\r\n        this._promises = {};\r\n        this.startSocket();\r\n    }\r\n\r\n    /**\r\n     * Checks if this connection is running in a web adapter and not in an admin.\r\n     * @returns {boolean} True if running in a web adapter or in a socketio adapter.\r\n     */\r\n    static isWeb() {\r\n        return window.socketUrl !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Starts the socket.io connection.\r\n     * @returns {void}\r\n     */\r\n    startSocket() {\r\n        // if socket io is not yet loaded\r\n        if (typeof window.io === 'undefined') {\r\n            // if in index.html the onLoad function not defined\r\n            if (typeof window.registerSocketOnLoad !== 'function') {\r\n                // poll if loaded\r\n                this.scriptLoadCounter = this.scriptLoadCounter || 0;\r\n                this.scriptLoadCounter++;\r\n\r\n                if (this.scriptLoadCounter < 30) {\r\n                    // wait till the script loaded\r\n                    setTimeout(() => this.startSocket(), 100);\r\n                    return;\r\n                } else {\r\n                    window.alert('Cannot load socket.io.js!');\r\n                }\r\n            } else {\r\n                // register on load\r\n                window.registerSocketOnLoad(() => this.startSocket());\r\n            }\r\n            return;\r\n        } else {\r\n            // socket was initialized, do not repeat\r\n            if (this._socket) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        let host = this.props.host;\r\n        let port = this.props.port;\r\n        let protocol = this.props.protocol.replace(':', '');\r\n\r\n        // if web adapter, socket io could be on other port or even host\r\n        if (window.socketUrl) {\r\n            let parts = window.socketUrl.split(':');\r\n            host = parts[0] || host;\r\n            port = parts[1] || port;\r\n            if (host.includes('://')) {\r\n                parts = host.split('://');\r\n                protocol = parts[0];\r\n                host = parts[1];\r\n            }\r\n        }\r\n\r\n        const url = `${protocol}://${host}:${port}`;\r\n\r\n        this._socket = window.io.connect(\r\n            url,\r\n            {\r\n                query: 'ws=true',\r\n                name: this.props.name,\r\n                timeout: this.props.ioTimeout\r\n            }\r\n        );\r\n\r\n        this._socket.on('connect', noTimeout => {\r\n            // If the user is not admin it takes some time to install the handlers, because all rights must be checked\r\n            if (noTimeout !== true) {\r\n                setTimeout(() =>\r\n                    this.getVersion()\r\n                        .then(info => {\r\n                            const [major, minor, patch] = info.version.split('.');\r\n                            const v = parseInt(major, 10) * 10000 + parseInt(minor, 10) * 100 + parseInt(patch, 10);\r\n                            if (v < 40102) {\r\n                                this._authTimer = null;\r\n                                // possible this is old version of admin\r\n                                this.onPreConnect(false, false);\r\n                            } else {\r\n                                this._socket.emit('authenticate', (isOk, isSecure) => this.onPreConnect(isOk, isSecure));\r\n                            }\r\n                        }), 500);\r\n            } else {\r\n                // iobroker websocket waits, till all handlers are installed\r\n                this._socket.emit('authenticate', (isOk, isSecure) => this.onPreConnect(isOk, isSecure));\r\n            }\r\n        });\r\n\r\n        this._socket.on('reconnect', () => {\r\n            this.onProgress(PROGRESS.READY);\r\n            this.connected = true;\r\n\r\n            if (this.waitForRestart) {\r\n                window.location.reload(false);\r\n            } else {\r\n                this._subscribe(true);\r\n                this.onConnectionHandlers.forEach(cb => cb(true));\r\n            }\r\n        });\r\n\r\n        this._socket.on('disconnect', () => {\r\n            this.connected  = false;\r\n            this.subscribed = false;\r\n            this.onProgress(PROGRESS.CONNECTING);\r\n            this.onConnectionHandlers.forEach(cb => cb(false));\r\n        });\r\n\r\n        this._socket.on('reauthenticate', () =>\r\n            this.authenticate());\r\n\r\n        this._socket.on('log', message => {\r\n            this.props.onLog && this.props.onLog(message);\r\n            this.onLogHandlers.forEach(cb => cb(message));\r\n        });\r\n\r\n        this._socket.on('error', err => {\r\n            let _err = err || '';\r\n            if (typeof _err.toString !== 'function') {\r\n                _err = JSON.stringify(_err);\r\n                console.error(`Received strange error: ${_err}`);\r\n            }\r\n            _err = _err.toString();\r\n            if (_err.includes('User not authorized')) {\r\n                this.authenticate();\r\n            } else {\r\n                window.alert(`Socket Error: ${err}`);\r\n            }\r\n        });\r\n\r\n        this._socket.on('connect_error', err =>\r\n            console.error(`Connect error: ${err}`));\r\n\r\n        this._socket.on('permissionError', err =>\r\n            this.onError({message: 'no permission', operation: err.operation, type: err.type, id: (err.id || '')}));\r\n\r\n        this._socket.on('objectChange', (id, obj) =>\r\n            setTimeout(() => this.objectChange(id, obj), 0));\r\n\r\n        this._socket.on('stateChange', (id, state) =>\r\n            setTimeout(() => this.stateChange(id, state), 0));\r\n\r\n        this._socket.on('cmdStdout', (id, text) =>\r\n            this.onCmdStdoutHandler && this.onCmdStdoutHandler(id, text));\r\n\r\n        this._socket.on('cmdStderr', (id, text) =>\r\n            this.onCmdStderrHandler && this.onCmdStderrHandler(id, text));\r\n\r\n        this._socket.on('cmdExit', (id, exitCode) =>\r\n            this.onCmdExitHandler && this.onCmdExitHandler(id, exitCode));\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {boolean} isOk\r\n     * @param {boolean} isSecure\r\n     */\r\n    onPreConnect(isOk, isSecure) {\r\n        if (this._authTimer) {\r\n            clearTimeout(this._authTimer);\r\n            this._authTimer = null;\r\n        }\r\n\r\n        this.connected = true;\r\n        this.isSecure = isSecure;\r\n\r\n        if (this.waitForRestart) {\r\n            window.location.reload(false);\r\n        } else {\r\n            if (this.firstConnect) {\r\n                // retry strategy\r\n                this.loadTimer = setTimeout(() => {\r\n                    this.loadTimer = null;\r\n                    this.loadCounter++;\r\n                    if (this.loadCounter < 10) {\r\n                        this.onConnect();\r\n                    }\r\n                }, 1000);\r\n\r\n                if (!this.loaded) {\r\n                    this.onConnect();\r\n                }\r\n            } else {\r\n                this.onProgress(PROGRESS.READY);\r\n            }\r\n\r\n            this._subscribe(true);\r\n            this.onConnectionHandlers.forEach(cb => cb(true));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the socket is connected.\r\n     * @returns {boolean} true if connected.\r\n     */\r\n    isConnected() {\r\n        return this.connected;\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\r\n    _getUserPermissions(cb) {\r\n        if (this.doNotLoadACL) {\r\n            return cb && cb();\r\n        } else {\r\n            this._socket.emit('getUserPermissions', cb);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\r\n    onConnect() {\r\n        this._getUserPermissions((err, acl) => {\r\n            if (err) {\r\n                return this.onError('Cannot read user permissions: ' + err);\r\n            } else\r\n            if (!this.doNotLoadACL) {\r\n                if (this.loaded) {\r\n                    return;\r\n                }\r\n                this.loaded = true;\r\n                clearTimeout(this.loadTimer);\r\n                this.loadTimer = null;\r\n\r\n                this.onProgress(PROGRESS.CONNECTED);\r\n                this.firstConnect = false;\r\n\r\n                this.acl = acl;\r\n            }\r\n\r\n            // Read system configuration\r\n            return this.getCompactSystemConfig()\r\n                .then(data => {\r\n                    if (this.doNotLoadACL) {\r\n                        if (this.loaded) {\r\n                            return;\r\n                        }\r\n                        this.loaded = true;\r\n                        clearTimeout(this.loadTimer);\r\n                        this.loadTimer = null;\r\n\r\n                        this.onProgress(PROGRESS.CONNECTED);\r\n                        this.firstConnect = false;\r\n                    }\r\n\r\n                    this.systemConfig = data;\r\n                    if (this.systemConfig && this.systemConfig.common) {\r\n                        this.systemLang = this.systemConfig.common.language;\r\n                    } else {\r\n                        this.systemLang = window.navigator.userLanguage || window.navigator.language;\r\n\r\n                        if (this.systemLang !== 'en' && this.systemLang !== 'de' && this.systemLang !== 'ru') {\r\n                            this.systemConfig.common.language = 'en';\r\n                            this.systemLang = 'en';\r\n                        }\r\n                    }\r\n\r\n                    this.props.onLanguage && this.props.onLanguage(this.systemLang);\r\n\r\n                    if (!this.doNotLoadAllObjects) {\r\n                        return this.getObjects()\r\n                            .then(() => {\r\n                                this.onProgress(PROGRESS.READY);\r\n                                this.props.onReady && this.props.onReady(this.objects);\r\n                            });\r\n                    } else {\r\n                        this.objects = {'system.config': data};\r\n                        this.onProgress(PROGRESS.READY);\r\n                        this.props.onReady && this.props.onReady(this.objects);\r\n                    }\r\n                })\r\n                .catch(e => this.onError('Cannot read system config: ' + e));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     */\r\n    authenticate() {\r\n        if (window.location.search.includes('&href=')) {\r\n            window.location = `${window.location.protocol}//${window.location.host}${window.location.pathname}${window.location.search}${window.location.hash}`;\r\n        } else {\r\n            window.location = `${window.location.protocol}//${window.location.host}${window.location.pathname}?login&href=${window.location.search}${window.location.hash}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribe to changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     * @param {ioBroker.StateChangeHandler} cb The callback.\r\n     *//**\r\n     * Subscribe to changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     * @param {boolean} binary Set to true if the given state is binary and requires Base64 decoding.\r\n     * @param {ioBroker.StateChangeHandler} cb The callback.\r\n     */\r\n    subscribeState(id, binary, cb) {\r\n        if (typeof binary === 'function') {\r\n            cb = binary;\r\n            binary = false;\r\n        }\r\n\r\n        if (!this.statesSubscribes[id]) {\r\n            let reg = id\r\n                .replace(/\\./g, '\\\\.')\r\n                .replace(/\\*/g, '.*')\r\n                .replace(/\\(/g, '\\\\(')\r\n                .replace(/\\)/g, '\\\\)')\r\n                .replace(/\\+/g, '\\\\+')\r\n                .replace(/\\[/g, '\\\\[');\r\n\r\n            if (reg.indexOf('*') === -1) {\r\n                reg += '$';\r\n            }\r\n            this.statesSubscribes[id] = {reg: new RegExp(reg), cbs: []};\r\n            this.statesSubscribes[id].cbs.push(cb);\r\n            if (this.connected) {\r\n                this._socket.emit('subscribe', id);\r\n            }\r\n        } else {\r\n            !this.statesSubscribes[id].cbs.includes(cb) && this.statesSubscribes[id].cbs.push(cb);\r\n        }\r\n        if (typeof cb === 'function' && this.connected) {\r\n            if (binary) {\r\n                this.getBinaryState(id)\r\n                    .then(base64 => cb(id, base64))\r\n                    .catch(e =>console.error(`Cannot getForeignStates \"${id}\": ${JSON.stringify(e)}`));\r\n            } else {\r\n                this._socket.emit('getForeignStates', id, (err, states) => {\r\n                    err && console.error(`Cannot getForeignStates \"${id}\": ${JSON.stringify(err)}`);\r\n                    states && Object.keys(states).forEach(id => cb(id, states[id]));\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes all callbacks from changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     *//**\r\n     * Unsubscribes the given callback from changes of the given state.\r\n     * @param {string} id The ioBroker state ID.\r\n     * @param {ioBroker.StateChangeHandler} cb The callback.\r\n     */\r\n    unsubscribeState(id, cb) {\r\n        if (this.statesSubscribes[id]) {\r\n            if (cb) {\r\n                const pos = this.statesSubscribes[id].cbs.indexOf(cb);\r\n                pos !== -1 && this.statesSubscribes[id].cbs.splice(pos, 1);\r\n            } else {\r\n                this.statesSubscribes[id].cbs = [];\r\n            }\r\n\r\n            if (!this.statesSubscribes[id].cbs || !this.statesSubscribes[id].cbs.length) {\r\n                delete this.statesSubscribes[id];\r\n                this.connected && this._socket.emit('unsubscribe', id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribe to changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @param {import('./types').ObjectChangeHandler} cb The callback.\r\n     * @returns {Promise<void>}\r\n     */\r\n    subscribeObject(id, cb) {\r\n        if (!this.objectsSubscribes[id]) {\r\n            let reg = id.replace(/\\./g, '\\\\.').replace(/\\*/g, '.*');\r\n            if (reg.indexOf('*') === -1) {\r\n                reg += '$';\r\n            }\r\n            this.objectsSubscribes[id] = {reg: new RegExp(reg), cbs: []};\r\n            this.objectsSubscribes[id].cbs.push(cb);\r\n            this.connected && this._socket.emit('subscribeObjects', id);\r\n        } else {\r\n            !this.objectsSubscribes[id].cbs.includes(cb) && this.objectsSubscribes[id].cbs.push(cb);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes all callbacks from changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @returns {Promise<void>}\r\n     *//**\r\n     * Unsubscribes the given callback from changes of the given object.\r\n     * @param {string} id The ioBroker object ID.\r\n     * @param {import('./types').ObjectChangeHandler} cb The callback.\r\n     * @returns {Promise<void>}\r\n     */\r\n    unsubscribeObject(id, cb) {\r\n        if (this.objectsSubscribes[id]) {\r\n            if (cb) {\r\n                const pos = this.objectsSubscribes[id].cbs.indexOf(cb);\r\n                pos !== -1 && this.objectsSubscribes[id].cbs.splice(pos, 1);\r\n            } else {\r\n                this.objectsSubscribes[id].cbs = [];\r\n            }\r\n\r\n            if (this.connected && (!this.objectsSubscribes[id].cbs || !this.objectsSubscribes[id].cbs.length)) {\r\n                delete this.objectsSubscribes[id];\r\n                this.connected && this._socket.emit('unsubscribeObjects', id);\r\n            }\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {string} id\r\n     * @param {ioBroker.Object | null | undefined} obj\r\n     */\r\n    objectChange(id, obj) {\r\n        // update main.objects cache\r\n        if (!this.objects) {\r\n            return;\r\n        }\r\n\r\n        /** @type {import(\"./types\").OldObject} */\r\n        let oldObj;\r\n\r\n        let changed = false;\r\n        if (obj) {\r\n            if (obj._rev && this.objects[id]) {\r\n                this.objects[id]._rev = obj._rev;\r\n            }\r\n\r\n            if (this.objects[id]) {\r\n                oldObj = {_id: id, type: this.objects[id].type};\r\n            }\r\n\r\n            if (!this.objects[id] || JSON.stringify(this.objects[id]) !== JSON.stringify(obj)) {\r\n                this.objects[id] = obj;\r\n                changed = true;\r\n            }\r\n        } else if (this.objects[id]) {\r\n            oldObj = {_id: id, type: this.objects[id].type};\r\n            delete this.objects[id];\r\n            changed = true;\r\n        }\r\n\r\n        Object.keys(this.objectsSubscribes).forEach(_id => {\r\n            if (_id === id || this.objectsSubscribes[_id].reg.test(id)) {\r\n                this.objectsSubscribes[_id].cbs.forEach(cb => cb(id, obj, oldObj));\r\n            }\r\n        });\r\n\r\n        if (changed && this.props.onObjectChange) {\r\n            this.props.onObjectChange(id, obj);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {string} id\r\n     * @param {ioBroker.State | null | undefined} state\r\n     */\r\n    stateChange(id, state) {\r\n        for (const task in this.statesSubscribes) {\r\n            if (this.statesSubscribes.hasOwnProperty(task) && this.statesSubscribes[task].reg.test(id)) {\r\n                this.statesSubscribes[task].cbs.forEach(cb => cb(id, state));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all states.\r\n     * @param {boolean} disableProgressUpdate don't call onProgress() when done\r\n     * @returns {Promise<Record<string, ioBroker.State>>}\r\n     */\r\n    getStates(disableProgressUpdate) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getStates', (err, res) => {\r\n                this.states = res;\r\n                !disableProgressUpdate && this.onProgress(PROGRESS.STATES_LOADED);\r\n                return err ? reject(err) : resolve(this.states);\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Gets the given state.\r\n     * @param {string} id The state ID.\r\n     * @returns {Promise<ioBroker.State | null | undefined>}\r\n     */\r\n    getState(id) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getState', id, (err, state) => err ? reject(err) : resolve(state)));\r\n    }\r\n\r\n    /**\r\n     * Gets the given binary state.\r\n     * @param {string} id The state ID.\r\n     * @returns {Promise<Buffer | undefined>}\r\n     */\r\n    getBinaryState(id) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        // the data will come in base64\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getBinaryState', id, (err, state) => err ? reject(err) : resolve(state)));\r\n    }\r\n\r\n    /**\r\n     * Sets the given binary state.\r\n     * @param {string} id The state ID.\r\n     * @param {string} base64 The Base64 encoded binary data.\r\n     * @returns {Promise<void>}\r\n     */\r\n    setBinaryState(id, base64) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        // the data will come in base64\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('setBinaryState', id, base64, err => err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Sets the given state value.\r\n     * @param {string} id The state ID.\r\n     * @param {string | number | boolean | ioBroker.State | ioBroker.SettableState | null} val The state value.\r\n     * @returns {Promise<void>}\r\n     */\r\n    setState(id, val) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('setState', id, val, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Gets all objects.\r\n     * @param {(objects?: Record<string, ioBroker.Object>) => void} update Callback that is executed when all objects are retrieved.\r\n     * @returns {void}\r\n     *//**\r\n     * Gets all objects.\r\n     * @param {boolean} update Set to true to retrieve all objects from the server (instead of using the local cache).\r\n     * @param {boolean} disableProgressUpdate don't call onProgress() when done\r\n     * @returns {Promise<Record<string, ioBroker.Object>> | undefined}\r\n     */\r\n    getObjects(update, disableProgressUpdate) {\r\n        if (typeof update === 'function') {\r\n            const callback = update;\r\n            // BF(2020_06_01): old code, must be removed when adapter-react will be updated\r\n            if (!this.connected) {\r\n                console.error(NOT_CONNECTED);\r\n                callback();\r\n            } else {\r\n                if (this.objects && Object.keys(this.objects).length > 2) {\r\n                    setTimeout(() => callback(this.objects), 100);\r\n                } else {\r\n                    this._socket.emit('getAllObjects', (err, res) => {\r\n                        this.objects = res || {};\r\n                        disableProgressUpdate && this.onProgress(PROGRESS.OBJECTS_LOADED);\r\n                        callback(this.objects);\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            if (!this.connected) {\r\n                return Promise.reject(NOT_CONNECTED);\r\n            } else {\r\n                return new Promise((resolve, reject) => {\r\n                    if (!update && this.objects) {\r\n                        return resolve(this.objects);\r\n                    }\r\n\r\n                    this._socket.emit('getAllObjects', (err, res) => {\r\n                        this.objects = res;\r\n                        disableProgressUpdate && this.onProgress(PROGRESS.OBJECTS_LOADED);\r\n                        err ? reject(err) : resolve(this.objects);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {boolean} isEnable\r\n     */\r\n    _subscribe(isEnable) {\r\n        if (isEnable && !this.subscribed) {\r\n            this.subscribed = true;\r\n            this.autoSubscribes.forEach(id => this._socket.emit('subscribeObjects', id));\r\n            // re subscribe objects\r\n            Object.keys(this.objectsSubscribes).forEach(id => this._socket.emit('subscribeObjects', id));\r\n            // re-subscribe logs\r\n            this.autoSubscribeLog && this._socket.emit('requireLog', true);\r\n            // re subscribe states\r\n            Object.keys(this.statesSubscribes).forEach(id => this._socket.emit('subscribe', id));\r\n        } else if (!isEnable && this.subscribed) {\r\n            this.subscribed = false;\r\n            // un-subscribe objects\r\n            this.autoSubscribes.forEach(id => this._socket.emit('unsubscribeObjects', id));\r\n            Object.keys(this.objectsSubscribes).forEach(id => this._socket.emit('unsubscribeObjects', id));\r\n            // un-subscribe logs\r\n            this.autoSubscribeLog && this._socket.emit('requireLog', false);\r\n\r\n            // un-subscribe states\r\n            Object.keys(this.statesSubscribes).forEach(id => this._socket.emit('unsubscribe', id));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requests log updates.\r\n     * @param {boolean} isEnabled Set to true to get logs.\r\n     * @returns {Promise<void>}\r\n     */\r\n    requireLog(isEnabled) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('requireLog', isEnabled, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Deletes the given object.\r\n     * @param {string} id The object ID.\r\n     * @param {boolean} maintenance Force deletion of non conform IDs.\r\n     * @returns {Promise<void>}\r\n     */\r\n    delObject(id, maintenance) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('delObject', id, {maintenance: !!maintenance}, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Deletes the given object and all its children.\r\n     * @param {string} id The object ID.\r\n     * @param {boolean} maintenance Force deletion of non conform IDs.\r\n     * @returns {Promise<void>}\r\n     */\r\n    delObjects(id, maintenance) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('delObjects', id, {maintenance: !!maintenance}, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Sets the object.\r\n     * @param {string} id The object ID.\r\n     * @param {ioBroker.SettableObject} obj The object.\r\n     * @returns {Promise<void>}\r\n     */\r\n    setObject(id, obj) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!obj) {\r\n            return Promise.reject('Null object is not allowed');\r\n        }\r\n\r\n        obj = JSON.parse(JSON.stringify(obj));\r\n\r\n        if (obj.hasOwnProperty('from')) {\r\n            delete obj.from;\r\n        }\r\n        if (obj.hasOwnProperty('user')) {\r\n            delete obj.user;\r\n        }\r\n        if (obj.hasOwnProperty('ts')) {\r\n            delete obj.ts;\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('setObject', id, obj, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Gets the object with the given id from the server.\r\n     * @param {string} id The object ID.\r\n     * @returns {ioBroker.GetObjectPromise} The object.\r\n     */\r\n    getObject(id) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getObject', id, (err, obj) =>\r\n                err ? reject(err) : resolve(obj)));\r\n    }\r\n\r\n    /**\r\n     * Get all adapter instances.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     *//**\r\n     * Get all instances of the given adapter.\r\n     * @param {string} adapter The name of the adapter.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getAdapterInstances(adapter, update) {\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapter = '';\r\n        }\r\n        adapter = adapter || '';\r\n\r\n        if (!update && this._promises['instances_' + adapter]) {\r\n            return this._promises['instances_' + adapter];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['instances_' + adapter] = new Promise((resolve, reject) =>\r\n            this._socket.emit('getAdapterInstances', adapter, (err, instances) =>\r\n                err ? reject(err) : resolve(instances)));\r\n\r\n        return this._promises['instances_' + adapter];\r\n    }\r\n\r\n    /**\r\n     * Get all adapters.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     *//**\r\n     * Get adapters with the given name.\r\n     * @param {string} adapter The name of the adapter.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getAdapters(adapter, update) {\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapter = '';\r\n        }\r\n\r\n        adapter = adapter || '';\r\n\r\n        if (!update && this._promises['adapter_' + adapter]) {\r\n            return this._promises['adapter_' + adapter];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['adapter_' + adapter] = new Promise((resolve, reject) =>\r\n            this._socket.emit('getAdapterInstances', adapter, (err, instances) =>\r\n                err ? reject(err) : resolve(instances)));\r\n\r\n        return this._promises['adapter_' + adapter];\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     * @private\r\n     * @param {any[]} objs\r\n     * @param {(err?: any) => void} cb\r\n     */\r\n    _renameGroups(objs, cb) {\r\n        if (!objs || !objs.length) {\r\n            cb && cb();\r\n        } else {\r\n            let obj = objs.pop();\r\n            this.delObject(obj._id)\r\n                .then(() => {\r\n                    obj._id = obj.newId;\r\n                    delete obj.newId;\r\n                    return this.setObject(obj._id, obj)\r\n                })\r\n                .then(() => setTimeout(() => this._renameGroups(objs, cb), 0))\r\n                .catch(err => cb && cb(err));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rename a group.\r\n     * @param {string} id The id.\r\n     * @param {string} newId The new id.\r\n     * @param {string | { [lang in ioBroker.Languages]?: string; }} newName The new name.\r\n     */\r\n    renameGroup(id, newId, newName) {\r\n        return this.getGroups(true)\r\n            .then(groups => {\r\n                if (groups.length) {\r\n                    // find all elements\r\n                    const groupsToRename = groups\r\n                        .filter(group => group._id.startsWith(id + '.'))\r\n                        .forEach(group => group.newId = newId + group._id.substring(id.length));\r\n\r\n                    return new Promise((resolve, reject) =>\r\n                        this._renameGroups(groupsToRename, err => err ? reject(err) : resolve()))\r\n                        .then(() => {\r\n                            const obj = groups.find(group => group._id === id);\r\n\r\n                            if (obj) {\r\n                                obj._id = newId;\r\n                                if (newName !== undefined) {\r\n                                    obj.common = obj.common || {};\r\n                                    obj.common.name = newName;\r\n                                }\r\n\r\n                                return this.setObject(obj._id, obj);\r\n                            }\r\n                        });\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to a specific instance or all instances of some specific adapter.\r\n     * @param {string} instance The instance to send this message to.\r\n     * @param {string} [command] Command name of the target instance.\r\n     * @param {ioBroker.MessagePayload} [data] The message data to send.\r\n     * @returns {Promise<ioBroker.Message | undefined>}\r\n     */\r\n    sendTo(instance, command, data) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise(resolve =>\r\n            this._socket.emit('sendTo', instance, command, data, result =>\r\n                resolve(result)));\r\n    }\r\n\r\n    /**\r\n     * Extend an object and create it if it might not exist.\r\n     * @param {string} id The id.\r\n     * @param {ioBroker.PartialObject} obj The object.\r\n     */\r\n    extendObject(id, obj) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        obj = JSON.parse(JSON.stringify(obj));\r\n\r\n        if (obj.hasOwnProperty('from')) {\r\n            delete obj.from;\r\n        }\r\n        if (obj.hasOwnProperty('user')) {\r\n            delete obj.user;\r\n        }\r\n        if (obj.hasOwnProperty('ts')) {\r\n            delete obj.ts;\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('extendObject', id, obj, err => err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Register a handler for log messages.\r\n     * @param {(message: string) => void} handler The handler.\r\n     */\r\n    registerLogHandler(handler) {\r\n        !this.onLogHandlers.includes(handler) && this.onLogHandlers.push(handler);\r\n    }\r\n\r\n    /**\r\n     * Unregister a handler for log messages.\r\n     * @param {(message: string) => void} handler The handler.\r\n     */\r\n    unregisterLogHandler(handler) {\r\n        const pos = this.onLogHandlers.indexOf(handler);\r\n        pos !== -1 && this.onLogHandlers.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Register a handler for the connection state.\r\n     * @param {(connected: boolean) => void} handler The handler.\r\n     */\r\n    registerConnectionHandler(handler) {\r\n        !this.onConnectionHandlers.includes(handler) && this.onConnectionHandlers.push(handler);\r\n    }\r\n\r\n    /**\r\n     * Unregister a handler for the connection state.\r\n     * @param {(connected: boolean) => void} handler The handler.\r\n     */\r\n    unregisterConnectionHandler(handler) {\r\n        const pos = this.onConnectionHandlers.indexOf(handler);\r\n        pos !== -1 && this.onConnectionHandlers.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Set the handler for standard output of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    registerCmdStdoutHandler(handler) {\r\n        this.onCmdStdoutHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for standard output of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    unregisterCmdStdoutHandler(handler) {\r\n        this.onCmdStdoutHandler = null;\r\n    }\r\n\r\n    /**\r\n     * Set the handler for standard error of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    registerCmdStderrHandler(handler) {\r\n        this.onCmdStderrHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for standard error of a command.\r\n     * @param {(id: string, text: string) => void} handler The handler.\r\n     */\r\n    unregisterCmdStderrHandler(handler) {\r\n        this.onCmdStderrHandler = null;\r\n    }\r\n\r\n    /**\r\n     * Set the handler for exit of a command.\r\n     * @param {(id: string, exitCode: number) => void} handler The handler.\r\n     */\r\n    registerCmdExitHandler(handler) {\r\n        this.onCmdExitHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for exit of a command.\r\n     * @param {(id: string, exitCode: number) => void} handler The handler.\r\n     */\r\n    unregisterCmdExitHandler(handler) {\r\n        this.onCmdExitHandler = null;\r\n    }\r\n\r\n    /**\r\n     * Get all enums with the given name.\r\n     * @param {string} [_enum] The name of the enum\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<Record<string, ioBroker.Object>>}\r\n     */\r\n    getEnums(_enum, update) {\r\n        if (!update && this._promises['enums_' + (_enum || 'all')] ) {\r\n            return this._promises['enums_' + (_enum || 'all')];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['enums_' + (_enum || 'all')] = new Promise((resolve, reject) => {\r\n            this._socket.emit('getObjectView', 'system', 'enum', {startkey: 'enum.' + (_enum || ''), endkey: 'enum.' + (_enum ? (_enum + '.') : '') + '\\u9999'}, (err, res) => {\r\n                if (!err && res) {\r\n                    const _res = {};\r\n                    for (let i = 0; i < res.rows.length; i++) {\r\n                        if (_enum && res.rows[i].id === 'enum.' + _enum) {\r\n                            continue;\r\n                        }\r\n                        _res[res.rows[i].id] = res.rows[i].value;\r\n                    }\r\n                    resolve(_res);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises['enums_' + (_enum || 'all')];\r\n    }\r\n\r\n    /**\r\n     * Query a predefined object view.\r\n     * @param {string} start The start ID.\r\n     * @param {string} end The end ID.\r\n     * @param {string} type The type of object.\r\n     * @returns {Promise<Record<string, ioBroker.Object>>}\r\n     */\r\n    getObjectView(start, end, type) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        start = start || '';\r\n        end   = end   || '\\u9999';\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this._socket.emit('getObjectView', 'system', type, {startkey: start, endkey: end}, (err, res) => {\r\n                if (!err) {\r\n                    const _res = {};\r\n                    if (res && res.rows) {\r\n                        for (let i = 0; i < res.rows.length; i++) {\r\n                            _res[res.rows[i].id] = res.rows[i].value;\r\n                        }\r\n                    }\r\n                    resolve(_res);\r\n                } else {\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the stored certificates.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<{name: string; type: 'public' | 'private' | 'chained'}[]>}\r\n     */\r\n    getCertificates(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n\r\n        if (this._promises.cert && !update) {\r\n            return this._promises.cert;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.cert = this.getObject('system.certificates')\r\n            .then(res => {\r\n                const certs = [];\r\n                if (res && res.native && res.native.certificates) {\r\n                    Object.keys(res.native.certificates).forEach(c => {\r\n                        const cert = res.native.certificates[c];\r\n                        if (!cert) {\r\n                            return;\r\n                        }\r\n                        const _cert = {\r\n                            name: c,\r\n                            type: ''\r\n                        };\r\n                        // If it is filename, it could be everything\r\n                        if (cert.length < 700 && (cert.indexOf('/') !== -1 || cert.indexOf('\\\\') !== -1)) {\r\n                            if (c.toLowerCase().includes('private')) {\r\n                                _cert.type = 'private';\r\n                            } else if (cert.toLowerCase().includes('private')) {\r\n                                _cert.type = 'private';\r\n                            } else if (c.toLowerCase().includes('public')) {\r\n                                _cert.type = 'public';\r\n                            } else if (cert.toLowerCase().includes('public')) {\r\n                                _cert.type = 'public';\r\n                            }\r\n                            certs.push(_cert);\r\n                        } else {\r\n                            _cert.type = (cert.substring(0, '-----BEGIN RSA PRIVATE KEY'.length) === '-----BEGIN RSA PRIVATE KEY' || cert.substring(0, '-----BEGIN PRIVATE KEY'.length) === '-----BEGIN PRIVATE KEY') ? 'private' : 'public';\r\n\r\n                            if (_cert.type === 'public') {\r\n                                const m = cert.split('-----END CERTIFICATE-----');\r\n                                if (m.filter(t => t.replace(/\\r\\n|\\r|\\n/, '').trim()).length > 1) {\r\n                                    _cert.type = 'chained';\r\n                                }\r\n                            }\r\n\r\n                            certs.push(_cert);\r\n                        }\r\n                    });\r\n                }\r\n                return certs;\r\n            });\r\n\r\n        return this._promises.cert;\r\n    }\r\n\r\n    /**\r\n     * Get the logs from a host (only for admin connection).\r\n     * @param {string} host\r\n     * @param {number} [linesNumber]\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    getLogs(host, linesNumber) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise(resolve =>\r\n            this._socket.emit('sendToHost', host, 'getLogs', linesNumber || 200, lines =>\r\n                resolve(lines)));\r\n    }\r\n\r\n    /**\r\n     * Get the log files (only for admin connection).\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    getLogsFiles() {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('readLogs', (err, files) =>\r\n                err ? reject(err) : resolve(files)));\r\n    }\r\n\r\n    /**\r\n     * Delete the logs from a host (only for admin connection).\r\n     * @param {string} host\r\n     * @returns {Promise<void>}\r\n     */\r\n    delLogs(host) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('sendToHost', host, 'delLogs', null, error =>\r\n                error ? reject(error) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Read the meta items.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    readMetaItems() {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getObjectView', 'system', 'meta', {startkey: '', endkey: '\\u9999'}, (err, objs) =>\r\n                err ? reject(err) : resolve(objs.rows && objs.rows.map(obj => obj.value))));\r\n    }\r\n\r\n    /**\r\n     * Read the directory of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The directory name.\r\n     * @returns {Promise<ioBroker.ReadDirResult[]>}\r\n     */\r\n    readDir(adapter, fileName) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('readDir', adapter, fileName, (err, files) =>\r\n                err ? reject(err) : resolve(files)));\r\n    }\r\n\r\n    readFile(adapter, fileName, base64) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (!base64) {\r\n                this._socket.emit('readFile', adapter, fileName, (err, data, type) => {\r\n                    err ? reject(err) : resolve(data, type);\r\n                });\r\n            } else {\r\n                this._socket.emit('readFile64', adapter, fileName, base64, (err, data) =>\r\n                    err ? reject(err) : resolve(data));\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Write a file of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The file name.\r\n     * @param {Buffer | string} data The data (if it's a Buffer, it will be converted to Base64).\r\n     * @returns {Promise<void>}\r\n     */\r\n    writeFile64(adapter, fileName, data) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (typeof data === 'string') {\r\n                this._socket.emit('writeFile', adapter, fileName, data, err =>\r\n                    err ? reject(err) : resolve());\r\n            } else {\r\n                const base64 = btoa(\r\n                    new Uint8Array(data)\r\n                        .reduce((data, byte) => data + String.fromCharCode(byte), '')\r\n                );\r\n\r\n                this._socket.emit('writeFile64', adapter, fileName, base64, err =>\r\n                    err ? reject(err) : resolve());\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a file of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} fileName The file name.\r\n     * @returns {Promise<void>}\r\n     */\r\n    deleteFile(adapter, fileName) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('deleteFile', adapter, fileName, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Delete a folder of an adapter.\r\n     * @param {string} adapter The adapter name.\r\n     * @param {string} folderName The folder name.\r\n     * @returns {Promise<void>}\r\n     */\r\n    deleteFolder(adapter, folderName) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('deleteFolder', adapter, folderName, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Get the list of all hosts.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getHosts(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.hosts) {\r\n            return this._promises.hosts;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.hosts = new Promise((resolve, reject) =>\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'host',\r\n                {startkey: 'system.host.', endkey: 'system.host.\\u9999'},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value));\r\n                    }\r\n                }));\r\n\r\n        return this._promises.hosts;\r\n    }\r\n\r\n    /**\r\n     * Get the list of all users.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getUsers(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.users) {\r\n            return this._promises.users;\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.users = new Promise((resolve, reject) =>\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'user',\r\n                {startkey: 'system.user.', endkey: 'system.user.\\u9999'},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value));\r\n                    }\r\n                }));\r\n\r\n        return this._promises.users;\r\n    }\r\n\r\n    /**\r\n     * Get the list of all groups.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getGroups(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.groups) {\r\n            return this._promises.groups;\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.groups = new Promise((resolve, reject) =>\r\n            this._socket.emit(\r\n                'getObjectView',\r\n                'system',\r\n                'group',\r\n                {startkey: 'system.group.', endkey: 'system.group.\\u9999'},\r\n                (err, doc) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(doc.rows.map(item => item.value));\r\n                    }\r\n                }));\r\n\r\n        return this._promises.groups;\r\n    }\r\n\r\n    /**\r\n     * Get the host information.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @param {number} [timeoutMs] optional read timeout.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getHostInfo(host, update, timeoutMs) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        if (!update && this._promises['hostInfo' + host]) {\r\n            return this._promises['hostInfo' + host];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['hostInfo' + host] = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('getHostInfo timeout');\r\n                }\r\n            }, timeoutMs || this.props.cmdTimeout);\r\n\r\n            this._socket.emit('sendToHost', host, 'getHostInfo', null, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getHostInfo\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getHostInfo\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises['hostInfo' + host];\r\n    }\r\n\r\n    /**\r\n     * Get the host information (short version).\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @param {number} [timeoutMs] optional read timeout.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getHostInfoShort(host, update, timeoutMs) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        if (!update && this._promises['hostInfoShort' + host]) {\r\n            return this._promises['hostInfoShort' + host];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['hostInfoShort' + host] = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('hostInfoShort timeout');\r\n                }\r\n            }, timeoutMs || this.props.cmdTimeout);\r\n\r\n            this._socket.emit('sendToHost', host, 'getHostInfoShort', null, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getHostInfoShort\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getHostInfoShort\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises['hostInfoShort' + host];\r\n    }\r\n\r\n    /**\r\n     * Get the repository.\r\n     * @param {string} host\r\n     * @param {any} [args]\r\n     * @param {boolean} [update] Force update.\r\n     * @param {number} [timeoutMs] timeout in ms.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getRepository(host, args, update, timeoutMs) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.repo) {\r\n            return this._promises.repo;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        this._promises.repo = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('getRepository timeout');\r\n                }\r\n            }, timeoutMs || this.props.cmdTimeout);\r\n\r\n            this._socket.emit('sendToHost', host, 'getRepository', args, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getRepository\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getRepository\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises.repo;\r\n    }\r\n\r\n    /**\r\n     * Get the installed.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @param {number} [cmdTimeout] timeout in ms (optional)\r\n     * @returns {Promise<any>}\r\n     */\r\n    getInstalled(host, update, cmdTimeout) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n\r\n        this._promises.installed = this._promises.installed || {};\r\n\r\n        if (!update && this._promises.installed[host]) {\r\n            return this._promises.installed[host];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        this._promises.installed[host] = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('getInstalled timeout');\r\n                }\r\n            }, cmdTimeout || this.props.cmdTimeout);\r\n\r\n            this._socket.emit('sendToHost', host, 'getInstalled', null, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getInstalled\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getInstalled\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises.installed[host];\r\n    }\r\n\r\n    /**\r\n     * Execute a command on a host.\r\n     * @param {string} host The host name.\r\n     * @param {string} cmd The command.\r\n     * @param {string} cmdId The command ID.\r\n     * @returns {Promise<void>}\r\n     */\r\n    cmdExec(host, cmd, cmdId) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith(host)) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('cmdExec timeout');\r\n                }\r\n            }, this.props.cmdTimeout);\r\n\r\n            this._socket.emit('cmdExec', host, cmdId, cmd, null, err => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a given feature is supported.\r\n     * @param {string} feature The feature to check.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any>}\r\n     */\r\n    checkFeatureSupported(feature, update) {\r\n        if (!update && this._promises['supportedFeatures_' + feature]) {\r\n            return this._promises['supportedFeatures_' + feature];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises['supportedFeatures_' + feature] = new Promise((resolve, reject) =>\r\n            this._socket.emit('checkFeatureSupported', feature, (err, features) => {\r\n                err ? reject(err) : resolve(features)\r\n            }));\r\n\r\n        return this._promises['supportedFeatures_' + feature];\r\n    }\r\n\r\n    /**\r\n     * Read the base settings of a given host.\r\n     * @param {string} host\r\n     * @returns {Promise<any>}\r\n     */\r\n    readBaseSettings(host) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        return this.checkFeatureSupported('CONTROLLER_READWRITE_BASE_SETTINGS')\r\n            .then(result => {\r\n                if (result) {\r\n                    if (!this.connected) {\r\n                        return Promise.reject(NOT_CONNECTED);\r\n                    }\r\n                    return new Promise((resolve, reject) => {\r\n                        let timeout = setTimeout(() => {\r\n                            if (timeout) {\r\n                                timeout = null;\r\n                                reject('readBaseSettings timeout');\r\n                            }\r\n                        }, this.props.cmdTimeout);\r\n\r\n                        this._socket.emit('sendToHost', host, 'readBaseSettings', null, data => {\r\n                            if (timeout) {\r\n                                clearTimeout(timeout);\r\n                                timeout = null;\r\n\r\n                                if (data === PERMISSION_ERROR) {\r\n                                    reject('May not read \"BaseSettings\"');\r\n                                } else if (!data) {\r\n                                    reject('Cannot read \"BaseSettings\"');\r\n                                } else {\r\n                                    resolve(data);\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                } else {\r\n                    return Promise.reject('Not supported');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Write the base settings of a given host.\r\n     * @param {string} host\r\n     * @param {any} config\r\n     * @returns {Promise<any>}\r\n     */\r\n    writeBaseSettings(host, config) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        return this.checkFeatureSupported('CONTROLLER_READWRITE_BASE_SETTINGS')\r\n            .then(result => {\r\n                if (result) {\r\n                    if (!this.connected) {\r\n                        return Promise.reject(NOT_CONNECTED);\r\n                    }\r\n                    return new Promise((resolve, reject) => {\r\n                        let timeout = setTimeout(() => {\r\n                            if (timeout) {\r\n                                timeout = null;\r\n                                reject('writeBaseSettings timeout');\r\n                            }\r\n                        }, this.props.cmdTimeout);\r\n\r\n                        this._socket.emit('sendToHost', host, 'writeBaseSettings', config, data => {\r\n                            if (timeout) {\r\n                                clearTimeout(timeout);\r\n                                timeout = null;\r\n\r\n                                if (data === PERMISSION_ERROR) {\r\n                                    reject('May not write \"BaseSettings\"');\r\n                                } else if (!data) {\r\n                                    reject('Cannot write \"BaseSettings\"');\r\n                                } else {\r\n                                    resolve(data);\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                } else {\r\n                    return Promise.reject('Not supported');\r\n                }\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Send command to restart the iobroker on host\r\n     * @param {string} host\r\n     * @returns {Promise<any>}\r\n     */\r\n    restartController(host) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            this._socket.emit('sendToHost', host, 'restartController', null, error => {\r\n                error ? reject(error) : resolve(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read statistics information from host\r\n     * @param {string} host\r\n     * @param {string} typeOfDiag one of none, normal, no-city, extended\r\n     * @returns {Promise<any>}\r\n     */\r\n    getDiagData(host, typeOfDiag) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        return new Promise(resolve => {\r\n            this._socket.emit('sendToHost', host, 'getDiagData', typeOfDiag, result =>\r\n                resolve(result));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read all states (which might not belong to this adapter) which match the given pattern.\r\n     * @param {string} pattern\r\n     * @returns {ioBroker.GetStatesPromise}\r\n     */\r\n    getForeignStates(pattern) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getForeignStates', pattern || '*', (err, states) =>\r\n                err ? reject(err) : resolve(states)));\r\n    }\r\n\r\n    /**\r\n     * Get foreign objects by pattern, by specific type and resolve their enums.\r\n     * @param {string} pattern\r\n     * @param {string} [type]\r\n     * @returns {ioBroker.GetObjectsPromise}\r\n     */\r\n    getForeignObjects(pattern, type) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getForeignObjects', pattern || '*', type, (err, states) =>\r\n                err ? reject(err) : resolve(states)));\r\n    }\r\n\r\n    /**\r\n     * Gets the system configuration.\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.OtherObject>}\r\n     */\r\n    getSystemConfig(update) {\r\n        if (!update && this._promises.systemConfig) {\r\n            return this._promises.systemConfig;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.systemConfig = this.getObject('system.config')\r\n            .then(systemConfig => {\r\n                systemConfig = systemConfig || {};\r\n                systemConfig.common = systemConfig.common || {};\r\n                systemConfig.native = systemConfig.native || {};\r\n                return systemConfig;\r\n            });\r\n\r\n        return this._promises.systemConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the system configuration.\r\n     * @param {ioBroker.SettableObjectWorker<ioBroker.OtherObject>} obj\r\n     * @returns {Promise<ioBroker.SettableObjectWorker<ioBroker.OtherObject>>}\r\n     */\r\n    setSystemConfig(obj) {\r\n        return this.setObject('system.config', obj)\r\n            .then(() => this._promises.systemConfig = Promise.resolve(obj));\r\n    }\r\n\r\n    /**\r\n     * Get the raw socket.io socket.\r\n     * @returns {any}\r\n     */\r\n    getRawSocket() {\r\n        return this._socket;\r\n    }\r\n\r\n    /**\r\n     * Get the history of a given state.\r\n     * @param {string} id\r\n     * @param {ioBroker.GetHistoryOptions} options\r\n     * @returns {Promise<ioBroker.GetHistoryResult>}\r\n     */\r\n    getHistory(id, options) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getHistory', id, options, (err, values) =>\r\n                err ? reject(err) : resolve(values)));\r\n    }\r\n\r\n    /**\r\n     * Get the history of a given state.\r\n     * @param {string} id\r\n     * @param {ioBroker.GetHistoryOptions} options\r\n     * @returns {Promise<{values: ioBroker.GetHistoryResult; sesionId: string; stepIgnore: number}>}\r\n     */\r\n    getHistoryEx(id, options) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getHistory', id, options, (err, values, stepIgnore, sessionId) =>\r\n                err ? reject(err) : resolve({values, sessionId, stepIgnore})));\r\n    }\r\n\r\n    /**\r\n     * Change the password of the given user.\r\n     * @param {string} user\r\n     * @param {string} password\r\n     * @returns {Promise<void>}\r\n     */\r\n    changePassword(user, password) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('changePassword', user, password, err =>\r\n                err ? reject(err) : resolve()));\r\n    }\r\n\r\n    /**\r\n     * Get the IP addresses of the given host.\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<string[]>}\r\n     */\r\n    getIpAddresses(host, update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!host.startsWith('system.host.')) {\r\n            host = 'system.host.' + host;\r\n        }\r\n\r\n        if (!update && this._promises['IPs_' + host]) {\r\n            return this._promises['IPs_' + host];\r\n        }\r\n        this._promises['IPs_' + host] = this.getObject(host)\r\n            .then(obj => obj && obj.common ? obj.common.address || [] : []);\r\n\r\n        return this._promises['IPs_' + host];\r\n    }\r\n\r\n    /**\r\n     * Get the IP addresses with interface names of the given host or find host by IP.\r\n     * @param {string} ipOrHostName\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<any[<name, address, family>]>}\r\n     */\r\n    getHostByIp(ipOrHostName, update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (ipOrHostName.startsWith('system.host.')) {\r\n            ipOrHostName = ipOrHostName.replace(/^system\\.host\\./, '');\r\n        }\r\n\r\n        if (!update && this._promises['rIPs_' + ipOrHostName]) {\r\n            return this._promises['rIPs_' + ipOrHostName];\r\n        }\r\n        this._promises['rIPs_' + ipOrHostName] = new Promise(resolve =>\r\n            this._socket.emit('getHostByIp', ipOrHostName, (ip, host) => {\r\n                const IPs4 = [{name: '[IPv4] 0.0.0.0 - Listen on all IPs', address: '0.0.0.0', family: 'ipv4'}];\r\n                const IPs6 = [{name: '[IPv6] :: - Listen on all IPs',      address: '::',      family: 'ipv6'}];\r\n                if (host.native?.hardware?.networkInterfaces) {\r\n                    for (const eth in host.native.hardware.networkInterfaces) {\r\n                        if (!host.native.hardware.networkInterfaces.hasOwnProperty(eth)) {\r\n                            continue;\r\n                        }\r\n                        for (let num = 0; num < host.native.hardware.networkInterfaces[eth].length; num++) {\r\n                            if (host.native.hardware.networkInterfaces[eth][num].family !== 'IPv6') {\r\n                                IPs4.push({name: `[${host.native.hardware.networkInterfaces[eth][num].family}] ${host.native.hardware.networkInterfaces[eth][num].address} - ${eth}`, address: host.native.hardware.networkInterfaces[eth][num].address, family: 'ipv4'});\r\n                            } else {\r\n                                IPs6.push({name: `[${host.native.hardware.networkInterfaces[eth][num].family}] ${host.native.hardware.networkInterfaces[eth][num].address} - ${eth}`, address: host.native.hardware.networkInterfaces[eth][num].address, family: 'ipv6'});\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (let i = 0; i < IPs6.length; i++) {\r\n                    IPs4.push(IPs6[i]);\r\n                }\r\n                resolve(IPs4);\r\n            }));\r\n\r\n        return this._promises['rIPs_' + ipOrHostName];\r\n    }\r\n\r\n    /**\r\n     * Encrypt a text\r\n     * @param {string} text\r\n     * @returns {Promise<string>}\r\n     */\r\n    encrypt(text) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('encrypt', text, (err, text) =>\r\n                err ? reject(err) : resolve(text)));\r\n    }\r\n\r\n    /**\r\n     * Decrypt a text\r\n     * @param {string} encryptedText\r\n     * @returns {Promise<string>}\r\n     */\r\n    decrypt(encryptedText) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('decrypt', encryptedText, (err, text) =>\r\n                err ? reject(err) : resolve(text)));\r\n    }\r\n\r\n    /**\r\n     * Gets the version.\r\n     * @returns {Promise<{version: string; serverName: string}>}\r\n     */\r\n    getVersion() {\r\n        this._promises.version = this._promises.version || new Promise((resolve, reject) =>\r\n            this._socket.emit('getVersion', (err, version, serverName) => {\r\n                // support of old socket.io\r\n                if (err && !version && typeof err === 'string' && err.match(/\\d+\\.\\d+\\.\\d+/)) {\r\n                    resolve({version: err, serverName: 'socketio'});\r\n                } else {\r\n                    return err ? reject(err) : resolve({version, serverName});\r\n                }\r\n            }));\r\n\r\n        return this._promises.version;\r\n    }\r\n\r\n    /**\r\n     * Gets the web server name.\r\n     * @returns {Promise<string>}\r\n     */\r\n    getWebServerName() {\r\n        this._promises.webName = this._promises.webName || new Promise((resolve, reject) =>\r\n            this._socket.emit('getAdapterName', (err, name) =>\r\n                err ? reject(err) : resolve(name)));\r\n\r\n        return this._promises.webName;\r\n    }\r\n\r\n    /**\r\n     * Gets the admin version.\r\n     * @deprecated use getVersion()\r\n     * @returns {Promise<{version: string; serverName: string}>}\r\n     */\r\n    getAdminVersion() {\r\n        console.log('Deprecated: use getVersion');\r\n        return this.getVersion();\r\n    }\r\n\r\n    /**\r\n     * Change access rights for file\r\n     * @param {string} [adapter] adapter name\r\n     * @param {string} [filename] file name with full path. it could be like vis.0/*\r\n     * @param {object} [options] like {mode: 0x644}\r\n     * @returns {Promise<{entries: array}>}\r\n     */\r\n    chmodFile(adapter, filename, options) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('chmodFile', adapter, filename, options, (err, entries, id) =>\r\n                err ? reject(err) : resolve({entries, id})));\r\n    }\r\n\r\n    /**\r\n     * Change owner or/and owner group for file\r\n     * @param {string} [adapter] adapter name\r\n     * @param {string} [filename] file name with full path. it could be like vis.0/*\r\n     * @param {object} [options] like {owner: 'newOwner', ownerGroup: 'newGroup'}\r\n     * @returns {Promise<{entries: array}>}\r\n     */\r\n    chownFile(adapter, filename, options) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('chownFile', adapter, filename, options, (err, entries, id) =>\r\n                err ? reject(err) : resolve({entries, id})));\r\n    }\r\n\r\n    /**\r\n     * Check if the file exists\r\n     * @param {string} [adapter] adapter name\r\n     * @param {string} [filename] file name with full path. it could be like vis.0/*\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    fileExists(adapter, filename) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('fileExists', adapter, filename, (err, exists) =>\r\n                err ? reject(err) : resolve(exists)));\r\n    }\r\n\r\n    /**\r\n     * Get the alarm notifications from a host (only for admin connection).\r\n     * @param {string} host\r\n     * @param {string} [category] - optional\r\n     * @returns {Promise<any>}\r\n     */\r\n    getNotifications(host, category) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise(resolve =>\r\n            this._socket.emit('sendToHost', host, 'getNotifications', {category}, notifications =>\r\n                resolve(notifications)));\r\n    }\r\n\r\n    /**\r\n     * Clear the alarm notifications on a host (only for admin connection).\r\n     * @param {string} host\r\n     * @param {string} [category] - optional\r\n     * @returns {Promise<any>}\r\n     */\r\n    clearNotifications(host, category) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise(resolve =>\r\n            this._socket.emit('sendToHost', host, 'clearNotifications', {category}, notifications =>\r\n                resolve(notifications)));\r\n    }\r\n\r\n    /**\r\n     * Read if only easy mode is allowed  (only for admin connection).\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    getIsEasyModeStrict() {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getIsEasyModeStrict', (error, isStrict) =>\r\n                error ? reject(error) : resolve(isStrict)));\r\n    }\r\n\r\n    /**\r\n     * Read easy mode configuration (only for admin connection).\r\n     * @returns {Promise<any>}\r\n     */\r\n    getEasyMode() {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getEasyMode', (error, config) =>\r\n                error ? reject(error) : resolve(config)));\r\n    }\r\n\r\n    /**\r\n     * Read current user\r\n     * @returns {Promise<string>}\r\n     */\r\n    getCurrentUser() {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise(resolve =>\r\n            this._socket.emit('authEnabled', (isSecure, user) =>\r\n                resolve(user)));\r\n    }\r\n\r\n    getCurrentSession(cmdTimeout) {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const controller = new AbortController();\r\n\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    controller.abort();\r\n                    reject('getCurrentSession timeout');\r\n                }\r\n            }, cmdTimeout || 5000);\r\n\r\n            return fetch('./session', { signal: controller.signal })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    if (timeout) {\r\n                        clearTimeout(timeout);\r\n                        timeout = null;\r\n                        resolve(json);\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    reject('getCurrentSession: ' + e);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read adapter ratings\r\n     * @returns {Promise<any>}\r\n     */\r\n    getRatings(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        return new Promise((resolve, reject) =>\r\n            this._socket.emit('getRatings', update, (err, ratings) =>\r\n                err ? reject(err) : resolve(ratings)));\r\n    }\r\n\r\n    /**\r\n     * Read current web, socketio or admin namespace, like admin.0\r\n     * @returns {Promise<string>}\r\n     */\r\n    getCurrentInstance() {\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.currentInstance = this._promises.currentInstance ||\r\n            new Promise((resolve, reject) =>\r\n                this._socket.emit('getCurrentInstance', (err, namespace) =>\r\n                    err ? reject(err) : resolve(namespace)));\r\n\r\n        return this._promises.currentInstance;\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize connection load\r\n    getCompactAdapters(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.compactAdapters) {\r\n            return this._promises.compactAdapters;\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n        this._promises.compactAdapters = new Promise((resolve, reject) =>\r\n            this._socket.emit('getCompactAdapters', (err, systemConfig) =>\r\n                err ? reject(err) : resolve(systemConfig)));\r\n\r\n        return this._promises.compactAdapters;\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize connection load\r\n    getCompactInstances(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.compactInstances) {\r\n            return this._promises.compactInstances;\r\n        }\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.compactInstances = new Promise((resolve, reject) =>\r\n            this._socket.emit('getCompactInstances', (err, systemConfig) =>\r\n                err ? reject(err) : resolve(systemConfig)));\r\n\r\n        return this._promises.compactInstances;\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize connection load\r\n    // reads only version of installed adapter\r\n    getCompactInstalled(host, update, cmdTimeout) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n\r\n        this._promises.installedCompact = this._promises.installedCompact || {};\r\n\r\n        if (!update && this._promises.installedCompact[host]) {\r\n            return this._promises.installedCompact[host];\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        this._promises.installedCompact[host] = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('getCompactInstalled timeout');\r\n                }\r\n            }, cmdTimeout || this.props.cmdTimeout);\r\n\r\n            this._socket.emit('getCompactInstalled', host, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getCompactInstalled\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getCompactInstalled\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises.installedCompact[host];\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize connection load\r\n    getCompactSystemConfig(update) {\r\n        if (!update && this._promises.systemConfigCommon) {\r\n            return this._promises.systemConfigCommon;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.systemConfigCommon = new Promise((resolve, reject) =>\r\n            this._socket.emit('getCompactSystemConfig', (err, systemConfig) =>\r\n                err ? reject(err) : resolve(systemConfig)));\r\n\r\n        return this._promises.systemConfigCommon;\r\n    }\r\n\r\n    /**\r\n     * Get the repository in compact form (only version and icon).\r\n     * @param {string} host\r\n     * @param {boolean} [update] Force update.\r\n     * @param {number} [timeoutMs] timeout in ms.\r\n     * @returns {Promise<any>}\r\n     */\r\n    getCompactRepository(host, update, timeoutMs) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.repoCompact) {\r\n            return this._promises.repoCompact;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        if (!host.startsWith('system.host.')) {\r\n            host += 'system.host.' + host;\r\n        }\r\n\r\n        this._promises.repoCompact = new Promise((resolve, reject) => {\r\n            let timeout = setTimeout(() => {\r\n                if (timeout) {\r\n                    timeout = null;\r\n                    reject('getCompactRepository timeout');\r\n                }\r\n            }, timeoutMs || this.props.cmdTimeout);\r\n\r\n            this._socket.emit('getCompactRepository', host, data => {\r\n                if (timeout) {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                    if (data === PERMISSION_ERROR) {\r\n                        reject('May not read \"getCompactRepository\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getCompactRepository\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return this._promises.repoCompact;\r\n    }\r\n\r\n    /**\r\n     * Get the list of all hosts in compact form (only _id, common.name, common.icon, common.color, native.hardware.networkInterfaces)\r\n     * @param {boolean} [update] Force update.\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getCompactHosts(update) {\r\n        if (Connection.isWeb()) {\r\n            return Promise.reject('Allowed only in admin');\r\n        }\r\n        if (!update && this._promises.hostsCompact) {\r\n            return this._promises.hostsCompact;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.hostsCompact = new Promise((resolve, reject) =>\r\n            this._socket.emit('getCompactHosts', (err, systemConfig) =>\r\n                err ? reject(err) : resolve(systemConfig)));\r\n\r\n        return this._promises.hostsCompact;\r\n    }\r\n\r\n    /**\r\n     * Get uuid\r\n     * @returns {Promise<ioBroker.Object[]>}\r\n     */\r\n    getUuid() {\r\n        if (this._promises.uuid) {\r\n            return this._promises.uuid;\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return Promise.reject(NOT_CONNECTED);\r\n        }\r\n\r\n        this._promises.uuid = this.getObject('system.meta.uuid')\r\n            .then(obj => obj?.native?.uuid);\r\n\r\n        return this._promises.uuid;\r\n    }\r\n}\r\n\r\nConnection.Connection = {\r\n    onLog: PropTypes.func,\r\n    onReady: PropTypes.func,\r\n    onProgress: PropTypes.func,\r\n};\r\n\r\nexport {ERRORS};\r\n\r\nexport default Connection;\r\n"],"file":"Connection.js"}